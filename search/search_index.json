{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the official Nebula Graph documentation. \u00b6 Nebula Graph is a distributed, scalable, lightning-fast graph database. It is the only solution in the world capable to host graphs with dozens of billions of vertices (nodes) and trillions of edges, while still provides millisecond latency. Nebula Graph's goal is to provide reading, writing, and computing with high concurrency, low latency for super large scale graphs. Nebula is an open source project and we are looking forward to working with the community to popularize and promote the graph database. Nebula Graph's primary features Symmetrically distributed Highly scalable Fault tolerant SQL-like query language How can I get Nebula \u00b6 Apart from installing Nebula Graph from source code, you can use the official Nebula Graph image . For more details on how to install Nebula Graph, see Get Started . How can I contribute \u00b6 As the team behind Nebula Graph , we fully commit to the community and all-in to the open source project. All the core features are and will be implemented in the open source repository. We also encourage the community to involve the project. There are a few ways you can contribute: You can download and try Nebula Graph , and provide us feedbacks You can submit your feature requirements and bug reports You can help contribute the documentations. More details on how to contribute click Contribute to Nebula Graph Docs You can fix bugs or implement features. More details on how to build the project and submit the Pull Requests click Contribute to Nebula Graph Licensing \u00b6 Nebula Graph is under Apache 2.0 license, so you can freely download, modify, deploy the source code to meet your needs. You can also freely deploy Nebula Graph as a back-end service to support your SAAS deployment. In order to prevent cloud providers monetarizing from the project without contributing back, we added Common Clause 1.0 to the project. As mentioned above, we fully commit to the open source community. We would love to hear your thoughts on the licensing model and are willing to make it more suitable for the community. Contact \u00b6 Please use GitHub issue tracker for reporting bugs or feature requests. Join . Visit Nebula Graph home page for more features.","title":"Welcome to the official Nebula Graph documentation."},{"location":"#welcome-to-the-official-nebula-graph-documentation","text":"Nebula Graph is a distributed, scalable, lightning-fast graph database. It is the only solution in the world capable to host graphs with dozens of billions of vertices (nodes) and trillions of edges, while still provides millisecond latency. Nebula Graph's goal is to provide reading, writing, and computing with high concurrency, low latency for super large scale graphs. Nebula is an open source project and we are looking forward to working with the community to popularize and promote the graph database. Nebula Graph's primary features Symmetrically distributed Highly scalable Fault tolerant SQL-like query language","title":"Welcome to the official Nebula Graph documentation."},{"location":"#how-can-i-get-nebula","text":"Apart from installing Nebula Graph from source code, you can use the official Nebula Graph image . For more details on how to install Nebula Graph, see Get Started .","title":"How can I get Nebula"},{"location":"#how-can-i-contribute","text":"As the team behind Nebula Graph , we fully commit to the community and all-in to the open source project. All the core features are and will be implemented in the open source repository. We also encourage the community to involve the project. There are a few ways you can contribute: You can download and try Nebula Graph , and provide us feedbacks You can submit your feature requirements and bug reports You can help contribute the documentations. More details on how to contribute click Contribute to Nebula Graph Docs You can fix bugs or implement features. More details on how to build the project and submit the Pull Requests click Contribute to Nebula Graph","title":"How can I contribute"},{"location":"#licensing","text":"Nebula Graph is under Apache 2.0 license, so you can freely download, modify, deploy the source code to meet your needs. You can also freely deploy Nebula Graph as a back-end service to support your SAAS deployment. In order to prevent cloud providers monetarizing from the project without contributing back, we added Common Clause 1.0 to the project. As mentioned above, we fully commit to the open source community. We would love to hear your thoughts on the licensing model and are willing to make it more suitable for the community.","title":"Licensing"},{"location":"#contact","text":"Please use GitHub issue tracker for reporting bugs or feature requests. Join . Visit Nebula Graph home page for more features.","title":"Contact"},{"location":"contribute-to-documentation/","text":"Contribute to documentation \u00b6 Contributing to the Nebula documentation can be a rewarding experience. We welcome your participation to help make the documentation better! How to contribute to the docs \u00b6 There are many ways to contribute: Edit, rate, or file an issue or question directly on the site by using the pencil mark available on the right-side on every page. File a documentation issue on GitHub . Fork the documentation, make changes or add new content on your local branch, and submit a pull request (PR) to the master branch for the docs.","title":"Contribute to documentation"},{"location":"contribute-to-documentation/#contribute-to-documentation","text":"Contributing to the Nebula documentation can be a rewarding experience. We welcome your participation to help make the documentation better!","title":"Contribute to documentation"},{"location":"contribute-to-documentation/#how-to-contribute-to-the-docs","text":"There are many ways to contribute: Edit, rate, or file an issue or question directly on the site by using the pencil mark available on the right-side on every page. File a documentation issue on GitHub . Fork the documentation, make changes or add new content on your local branch, and submit a pull request (PR) to the master branch for the docs.","title":"How to contribute to the docs"},{"location":"cpp-coding-style/","text":"Please Refer to Google C++ Style Guide .","title":"Cpp coding style"},{"location":"deploy-cluster/","text":"This tutorial provides an introduction to deploy Nebula cluster. Download and install package \u00b6 First at all, you can download rpm or deb from Here . Currently, we have offered CentOS 7.5 , CentOS 6.5 , Ubuntu 1604 and Ubuntu 1804 's installation package. For CentOS : rpm -ivh nebula-{VERSION}.{SYSTEM_VERSION}.x86_64.rpm For Ubuntu : dpkg -i nebula-{VERSION}.{SYSTEM_VERSION}.amd64.deb By default, the config files are under /usr/local/nebula/etc , you should modify the meta_server_addrs to set the Meta Server's address. In order to enable multi copy Meta service, you should set the meta addresses split by comma into meta_server_addrs . Use data_path to set Meta and Storage 's underlying storage directory. StartUp Nebula Cluster \u00b6 Currently, we support scripts/services.sh to manage the nebula cluster. You can start , stop and restart the cluster using this script. It looks like the following command: scripts/services.sh <start|stop|restart|status|kill> The metas, storages and graphs contain the host of themselves. Config reference \u00b6 Meta Service supports the following config properties. Property Name Default Value Description port 45500 Meta daemon listening port. reuse_port true Whether to turn on the SO_REUSEPORT option. data_path \"\" Root data path. peers \"\" It is a list of IPs split by comma, the ips number equals replica number. If empty, it means replica is 1. local_ip \"\" Local ip speicified for NetworkUtils::getLocalIP. num_io_threads 16 Number of IO threads. meta_http_thread_num 3 Number of meta daemon's http thread. num_worker_threads 32 Number of workers. part_man_type memory memory, meta. pid_file \"pids/nebula-metad.pid\" File to hold the process id. daemonize true Whether run as a daemon process. cluster_id 0 A unique id for each cluster. putTryNum 10 Number of attempts to generate cluster ID. load_config_interval_secs 2 * 60 Load config interval. meta_ingest_thread_num 3. Meta daemon's ingest thread number. Storage Service supports the following config properties. Property Name Default Value Description port 44500 Storage daemon listening port. reuse_port true Whether to turn on the SO_REUSEPORT option. data_path \"\" Root data path, multi paths should be split by comma. For rocksdb engine, one path one instance. local_ip \"\" IP address which is used to identify this server, combined with the listen port. daemonize true Whether to run the process as a daemon. pid_file \"pids/nebula-storaged.pid\" File to hold the process id. meta_server_addrs \"\" List of meta server addresses, the format looks like ip1:port1, ip2:port2, ip3:port3. store_type \"nebula\" Which type of KVStore to be used by the storage daemon.Options can be \\\"nebula\\\", \\\"hbase\\\", etc. num_io_threads 16 Number of IO threads storage_http_thread_num 3 Number of storage daemon's http thread. num_worker_threads 32 Number of workers. engine_type rocksdb rocksdb, memory... custom_filter_interval_secs 24 * 3600 Interval to trigger custom compaction. num_workers 4 Number of worker threads. rocksdb_disable_wal false Whether to disable the WAL in rocksdb. rocksdb_db_options \"\" DBOptions, each option will be given as : separated by. rocksdb_column_family_options \"\" ColumnFamilyOptions, each option will be given as : separated by. rocksdb_block_based_table_options \"\" BlockBasedTableOptions, each option will be given as : separated by. batch_size 4 * 1024 Default reserved bytes for one batch operation block_cache 4 BlockBasedTable:block_cache : MB download_thread_num 3 Download thread number. min_vertices_per_bucket 3 The min vertices number in one bucket. max_appendlog_batch_size 128 The max number of logs in each appendLog request batch. max_outstanding_requests 1024 The max number of outstanding appendLog requests. raft_rpc_timeout_ms 500 RPC timeout for raft client. accept_log_append_during_pulling false Whether to accept new logs during pulling the snapshot. raft_heartbeat_interval_secs 5 Seconds between each heartbeat. max_batch_size 256 The max number of logs in a batch. Graph Service supports the following config properties. Property Name Default Value Description port 3699 Nebula Graph daemon's listen port. client_idle_timeout_secs 0 Seconds before we close the idle connections, 0 for infinite. session_idle_timeout_secs 600 Seconds before we expire the idle sessions, 0 for infinite. session_reclaim_interval_secs 10 Period we try to reclaim expired sessions. num_netio_threads 0 Number of networking threads, 0 for number of physical CPU cores. num_accept_threads 1 Number of threads to accept incoming connections. num_worker_threads 1 Number of threads to execute user queries. reuse_port true Whether to turn on the SO_REUSEPORT option. listen_backlog 1024 Backlog of the listen socket. listen_netdev \"any\" The network device to listen on. pid_file \"pids/nebula-graphd.pid\" File to hold the process id. redirect_stdout true Whether to redirect stdout and stderr to separate files. stdout_log_file \"graphd-stdout.log\" Destination filename of stdout. stderr_log_file \"graphd-stderr.log\" Destination filename of stderr. daemonize true Whether run as a daemon process. meta_server_addrs \"\" List of meta server addresses, the format looks like ip1:port1, ip2:port2, ip3:port3. Web Service supports the following config properties. Property Name Default Value Description ws_http_port 11000 Port to listen on with HTTP protocol. ws_h2_port 11002 Port to listen on with HTTP/2 protocol. ws_ip \"127.0.0.1\" IP/Hostname to bind to. ws_threads 4 Number of threads for the web service. ws_meta_http_port 11000 Port to listen on Meta with HTTP protocol. ws_meta_h2_port 11002 Port to listen on Meta with HTTP/2 protocol. ws_storage_http_port 12000 Port to listen on Storage with HTTP protocol. ws_storage_h2_port 12002 Port to listen on Storage with HTTP/2 protocol. Console supports the following config properties. Property Name Default Value Description addr \"127.0.0.1\" Nebula daemon IP address port 0 Nebula daemon listening port. u \"\" Username used to authenticate. p \"\" Password used to authenticate. enable_history false Whether to force saving the command history. server_conn_timeout_ms 1000 Connection timeout in milliseconds.","title":"Deploy cluster"},{"location":"deploy-cluster/#download-and-install-package","text":"First at all, you can download rpm or deb from Here . Currently, we have offered CentOS 7.5 , CentOS 6.5 , Ubuntu 1604 and Ubuntu 1804 's installation package. For CentOS : rpm -ivh nebula-{VERSION}.{SYSTEM_VERSION}.x86_64.rpm For Ubuntu : dpkg -i nebula-{VERSION}.{SYSTEM_VERSION}.amd64.deb By default, the config files are under /usr/local/nebula/etc , you should modify the meta_server_addrs to set the Meta Server's address. In order to enable multi copy Meta service, you should set the meta addresses split by comma into meta_server_addrs . Use data_path to set Meta and Storage 's underlying storage directory.","title":"Download and install package"},{"location":"deploy-cluster/#startup-nebula-cluster","text":"Currently, we support scripts/services.sh to manage the nebula cluster. You can start , stop and restart the cluster using this script. It looks like the following command: scripts/services.sh <start|stop|restart|status|kill> The metas, storages and graphs contain the host of themselves.","title":"StartUp Nebula Cluster"},{"location":"deploy-cluster/#config-reference","text":"Meta Service supports the following config properties. Property Name Default Value Description port 45500 Meta daemon listening port. reuse_port true Whether to turn on the SO_REUSEPORT option. data_path \"\" Root data path. peers \"\" It is a list of IPs split by comma, the ips number equals replica number. If empty, it means replica is 1. local_ip \"\" Local ip speicified for NetworkUtils::getLocalIP. num_io_threads 16 Number of IO threads. meta_http_thread_num 3 Number of meta daemon's http thread. num_worker_threads 32 Number of workers. part_man_type memory memory, meta. pid_file \"pids/nebula-metad.pid\" File to hold the process id. daemonize true Whether run as a daemon process. cluster_id 0 A unique id for each cluster. putTryNum 10 Number of attempts to generate cluster ID. load_config_interval_secs 2 * 60 Load config interval. meta_ingest_thread_num 3. Meta daemon's ingest thread number. Storage Service supports the following config properties. Property Name Default Value Description port 44500 Storage daemon listening port. reuse_port true Whether to turn on the SO_REUSEPORT option. data_path \"\" Root data path, multi paths should be split by comma. For rocksdb engine, one path one instance. local_ip \"\" IP address which is used to identify this server, combined with the listen port. daemonize true Whether to run the process as a daemon. pid_file \"pids/nebula-storaged.pid\" File to hold the process id. meta_server_addrs \"\" List of meta server addresses, the format looks like ip1:port1, ip2:port2, ip3:port3. store_type \"nebula\" Which type of KVStore to be used by the storage daemon.Options can be \\\"nebula\\\", \\\"hbase\\\", etc. num_io_threads 16 Number of IO threads storage_http_thread_num 3 Number of storage daemon's http thread. num_worker_threads 32 Number of workers. engine_type rocksdb rocksdb, memory... custom_filter_interval_secs 24 * 3600 Interval to trigger custom compaction. num_workers 4 Number of worker threads. rocksdb_disable_wal false Whether to disable the WAL in rocksdb. rocksdb_db_options \"\" DBOptions, each option will be given as : separated by. rocksdb_column_family_options \"\" ColumnFamilyOptions, each option will be given as : separated by. rocksdb_block_based_table_options \"\" BlockBasedTableOptions, each option will be given as : separated by. batch_size 4 * 1024 Default reserved bytes for one batch operation block_cache 4 BlockBasedTable:block_cache : MB download_thread_num 3 Download thread number. min_vertices_per_bucket 3 The min vertices number in one bucket. max_appendlog_batch_size 128 The max number of logs in each appendLog request batch. max_outstanding_requests 1024 The max number of outstanding appendLog requests. raft_rpc_timeout_ms 500 RPC timeout for raft client. accept_log_append_during_pulling false Whether to accept new logs during pulling the snapshot. raft_heartbeat_interval_secs 5 Seconds between each heartbeat. max_batch_size 256 The max number of logs in a batch. Graph Service supports the following config properties. Property Name Default Value Description port 3699 Nebula Graph daemon's listen port. client_idle_timeout_secs 0 Seconds before we close the idle connections, 0 for infinite. session_idle_timeout_secs 600 Seconds before we expire the idle sessions, 0 for infinite. session_reclaim_interval_secs 10 Period we try to reclaim expired sessions. num_netio_threads 0 Number of networking threads, 0 for number of physical CPU cores. num_accept_threads 1 Number of threads to accept incoming connections. num_worker_threads 1 Number of threads to execute user queries. reuse_port true Whether to turn on the SO_REUSEPORT option. listen_backlog 1024 Backlog of the listen socket. listen_netdev \"any\" The network device to listen on. pid_file \"pids/nebula-graphd.pid\" File to hold the process id. redirect_stdout true Whether to redirect stdout and stderr to separate files. stdout_log_file \"graphd-stdout.log\" Destination filename of stdout. stderr_log_file \"graphd-stderr.log\" Destination filename of stderr. daemonize true Whether run as a daemon process. meta_server_addrs \"\" List of meta server addresses, the format looks like ip1:port1, ip2:port2, ip3:port3. Web Service supports the following config properties. Property Name Default Value Description ws_http_port 11000 Port to listen on with HTTP protocol. ws_h2_port 11002 Port to listen on with HTTP/2 protocol. ws_ip \"127.0.0.1\" IP/Hostname to bind to. ws_threads 4 Number of threads for the web service. ws_meta_http_port 11000 Port to listen on Meta with HTTP protocol. ws_meta_h2_port 11002 Port to listen on Meta with HTTP/2 protocol. ws_storage_http_port 12000 Port to listen on Storage with HTTP protocol. ws_storage_h2_port 12002 Port to listen on Storage with HTTP/2 protocol. Console supports the following config properties. Property Name Default Value Description addr \"127.0.0.1\" Nebula daemon IP address port 0 Nebula daemon listening port. u \"\" Username used to authenticate. p \"\" Password used to authenticate. enable_history false Whether to force saving the command history. server_conn_timeout_ms 1000 Connection timeout in milliseconds.","title":"Config reference"},{"location":"developer-documentation-style-guide/","text":"Key Point: Use this guide as a style reference for our developer documentation. Goals \u00b6 The guide can help you avoid making decisions about the same issue over and over, can provide editorial assistance on structuring and writing your documentation, and can help you keep your documentation consistent with our other documentation. Non-goals \u00b6 This guide isn't intended to provide an industry documentation standard, nor to compete with other well-known style guides. It's a description of our house style, not a statement that our decisions are objectively correct. This guide is a living document; it changes over time, and when it changes, we generally don't change previously published documentation to match. We strive for consistency to the extent feasible, but at any given time there are certain to be parts of our documentation that don't match this style guide. When in doubt, follow this guide rather than imitating existing documents. Breaking the \"rules\" \u00b6 In most contexts, Nebula has no ability nor desire to enforce these guidelines if they're not appropriate to the context. But we hope that you'll join us in striving for high-quality documentation. Like most style guides, our style guide aims to improve our documentation, especially by improving consistency; therefore, there may be contexts where it makes sense to diverge from our guidelines in order to make your documentation better. Style and authorial tone \u00b6 Aim, in your documents, for a voice and tone that's conversational, friendly, and respectful without being overly colloquial or frivolous; a voice that's casual and natural and approachable, not pedantic or pushy. Try to sound like a knowledgeable friend who understands what the developer wants to do. Don't try to write exactly the way you speak; you probably speak more colloquially and verbosely than you should write, at least for developer documentation. But aim for a conversational tone rather than a formal one. Some techniques and approaches to consider \u00b6 If you're having trouble expressing something, step back and ask yourself, \"What am I trying to say?\" Often, the answer you give yourself reveals what you should be saying in the document. If you're uncertain about your phrasing or tone, ask a colleague to take a look. Try reading parts of your document out loud, or at least mouthing the words. Does it sound natural? Not every sentence has to sound natural when spoken; these are written documents. But if you come across a sentence that's awkward or confusing when spoken, consider whether you can make it more conversational. Use transitions between sentences. Phrases like \"Though\" or \"This way\" can make paragraphs less stilted. (Then again, sometimes transitions like \"However\" or \"Nonetheless\" can make paragraphs more stilted.) Even if you're having trouble hitting the right tone, make sure you're communicating useful information in a clear and direct way; that's the most important part. Tense \u00b6 In general, use present tense rather than future tense; in particular, try to avoid using will where possible. The fact that the reader will be writing and running code in the future isn't a good reason to use future tense. Stick with present tense where. Also avoid the hypothetical future would . Links \u00b6 When you're writing link text, use a phrase that describes what the reader will see after following the link. That can take either of two forms: - The exact title of the linked-to page, capitalized the same way the title is capitalized. - A description of the linked-to page, capitalized like ordinary text instead of like a title. A couple of specific things to not do in link text: - Don't use the phrase \"click here.\" (It's bad for accessibility and bad for scannability.) - Similarly, don't use phrases like \"this document.\" (It's easy to read \"this\" as meaning \"the one you're reading now\" rather than \"the one I'm pointing to.\") - Don't use a URL as link text. Instead, use the page title or a description of the page. Punctuation with links \u00b6 If you have punctuation immediately before or after a link, put the punctuation outside of the link tags where possible. In particular, put quotation marks outside of link tags. Accessible content \u00b6 General dos and don'ts \u00b6 Ensure that readers can reach all parts of the document (including tabs, form-submission buttons, and interactive elements) using only a keyboard, without a mouse or trackpad. Don't use color, size, location, or other visual cues as the primary way of communicating information. If you're using color, icon, or outline thickness to convey state, then also provide a secondary cue, such as a change in the text label. Refer to buttons and other elements by their label (or aria-label , if they\u2019re visual elements), not by location or shape. Avoid unnecessary font formatting. (Screen readers explicitly describe text modifications.) If you're documenting a product that includes specialized accessibility features, then explicitly document those features. For example, the gcloud command-line tool includes togglable accessibility features such as percentage progress bars and ASCII box rendering. Images \u00b6 For every image, provide alt text that adequately summarizes the intent of each image. Don't present new information in images; always provide an equivalent text explanation with the image. Use SVG files or crushed PNG images. Provide high-resolution images when practical. Tables \u00b6 If your tables include both row and column headings, then mark heading cells with the scope attribute. If your tables have more than one row containing column headings, then use the headers attribute. Forms \u00b6 Label every input field, using a <label> element. Place labels outside of fields. When you're creating an error message for form validation, clearly state what went wrong and how to fix it. For example: \"Name is a required field.\" Videos \u00b6 Provide captions. Ensure that captions can be translated into major languages. Language and grammar \u00b6 Use second person: \"you\" rather than \"we.\" Use active voice; make clear who's performing the action. Use standard American spelling and punctuation. Put conditional clauses before instructions, not after. For usage and spelling of specific words, see the word list. Formatting, punctuation, and organization \u00b6 Use sentence case for document titles and section headings. Use numbered lists for sequences. Use bulleted lists for most other lists. Use description lists for pairs of related pieces of data. Use serial commas . Put code-related text in code font . Put UI elements in bold . Use unambiguous date formatting .","title":"Developer documentation style guide"},{"location":"developer-documentation-style-guide/#goals","text":"The guide can help you avoid making decisions about the same issue over and over, can provide editorial assistance on structuring and writing your documentation, and can help you keep your documentation consistent with our other documentation.","title":"Goals"},{"location":"developer-documentation-style-guide/#non-goals","text":"This guide isn't intended to provide an industry documentation standard, nor to compete with other well-known style guides. It's a description of our house style, not a statement that our decisions are objectively correct. This guide is a living document; it changes over time, and when it changes, we generally don't change previously published documentation to match. We strive for consistency to the extent feasible, but at any given time there are certain to be parts of our documentation that don't match this style guide. When in doubt, follow this guide rather than imitating existing documents.","title":"Non-goals"},{"location":"developer-documentation-style-guide/#breaking-the-rules","text":"In most contexts, Nebula has no ability nor desire to enforce these guidelines if they're not appropriate to the context. But we hope that you'll join us in striving for high-quality documentation. Like most style guides, our style guide aims to improve our documentation, especially by improving consistency; therefore, there may be contexts where it makes sense to diverge from our guidelines in order to make your documentation better.","title":"Breaking the \"rules\""},{"location":"developer-documentation-style-guide/#style-and-authorial-tone","text":"Aim, in your documents, for a voice and tone that's conversational, friendly, and respectful without being overly colloquial or frivolous; a voice that's casual and natural and approachable, not pedantic or pushy. Try to sound like a knowledgeable friend who understands what the developer wants to do. Don't try to write exactly the way you speak; you probably speak more colloquially and verbosely than you should write, at least for developer documentation. But aim for a conversational tone rather than a formal one.","title":"Style and authorial tone"},{"location":"developer-documentation-style-guide/#some-techniques-and-approaches-to-consider","text":"If you're having trouble expressing something, step back and ask yourself, \"What am I trying to say?\" Often, the answer you give yourself reveals what you should be saying in the document. If you're uncertain about your phrasing or tone, ask a colleague to take a look. Try reading parts of your document out loud, or at least mouthing the words. Does it sound natural? Not every sentence has to sound natural when spoken; these are written documents. But if you come across a sentence that's awkward or confusing when spoken, consider whether you can make it more conversational. Use transitions between sentences. Phrases like \"Though\" or \"This way\" can make paragraphs less stilted. (Then again, sometimes transitions like \"However\" or \"Nonetheless\" can make paragraphs more stilted.) Even if you're having trouble hitting the right tone, make sure you're communicating useful information in a clear and direct way; that's the most important part.","title":"Some techniques and approaches to consider"},{"location":"developer-documentation-style-guide/#tense","text":"In general, use present tense rather than future tense; in particular, try to avoid using will where possible. The fact that the reader will be writing and running code in the future isn't a good reason to use future tense. Stick with present tense where. Also avoid the hypothetical future would .","title":"Tense"},{"location":"developer-documentation-style-guide/#links","text":"When you're writing link text, use a phrase that describes what the reader will see after following the link. That can take either of two forms: - The exact title of the linked-to page, capitalized the same way the title is capitalized. - A description of the linked-to page, capitalized like ordinary text instead of like a title. A couple of specific things to not do in link text: - Don't use the phrase \"click here.\" (It's bad for accessibility and bad for scannability.) - Similarly, don't use phrases like \"this document.\" (It's easy to read \"this\" as meaning \"the one you're reading now\" rather than \"the one I'm pointing to.\") - Don't use a URL as link text. Instead, use the page title or a description of the page.","title":"Links"},{"location":"developer-documentation-style-guide/#punctuation-with-links","text":"If you have punctuation immediately before or after a link, put the punctuation outside of the link tags where possible. In particular, put quotation marks outside of link tags.","title":"Punctuation with links"},{"location":"developer-documentation-style-guide/#accessible-content","text":"","title":"Accessible content"},{"location":"developer-documentation-style-guide/#general-dos-and-donts","text":"Ensure that readers can reach all parts of the document (including tabs, form-submission buttons, and interactive elements) using only a keyboard, without a mouse or trackpad. Don't use color, size, location, or other visual cues as the primary way of communicating information. If you're using color, icon, or outline thickness to convey state, then also provide a secondary cue, such as a change in the text label. Refer to buttons and other elements by their label (or aria-label , if they\u2019re visual elements), not by location or shape. Avoid unnecessary font formatting. (Screen readers explicitly describe text modifications.) If you're documenting a product that includes specialized accessibility features, then explicitly document those features. For example, the gcloud command-line tool includes togglable accessibility features such as percentage progress bars and ASCII box rendering.","title":"General dos and don'ts"},{"location":"developer-documentation-style-guide/#images","text":"For every image, provide alt text that adequately summarizes the intent of each image. Don't present new information in images; always provide an equivalent text explanation with the image. Use SVG files or crushed PNG images. Provide high-resolution images when practical.","title":"Images"},{"location":"developer-documentation-style-guide/#tables","text":"If your tables include both row and column headings, then mark heading cells with the scope attribute. If your tables have more than one row containing column headings, then use the headers attribute.","title":"Tables"},{"location":"developer-documentation-style-guide/#forms","text":"Label every input field, using a <label> element. Place labels outside of fields. When you're creating an error message for form validation, clearly state what went wrong and how to fix it. For example: \"Name is a required field.\"","title":"Forms"},{"location":"developer-documentation-style-guide/#videos","text":"Provide captions. Ensure that captions can be translated into major languages.","title":"Videos"},{"location":"developer-documentation-style-guide/#language-and-grammar","text":"Use second person: \"you\" rather than \"we.\" Use active voice; make clear who's performing the action. Use standard American spelling and punctuation. Put conditional clauses before instructions, not after. For usage and spelling of specific words, see the word list.","title":"Language and grammar"},{"location":"developer-documentation-style-guide/#formatting-punctuation-and-organization","text":"Use sentence case for document titles and section headings. Use numbered lists for sequences. Use bulleted lists for most other lists. Use description lists for pairs of related pieces of data. Use serial commas . Put code-related text in code font . Put UI elements in bold . Use unambiguous date formatting .","title":"Formatting, punctuation, and organization"},{"location":"get-started/","text":"This tutorial provides a quick introduction to use Nebula Graph . Install Nebula Graph \u00b6 From Docker \u00b6 The easiest way to startup nebula is using docker . First of all, you should make sure that docker has been installed on your machine. Open a terminal and run the following command : > docker --version Docker version 18.09.2, build 6247962 If docker is not found, please see here for more information to install docker. After that, using > docker pull vesoft/nebula-graph:latest ac9208207ada: Pulling fs layer cdcb67189ff7: Pulling fs layer 80407c3cb6b4: Pulling fs layer latest: Pulling from vesoft/nebula-graph ac9208207ada: Pull complete cdcb67189ff7: Pull complete 80407c3cb6b4: Pull complete Digest: sha256:72a73c801685595776779291969b57ab758f53ebd9bda8bab56421e50bfee161 Status: Downloaded newer image for vesoft/nebula-graph:latest to get nebula docker images. Then type command docker images to check the image status. > docker images REPOSITORY TAG IMAGE ID CREATED SIZE vesoft/nebula-graph latest 1afd60e223ca 4 weeks ago 401MB Startup Nebula Graph When nebula image is ready, run > docker run -it vesoft/nebula-graph:latest /bin/bash to start and login to the docker container. After login, you're in the root directory and you should use cd ~/nebula-graph/ to switch to the nebula home directory. Run > ./start-all.sh Starting MetaService StorageService and GraphService ... to start meta service, storage service and graph service. Run > ps -ef | grep nebula to display the services' running status. Please make sure the services are working. To connect to the graph server, run > ./start-console.sh Welcome to Nebula Graph (Version 0.1) nebula> If you have any questions or concerns about the deployment procedures, please do not hesitate to open an issue on GitHub . From Source(Linux) \u00b6 Prerequisite Tools Nebula Graph is written in C++14, so it requires a complier supporting C++14 features. 3rd-party Libraries autoconf automake libtool cmake bison unzip boost gperf krb5 openssl libunwind ncurses readline It is recommended to install g++ 5 or higher Linux system, such as Fedora 29. Currently, we are using git-lfs to store the 3rd-party libraries so make sure git-lfs have been installed before fetching the source code. Fetch from GitHub > git clone https://github.com/vesoft-inc/nebula.git Compiling > cmake ./ The default installation is in /usr/local path. To specify the installation path, use: > cmake -DCMAKE_INSTALL_PREFIX=$your_nebula_install_dir to replace the $your_nebula_install_dir here Then run the following command: > make && make install Running Configure nebula-metad.conf In your Nebula installation directory, run > cp etc/nebula-metad.conf.default etc/nebula-metad.conf Modify configurations in nebula-metad.conf: local_ip port ws_http_port metaservice HTTP ws_h2_port metaservice HTTP2 Configure nebula-storaged.conf > cp etc/nebula-storaged.conf.default etc/nebula-storaged.conf Modify configurations in nebula-storaged.conf: local_ip port ws_http_port storageservice HTTP ws_h2_port storageservice HTTP2 Configure nebula-graphd.conf > cp etc/nebula-graphd.conf.default etc/nebula-graphd.conf Modify configurations in nebula-graphd.conf: local_ip port ws_http_port graphservice HTTP ws_h2_port graphservice HTTP2 Start service > scripts/nebula.service start all Make sure all the services are working > scripts/nebula.service status all Connect to Nebula > bin/nebula -u=user -p=password -u is to set user name, user is the default Nebula user account -p is to set password, password is the default password for account user Add HOSTS to register the storage hosts: > ADD HOSTS $storage_ip:$storage_port Replace the $storage_ip and $storage_port here according to the local_ip and port in nebula-storaged.conf Then you\u2019re now ready to start using Nebula Graph. Build Your Own Graph \u00b6 This section describes how to build a graph and run queries. The example is built on the graph below: There are three kinds of tags ( course , building and student ) and two edge types ( select and like ). The graph schema is: { \"tags\" :{ \"course\" :[ \"name: string\" , \"credits: integer\" ], \"building\" :[ \"name: string\" ], \"student\" :[ \"name: string\" , \"age: integer\" , \"gender: string\" ] }, \"edges\" :{ \"select\" :[ \"grade: integer\" ], \"like\" :[ \"likeness: double\" ] } } Create a Graph Space \u00b6 SPACE is a region that provides physically isolation of graphs in Nebula. First we need to create a space and use it before other operations. To list all existing spaces: nebula> SHOW SPACES; To create a new space named myspace_test2 : nebula> CREATE SPACE myspace_test2(partition_num=1, replica_factor=1); -- Use this space nebula> USE myspace_test2; replica_factor specifies the number of replicas in the cluster. partition_num specifies the number of partitions in one replica. Define Graph Schema \u00b6 The CREATE TAG statement defines a tag, with a type name and an attribute list. nebula> CREATE TAG course(name string, credits int); nebula> CREATE TAG building(name string); nebula> CREATE TAG student(name string, age int, gender string); The CREATE EDGE statement defines an edge type. nebula> CREATE EDGE like(likeness double); nebula> CREATE EDGE select(grade int); To list the tags and edge types that we just created\uff1a -- Show tag list nebula> SHOW TAGS; -- Show edge type list nebula> SHOW EDGES; To show the attributes of a tag or an edge type: -- Show attributes of a tag nebula> DESCRIBE TAG student; -- Show attributes of an edge type nebula> DESCRIBE EDGE like; Insert Data \u00b6 Insert the vertices and edges based on the graph above. -- Insert vertices nebula> INSERT VERTEX student(name, age, gender) VALUES 200:(\"Monica\", 16, \"female\"); nebula> INSERT VERTEX student(name, age, gender) VALUES 201:(\"Mike\", 18, \"male\"); nebula> INSERT VERTEX student(name, age, gender) VALUES 202:(\"Jane\", 17, \"female\"); nebula> INSERT VERTEX course(name, credits),building(name) VALUES 101:(\"Math\", 3, \"No5\"); nebula> INSERT VERTEX course(name, credits),building(name) VALUES 102:(\"English\", 6, \"No11\"); -- Insert edges nebula> INSERT EDGE select(grade) VALUES 200 -> 101:(5); nebula> INSERT EDGE select(grade) VALUES 200 -> 102:(3); nebula> INSERT EDGE select(grade) VALUES 201 -> 102:(3); nebula> INSERT EDGE select(grade) VALUES 202 -> 102:(3); nebula> INSERT EDGE like(likeness) VALUES 200 -> 201:(92.5); nebula> INSERT EDGE like(likeness) VALUES 201 -> 200:(85.6); nebula> INSERT EDGE like(likeness) VALUES 201 -> 202:(93.2); Sample Queries \u00b6 Q1. Find the vertexes that 201 likes: nebula> GO FROM 201 OVER like; ======= | id | ======= | 200 | ------- | 202 | ------- Q2. Find the vertexes that 201 likes, whose age are greater than 17. Return their name, age and gender, and alias the columns as Friend, Age and Gender, respectively. nebula> GO FROM 201 OVER like WHERE $$.student.age >= 17 YIELD $$.student.name AS Friend, $$.student.age AS Age, $$.student.gender AS Gender; ========================= | Friend | Age | Gender | ========================= | Jane | 17 | female | ------------------------- YIELD specifies what values or results you might want to return from query. $^ represents the source vertex. $$ indicates the target vertex. Q3. Find the selected courses and corresponding grades of students liked by 201. -- By pipe nebula> GO FROM 201 OVER like | GO FROM $-.id OVER select YIELD $^.student.name AS Student, $$.course.name AS Course, select.grade AS Grade; ============================= | Student | Course | Grade | ============================= | Monica | Math | 5 | ----------------------------- | Monica | English | 3 | ----------------------------- | Jane | English | 3 | ----------------------------- -- By temporary variable nebula> $a=GO FROM 201 OVER like; GO FROM $a.id OVER select YIELD $^.student.name AS Student, $$.course.name AS Course, select.grade AS Grade; ============================= | Student | Course | Grade | ============================= | Monica | Math | 5 | ----------------------------- | Monica | English | 3 | ----------------------------- | Jane | English | 3 | ----------------------------- | denotes a pipe. The output of the formal query acts as input to the next one like a pipeline. $- refers to the input stream. The second approach adopts a user-defined variable $a . The scope of this variable is within the compound statement. For more details about Query Language, check nGQL Query Language .","title":"Get started"},{"location":"get-started/#install-nebula-graph","text":"","title":"Install Nebula Graph"},{"location":"get-started/#from-docker","text":"The easiest way to startup nebula is using docker . First of all, you should make sure that docker has been installed on your machine. Open a terminal and run the following command : > docker --version Docker version 18.09.2, build 6247962 If docker is not found, please see here for more information to install docker. After that, using > docker pull vesoft/nebula-graph:latest ac9208207ada: Pulling fs layer cdcb67189ff7: Pulling fs layer 80407c3cb6b4: Pulling fs layer latest: Pulling from vesoft/nebula-graph ac9208207ada: Pull complete cdcb67189ff7: Pull complete 80407c3cb6b4: Pull complete Digest: sha256:72a73c801685595776779291969b57ab758f53ebd9bda8bab56421e50bfee161 Status: Downloaded newer image for vesoft/nebula-graph:latest to get nebula docker images. Then type command docker images to check the image status. > docker images REPOSITORY TAG IMAGE ID CREATED SIZE vesoft/nebula-graph latest 1afd60e223ca 4 weeks ago 401MB Startup Nebula Graph When nebula image is ready, run > docker run -it vesoft/nebula-graph:latest /bin/bash to start and login to the docker container. After login, you're in the root directory and you should use cd ~/nebula-graph/ to switch to the nebula home directory. Run > ./start-all.sh Starting MetaService StorageService and GraphService ... to start meta service, storage service and graph service. Run > ps -ef | grep nebula to display the services' running status. Please make sure the services are working. To connect to the graph server, run > ./start-console.sh Welcome to Nebula Graph (Version 0.1) nebula> If you have any questions or concerns about the deployment procedures, please do not hesitate to open an issue on GitHub .","title":"From Docker"},{"location":"get-started/#from-sourcelinux","text":"Prerequisite Tools Nebula Graph is written in C++14, so it requires a complier supporting C++14 features. 3rd-party Libraries autoconf automake libtool cmake bison unzip boost gperf krb5 openssl libunwind ncurses readline It is recommended to install g++ 5 or higher Linux system, such as Fedora 29. Currently, we are using git-lfs to store the 3rd-party libraries so make sure git-lfs have been installed before fetching the source code. Fetch from GitHub > git clone https://github.com/vesoft-inc/nebula.git Compiling > cmake ./ The default installation is in /usr/local path. To specify the installation path, use: > cmake -DCMAKE_INSTALL_PREFIX=$your_nebula_install_dir to replace the $your_nebula_install_dir here Then run the following command: > make && make install Running Configure nebula-metad.conf In your Nebula installation directory, run > cp etc/nebula-metad.conf.default etc/nebula-metad.conf Modify configurations in nebula-metad.conf: local_ip port ws_http_port metaservice HTTP ws_h2_port metaservice HTTP2 Configure nebula-storaged.conf > cp etc/nebula-storaged.conf.default etc/nebula-storaged.conf Modify configurations in nebula-storaged.conf: local_ip port ws_http_port storageservice HTTP ws_h2_port storageservice HTTP2 Configure nebula-graphd.conf > cp etc/nebula-graphd.conf.default etc/nebula-graphd.conf Modify configurations in nebula-graphd.conf: local_ip port ws_http_port graphservice HTTP ws_h2_port graphservice HTTP2 Start service > scripts/nebula.service start all Make sure all the services are working > scripts/nebula.service status all Connect to Nebula > bin/nebula -u=user -p=password -u is to set user name, user is the default Nebula user account -p is to set password, password is the default password for account user Add HOSTS to register the storage hosts: > ADD HOSTS $storage_ip:$storage_port Replace the $storage_ip and $storage_port here according to the local_ip and port in nebula-storaged.conf Then you\u2019re now ready to start using Nebula Graph.","title":"From Source(Linux)"},{"location":"get-started/#build-your-own-graph","text":"This section describes how to build a graph and run queries. The example is built on the graph below: There are three kinds of tags ( course , building and student ) and two edge types ( select and like ). The graph schema is: { \"tags\" :{ \"course\" :[ \"name: string\" , \"credits: integer\" ], \"building\" :[ \"name: string\" ], \"student\" :[ \"name: string\" , \"age: integer\" , \"gender: string\" ] }, \"edges\" :{ \"select\" :[ \"grade: integer\" ], \"like\" :[ \"likeness: double\" ] } }","title":"Build Your Own Graph"},{"location":"get-started/#create-a-graph-space","text":"SPACE is a region that provides physically isolation of graphs in Nebula. First we need to create a space and use it before other operations. To list all existing spaces: nebula> SHOW SPACES; To create a new space named myspace_test2 : nebula> CREATE SPACE myspace_test2(partition_num=1, replica_factor=1); -- Use this space nebula> USE myspace_test2; replica_factor specifies the number of replicas in the cluster. partition_num specifies the number of partitions in one replica.","title":"Create a Graph Space"},{"location":"get-started/#define-graph-schema","text":"The CREATE TAG statement defines a tag, with a type name and an attribute list. nebula> CREATE TAG course(name string, credits int); nebula> CREATE TAG building(name string); nebula> CREATE TAG student(name string, age int, gender string); The CREATE EDGE statement defines an edge type. nebula> CREATE EDGE like(likeness double); nebula> CREATE EDGE select(grade int); To list the tags and edge types that we just created\uff1a -- Show tag list nebula> SHOW TAGS; -- Show edge type list nebula> SHOW EDGES; To show the attributes of a tag or an edge type: -- Show attributes of a tag nebula> DESCRIBE TAG student; -- Show attributes of an edge type nebula> DESCRIBE EDGE like;","title":"Define Graph Schema"},{"location":"get-started/#insert-data","text":"Insert the vertices and edges based on the graph above. -- Insert vertices nebula> INSERT VERTEX student(name, age, gender) VALUES 200:(\"Monica\", 16, \"female\"); nebula> INSERT VERTEX student(name, age, gender) VALUES 201:(\"Mike\", 18, \"male\"); nebula> INSERT VERTEX student(name, age, gender) VALUES 202:(\"Jane\", 17, \"female\"); nebula> INSERT VERTEX course(name, credits),building(name) VALUES 101:(\"Math\", 3, \"No5\"); nebula> INSERT VERTEX course(name, credits),building(name) VALUES 102:(\"English\", 6, \"No11\"); -- Insert edges nebula> INSERT EDGE select(grade) VALUES 200 -> 101:(5); nebula> INSERT EDGE select(grade) VALUES 200 -> 102:(3); nebula> INSERT EDGE select(grade) VALUES 201 -> 102:(3); nebula> INSERT EDGE select(grade) VALUES 202 -> 102:(3); nebula> INSERT EDGE like(likeness) VALUES 200 -> 201:(92.5); nebula> INSERT EDGE like(likeness) VALUES 201 -> 200:(85.6); nebula> INSERT EDGE like(likeness) VALUES 201 -> 202:(93.2);","title":"Insert Data"},{"location":"get-started/#sample-queries","text":"Q1. Find the vertexes that 201 likes: nebula> GO FROM 201 OVER like; ======= | id | ======= | 200 | ------- | 202 | ------- Q2. Find the vertexes that 201 likes, whose age are greater than 17. Return their name, age and gender, and alias the columns as Friend, Age and Gender, respectively. nebula> GO FROM 201 OVER like WHERE $$.student.age >= 17 YIELD $$.student.name AS Friend, $$.student.age AS Age, $$.student.gender AS Gender; ========================= | Friend | Age | Gender | ========================= | Jane | 17 | female | ------------------------- YIELD specifies what values or results you might want to return from query. $^ represents the source vertex. $$ indicates the target vertex. Q3. Find the selected courses and corresponding grades of students liked by 201. -- By pipe nebula> GO FROM 201 OVER like | GO FROM $-.id OVER select YIELD $^.student.name AS Student, $$.course.name AS Course, select.grade AS Grade; ============================= | Student | Course | Grade | ============================= | Monica | Math | 5 | ----------------------------- | Monica | English | 3 | ----------------------------- | Jane | English | 3 | ----------------------------- -- By temporary variable nebula> $a=GO FROM 201 OVER like; GO FROM $a.id OVER select YIELD $^.student.name AS Student, $$.course.name AS Course, select.grade AS Grade; ============================= | Student | Course | Grade | ============================= | Monica | Math | 5 | ----------------------------- | Monica | English | 3 | ----------------------------- | Jane | English | 3 | ----------------------------- | denotes a pipe. The output of the formal query acts as input to the next one like a pipeline. $- refers to the input stream. The second approach adopts a user-defined variable $a . The scope of this variable is within the compound statement. For more details about Query Language, check nGQL Query Language .","title":"Sample Queries"},{"location":"how-to-build/","text":"General \u00b6 Compiler \u00b6 The project Nebula is developed using C++14, so it requires a compiler supporting C++14 features. 3rd-party Libraries \u00b6 The project itself includes the source code of several 3rd-party libraries, which usually does not exist in the OS's public application repositories. In addition to the included libraries, Nebula requires these 3rd-party utilities and libraries to be installed on the system autoconf automake libtool cmake bison unzip boost gperf krb5 openssl libunwind ncurses readline bzip2 doubleconversion fatal fbthrift folly gflags glog googletest jemalloc libevent mstch proxygen rocksdb snappy wangle zlib zstd How to get 3rd-party Libraries \u00b6 Install guide How to build \u00b6 create build dir : cd nebula && mkdir build && cd build generate makefile : cmake -DNEBULA_THIRDPARTY_ROOT=${3rd-party_install_root} .. make : make or make -j${threadnum} install: make install notes : the default installation dir is /usr/local/ , if you want to change the dir, on step 2, your command can be cmake -DCMAKE_INSTALL_PREFIX=$your_nebula_install_dir ..","title":"How to build"},{"location":"how-to-build/#general","text":"","title":"General"},{"location":"how-to-build/#compiler","text":"The project Nebula is developed using C++14, so it requires a compiler supporting C++14 features.","title":"Compiler"},{"location":"how-to-build/#3rd-party-libraries","text":"The project itself includes the source code of several 3rd-party libraries, which usually does not exist in the OS's public application repositories. In addition to the included libraries, Nebula requires these 3rd-party utilities and libraries to be installed on the system autoconf automake libtool cmake bison unzip boost gperf krb5 openssl libunwind ncurses readline bzip2 doubleconversion fatal fbthrift folly gflags glog googletest jemalloc libevent mstch proxygen rocksdb snappy wangle zlib zstd","title":"3rd-party Libraries"},{"location":"how-to-build/#how-to-get-3rd-party-libraries","text":"Install guide","title":"How to get 3rd-party Libraries"},{"location":"how-to-build/#how-to-build","text":"create build dir : cd nebula && mkdir build && cd build generate makefile : cmake -DNEBULA_THIRDPARTY_ROOT=${3rd-party_install_root} .. make : make or make -j${threadnum} install: make install notes : the default installation dir is /usr/local/ , if you want to change the dir, on step 2, your command can be cmake -DCMAKE_INSTALL_PREFIX=$your_nebula_install_dir ..","title":"How to build"},{"location":"how-to-contribute/","text":"Step 1: Fork in the cloud \u00b6 Visit https://github.com/vesoft-inc/nebula Click Fork button (top right) to establish a cloud-based fork. Step 2: Clone fork to local storage \u00b6 Define a local working directory: # Define your working directory working_dir = $HOME /Workspace Set user to match your github profile name: user ={ your github profile name } Create your clone: mkdir -p $working_dir cd $working_dir git clone https://github.com/ $user /nebula.git # the following is recommended # or: git clone git@github.com:$user/nebula.git cd $working_dir /nebula git remote add upstream https://github.com/vesoft-inc/nebula.git # or: git remote add upstream git@github.com:vesoft-inc/nebula.git # Never push to upstream master since you do not have write access. git remote set-url --push upstream no_push # Confirm that your remotes make sense: # It should look like: # origin git@github.com:$(user)/nebula.git (fetch) # origin git@github.com:$(user)/nebula.git (push) # upstream https://github.com/vesoft-inc/nebula (fetch) # upstream no_push (push) git remote -v Define a pre-commit hook \u00b6 Please link the Nebula Graph pre-commit hook into your .git directory. This hook checks your commits for formatting, building, doc generation, etc. cd $working_dir /nebula/.git/hooks ln -s ../../cpplint/bin/pre-commit.sh . Sometimes, pre-commit hook can not be executable. In such case, you have to make it executable manually. cd $working_dir /nebula/.git/hooks chmod +x pre-commit Step 3: Branch \u00b6 Get your local master up to date: cd $working_dir /nebula git fetch upstream git checkout master git rebase upstream/master Branch from master: git checkout -b myfeature NOTE : Because your PR often consists of several commits, which might be squashed while being merged into upstream, we strongly suggest you open a separate topic branch to make your changes on. After merged, this topic branch could be just abandoned, thus you could synchronize your master branch with upstream easily with a rebase like above. Otherwise, if you commit your changes directly into master, maybe you must use a hard reset on the master branch, like: git fetch upstream git checkout master git reset --hard upstream/master git push --force origin master Step 4: Develop \u00b6 Edit the code \u00b6 You can now edit the code on the myfeature branch. Please follow the coding style guidance here . Run stand-alone mode \u00b6 If you want to reproduce and investigate an issue, you may need to run Nebula Graph in stand-alone mode. # Build the binary. make server # Run in stand-alone mode. nebula-graphd Then you can connect the Nebula Graph console to your local server nebula Run Test \u00b6 # Run unit test to make sure all test passed. Step 5: Keep your branch in sync \u00b6 # While on your myfeature branch. git fetch upstream git rebase upstream/master Step 6: Commit \u00b6 Commit your changes. git commit Likely you'll go back and edit/build/test some more than commit --amend in a few cycles. Step 7: Push \u00b6 When ready to review (or just to establish an offsite backup or your work), push your branch to your fork on github.com : git push -f origin myfeature Step 8: Create a pull request \u00b6 Visit your fork at https://github.com/$user/nebula (replace $user obviously). Click the Compare & pull request button next to your myfeature branch. Step 9: Get a code review \u00b6 Once your pull request has been opened, it will be assigned to at least one reviewers. Those reviewers will do a thorough code review, looking for correctness, bugs, opportunities for improvement, documentation and comments, and style. Commit changes made in response to review comments to the same branch on your fork. Very small PRs are easy to review. Very large PRs are very difficult to review.","title":"How to contribute"},{"location":"how-to-contribute/#step-1-fork-in-the-cloud","text":"Visit https://github.com/vesoft-inc/nebula Click Fork button (top right) to establish a cloud-based fork.","title":"Step 1: Fork in the cloud"},{"location":"how-to-contribute/#step-2-clone-fork-to-local-storage","text":"Define a local working directory: # Define your working directory working_dir = $HOME /Workspace Set user to match your github profile name: user ={ your github profile name } Create your clone: mkdir -p $working_dir cd $working_dir git clone https://github.com/ $user /nebula.git # the following is recommended # or: git clone git@github.com:$user/nebula.git cd $working_dir /nebula git remote add upstream https://github.com/vesoft-inc/nebula.git # or: git remote add upstream git@github.com:vesoft-inc/nebula.git # Never push to upstream master since you do not have write access. git remote set-url --push upstream no_push # Confirm that your remotes make sense: # It should look like: # origin git@github.com:$(user)/nebula.git (fetch) # origin git@github.com:$(user)/nebula.git (push) # upstream https://github.com/vesoft-inc/nebula (fetch) # upstream no_push (push) git remote -v","title":"Step 2: Clone fork to local storage"},{"location":"how-to-contribute/#define-a-pre-commit-hook","text":"Please link the Nebula Graph pre-commit hook into your .git directory. This hook checks your commits for formatting, building, doc generation, etc. cd $working_dir /nebula/.git/hooks ln -s ../../cpplint/bin/pre-commit.sh . Sometimes, pre-commit hook can not be executable. In such case, you have to make it executable manually. cd $working_dir /nebula/.git/hooks chmod +x pre-commit","title":"Define a pre-commit hook"},{"location":"how-to-contribute/#step-3-branch","text":"Get your local master up to date: cd $working_dir /nebula git fetch upstream git checkout master git rebase upstream/master Branch from master: git checkout -b myfeature NOTE : Because your PR often consists of several commits, which might be squashed while being merged into upstream, we strongly suggest you open a separate topic branch to make your changes on. After merged, this topic branch could be just abandoned, thus you could synchronize your master branch with upstream easily with a rebase like above. Otherwise, if you commit your changes directly into master, maybe you must use a hard reset on the master branch, like: git fetch upstream git checkout master git reset --hard upstream/master git push --force origin master","title":"Step 3: Branch"},{"location":"how-to-contribute/#step-4-develop","text":"","title":"Step 4: Develop"},{"location":"how-to-contribute/#edit-the-code","text":"You can now edit the code on the myfeature branch. Please follow the coding style guidance here .","title":"Edit the code"},{"location":"how-to-contribute/#run-stand-alone-mode","text":"If you want to reproduce and investigate an issue, you may need to run Nebula Graph in stand-alone mode. # Build the binary. make server # Run in stand-alone mode. nebula-graphd Then you can connect the Nebula Graph console to your local server nebula","title":"Run stand-alone mode"},{"location":"how-to-contribute/#run-test","text":"# Run unit test to make sure all test passed.","title":"Run Test"},{"location":"how-to-contribute/#step-5-keep-your-branch-in-sync","text":"# While on your myfeature branch. git fetch upstream git rebase upstream/master","title":"Step 5: Keep your branch in sync"},{"location":"how-to-contribute/#step-6-commit","text":"Commit your changes. git commit Likely you'll go back and edit/build/test some more than commit --amend in a few cycles.","title":"Step 6: Commit"},{"location":"how-to-contribute/#step-7-push","text":"When ready to review (or just to establish an offsite backup or your work), push your branch to your fork on github.com : git push -f origin myfeature","title":"Step 7: Push"},{"location":"how-to-contribute/#step-8-create-a-pull-request","text":"Visit your fork at https://github.com/$user/nebula (replace $user obviously). Click the Compare & pull request button next to your myfeature branch.","title":"Step 8: Create a pull request"},{"location":"how-to-contribute/#step-9-get-a-code-review","text":"Once your pull request has been opened, it will be assigned to at least one reviewers. Those reviewers will do a thorough code review, looking for correctness, bugs, opportunities for improvement, documentation and comments, and style. Commit changes made in response to review comments to the same branch on your fork. Very small PRs are easy to review. Very large PRs are very difficult to review.","title":"Step 9: Get a code review"},{"location":"nGQL-tutorial/","text":"nGQL Query Language \u00b6 nGQL is the query language of Nebula Graph that allows users to store and retrieve data from the graph database. Nebula Graph wants to make its queries easy to learn, understand, and use for everyone. Key attributes of nGQL \u00b6 Nebula Graph is committed to create a new query language that specifically deals with graph data. nGQL has two attributes that are not available together in any other query language out there. Declarative: nGQL is a declarative query language, which is very different from the imperative alternatives out there. You declare the pattern that you are looking for. You effectively tell nGQL what you want, rather than how to get it. Expressive: nGQL's ASCII-art style syntax provides a familiar, readable way to match patterns of nodes and relationships within graph datasets. nGQL Syntax \u00b6 nGQL key words are case-insensitive but we recommend them written in all caps for easy reading. To help you get a quick understanding of nGQL, we have created a simple graph myspace_test with 4 vertices and 3 edges. Cluster administration \u00b6 Add hosts Add a single host ADD HOSTS $storage_ip:$storage_port Add multiple hosts ADD HOSTS $storage_ip1:$storage_port1, $storage_ip2:$storage_port2,... Note: Replace the $storage_ip and $storage_port here according to the local_ip and port in nebula-storaged.conf. Separate the hosts by comma. For example: ADD HOSTS 192.168.8.5:65500 Show hosts SHOW HOSTS ================================= | Ip | Port | Status | ================================= | 192.168.8.5 | 65500 | online | --------------------------------- | 192.168.8.1 | 65500 | offline | --------------------------------- Remove hosts Remove a single host REMOVE HOSTS $storage_ip:$storage_port Remove multiple hosts REMOVE HOSTS $storage_ip1:$storage_port1, $storage_ip2:$storage_port2,... Note: Separate the hosts by comma. Graph administration \u00b6 Graph spaces are physically isolated like the database in MySQL. CREATE DROP USE DESCRIBE SHOW SHOW CREATE SPACE \u221a \u221a \u221a v0.2 \u221a v0.2 Create space with CREATE, drop space with DROP, choose which space to use with USE, list available spaces with SHOW. DESCRIBE will be released in v0.2. Following are some examples: List all the spaces available SHOW SPACES ================ | Name | ================ | myspace_test | ---------------- SHOW CREATE SPACES myspace_test ==================================================================================== | Space | Create Space | ==================================================================================== | myspace_test | CREATE SPACE myspace_test (partition_num = 1, replica_factor = 1) | ------------------------------------------------------------------------------------ Drop a space DROP SPACE myspace_test Note: DROP SPACE deletes all data in the current version and recovery is not supported yet. Create a space CREATE SPACE myspace_test(partition_num=10, replica_factor=1) Note: partition_num is used to control the number of shardings and replica_factor to control the number of raft copies, which is set to 1 when in stand-alone version. Specify space USE myspace_test Schema mutation \u00b6 Schema is used to manage the properties of vertices and edges (name and type of each field). In Nebula, a vertex can be labeled by multiple tags. CREATE DROP ALTER DESCRIBE SHOW TTL LOAD DUMP SHOW CREATE TAG \u221a v0.2 v0.2 \u221a \u221a v0.3 v0.2 v0.3 v0.2 EDGE \u221a v0.2 v0.2 \u221a \u221a v0.3 v0.2 v0.3 v0.2 You can use CREATE, DROP, ALTER, DESCRIBE, SHOW CREATE to create, drop, alter, view a schema. Following are some examples: CREATE TAG player(name string, age int); DESCRIBE TAG player; ================== | Field | Type | ================== | name | string | ------------------ | age | int | ------------------ SHOW CREATE TAG player; ========================================================================================== | Tag | Create Tag | ========================================================================================== | player | CREATE TAG player ( name string, age int ) ttl_duration = 0, ttl_col = \"\" | ------------------------------------------------------------------------------------------ CREATE TAG team(name string); DESCRIBE TAG team; CREATE EDGE serve (start_year int, end_year int); DESCRIBE EDGE serve; ===================== | Field | Type | ===================== | start_year | int | --------------------- | end_year | int | --------------------- SHOW CREATE EDGE serve; ================================================================================================= | Edge | Create Edge | ================================================================================================= | serve | CREATE EDGE serve ( start_year int, end_year int ) ttl_duration = 0, ttl_col = \"\" | ------------------------------------------------------------------------------------------------- CREATE EDGE like (likeness double); SHOW TAGS; SHOW EDGES Data manipulation \u00b6 INSERT is used to insert new vertices and edges, UPDATE AND REMOVE will be available in v0.2. INSERT UPDATE REMOVE TAG \u221a v0.2 v0.2 EDGE \u221a v0.2 v0.2 When inserting a vertex, its tag type and attribute fields should be specified, while its ID can either be auto-generated by hash or specified manually. Following are some examples: INSERT VERTEX player(name, age) VALUES 100:(\"Stoudemire\", 36); -- specify ID manually INSERT VERTEX player(name, age) VALUES hash(\"Jummy\"):(\"Jummy\", 0); -- ID generated by hash INSERT VERTEX player(name, age) VALUES 101:(\"Vicenta\", 0); INSERT VERTEX team(name) VALUES 201:(\"Magic\"); INSERT EDGE like (likeness) VALUES 100 -> 101:(90.02); INSERT EDGE like (likeness) VALUES 101 -> 102:(10.00); INSERT EDGE serve (start_year, end_year) VALUES 101 -> 201:(2002, 2010); Graph query \u00b6 The most commonly used graph query/traversal operator is GO, it means starting from a certain point and querying its 1 degree neighbor. Complex queries can be done by combining pipe | , filtering WHERE , YIELD , etc. Following are some examples: GO FROM 100 OVER like; -- Start from vertex 100, query 1-hop along edge like. GO 2 STEPS FROM 100 OVER like; -- Start from vertex 100, query 2-hop along edge GO FROM 100 OVER like WHERE likeness >= 0; -- Start from vertex 100, query along edge like and filter its property likeness GO FROM 100 OVER like WHERE $$.player.name==\"Vicenta\"; -- Filter requirement: the destination vertex name is \"Vicenta\" GO FROM 101 OVER serve YIELD serve._src AS src_id, $^.player.age AS src_propAge, serve._dst AS dst_id, $$.team.name AS dst_propName; -- Return the starting vertex id(renamed as srcid), source vertex property age, destination vertex id and its name GO FROM 100 OVER like | GO FROM $-.id OVER serve; -- Start from vertex 100, query 1-hop, set its output as the next query's input by using pipe","title":"nGQL Query Language"},{"location":"nGQL-tutorial/#ngql-query-language","text":"nGQL is the query language of Nebula Graph that allows users to store and retrieve data from the graph database. Nebula Graph wants to make its queries easy to learn, understand, and use for everyone.","title":"nGQL Query Language"},{"location":"nGQL-tutorial/#key-attributes-of-ngql","text":"Nebula Graph is committed to create a new query language that specifically deals with graph data. nGQL has two attributes that are not available together in any other query language out there. Declarative: nGQL is a declarative query language, which is very different from the imperative alternatives out there. You declare the pattern that you are looking for. You effectively tell nGQL what you want, rather than how to get it. Expressive: nGQL's ASCII-art style syntax provides a familiar, readable way to match patterns of nodes and relationships within graph datasets.","title":"Key attributes of nGQL"},{"location":"nGQL-tutorial/#ngql-syntax","text":"nGQL key words are case-insensitive but we recommend them written in all caps for easy reading. To help you get a quick understanding of nGQL, we have created a simple graph myspace_test with 4 vertices and 3 edges.","title":"nGQL Syntax"},{"location":"nGQL-tutorial/#cluster-administration","text":"Add hosts Add a single host ADD HOSTS $storage_ip:$storage_port Add multiple hosts ADD HOSTS $storage_ip1:$storage_port1, $storage_ip2:$storage_port2,... Note: Replace the $storage_ip and $storage_port here according to the local_ip and port in nebula-storaged.conf. Separate the hosts by comma. For example: ADD HOSTS 192.168.8.5:65500 Show hosts SHOW HOSTS ================================= | Ip | Port | Status | ================================= | 192.168.8.5 | 65500 | online | --------------------------------- | 192.168.8.1 | 65500 | offline | --------------------------------- Remove hosts Remove a single host REMOVE HOSTS $storage_ip:$storage_port Remove multiple hosts REMOVE HOSTS $storage_ip1:$storage_port1, $storage_ip2:$storage_port2,... Note: Separate the hosts by comma.","title":"Cluster administration"},{"location":"nGQL-tutorial/#graph-administration","text":"Graph spaces are physically isolated like the database in MySQL. CREATE DROP USE DESCRIBE SHOW SHOW CREATE SPACE \u221a \u221a \u221a v0.2 \u221a v0.2 Create space with CREATE, drop space with DROP, choose which space to use with USE, list available spaces with SHOW. DESCRIBE will be released in v0.2. Following are some examples: List all the spaces available SHOW SPACES ================ | Name | ================ | myspace_test | ---------------- SHOW CREATE SPACES myspace_test ==================================================================================== | Space | Create Space | ==================================================================================== | myspace_test | CREATE SPACE myspace_test (partition_num = 1, replica_factor = 1) | ------------------------------------------------------------------------------------ Drop a space DROP SPACE myspace_test Note: DROP SPACE deletes all data in the current version and recovery is not supported yet. Create a space CREATE SPACE myspace_test(partition_num=10, replica_factor=1) Note: partition_num is used to control the number of shardings and replica_factor to control the number of raft copies, which is set to 1 when in stand-alone version. Specify space USE myspace_test","title":"Graph administration"},{"location":"nGQL-tutorial/#schema-mutation","text":"Schema is used to manage the properties of vertices and edges (name and type of each field). In Nebula, a vertex can be labeled by multiple tags. CREATE DROP ALTER DESCRIBE SHOW TTL LOAD DUMP SHOW CREATE TAG \u221a v0.2 v0.2 \u221a \u221a v0.3 v0.2 v0.3 v0.2 EDGE \u221a v0.2 v0.2 \u221a \u221a v0.3 v0.2 v0.3 v0.2 You can use CREATE, DROP, ALTER, DESCRIBE, SHOW CREATE to create, drop, alter, view a schema. Following are some examples: CREATE TAG player(name string, age int); DESCRIBE TAG player; ================== | Field | Type | ================== | name | string | ------------------ | age | int | ------------------ SHOW CREATE TAG player; ========================================================================================== | Tag | Create Tag | ========================================================================================== | player | CREATE TAG player ( name string, age int ) ttl_duration = 0, ttl_col = \"\" | ------------------------------------------------------------------------------------------ CREATE TAG team(name string); DESCRIBE TAG team; CREATE EDGE serve (start_year int, end_year int); DESCRIBE EDGE serve; ===================== | Field | Type | ===================== | start_year | int | --------------------- | end_year | int | --------------------- SHOW CREATE EDGE serve; ================================================================================================= | Edge | Create Edge | ================================================================================================= | serve | CREATE EDGE serve ( start_year int, end_year int ) ttl_duration = 0, ttl_col = \"\" | ------------------------------------------------------------------------------------------------- CREATE EDGE like (likeness double); SHOW TAGS; SHOW EDGES","title":"Schema mutation"},{"location":"nGQL-tutorial/#data-manipulation","text":"INSERT is used to insert new vertices and edges, UPDATE AND REMOVE will be available in v0.2. INSERT UPDATE REMOVE TAG \u221a v0.2 v0.2 EDGE \u221a v0.2 v0.2 When inserting a vertex, its tag type and attribute fields should be specified, while its ID can either be auto-generated by hash or specified manually. Following are some examples: INSERT VERTEX player(name, age) VALUES 100:(\"Stoudemire\", 36); -- specify ID manually INSERT VERTEX player(name, age) VALUES hash(\"Jummy\"):(\"Jummy\", 0); -- ID generated by hash INSERT VERTEX player(name, age) VALUES 101:(\"Vicenta\", 0); INSERT VERTEX team(name) VALUES 201:(\"Magic\"); INSERT EDGE like (likeness) VALUES 100 -> 101:(90.02); INSERT EDGE like (likeness) VALUES 101 -> 102:(10.00); INSERT EDGE serve (start_year, end_year) VALUES 101 -> 201:(2002, 2010);","title":"Data manipulation"},{"location":"nGQL-tutorial/#graph-query","text":"The most commonly used graph query/traversal operator is GO, it means starting from a certain point and querying its 1 degree neighbor. Complex queries can be done by combining pipe | , filtering WHERE , YIELD , etc. Following are some examples: GO FROM 100 OVER like; -- Start from vertex 100, query 1-hop along edge like. GO 2 STEPS FROM 100 OVER like; -- Start from vertex 100, query 2-hop along edge GO FROM 100 OVER like WHERE likeness >= 0; -- Start from vertex 100, query along edge like and filter its property likeness GO FROM 100 OVER like WHERE $$.player.name==\"Vicenta\"; -- Filter requirement: the destination vertex name is \"Vicenta\" GO FROM 101 OVER serve YIELD serve._src AS src_id, $^.player.age AS src_propAge, serve._dst AS dst_id, $$.team.name AS dst_propName; -- Return the starting vertex id(renamed as srcid), source vertex property age, destination vertex id and its name GO FROM 100 OVER like | GO FROM $-.id OVER serve; -- Start from vertex 100, query 1-hop, set its output as the next query's input by using pipe","title":"Graph query"},{"location":"nGQL/","text":"Nebula Graph Query Language (nGQL) \u00b6 About nGQL \u00b6 nGQL is a declarative, textual query language like SQL, but for graphs. Unlike SQL, nGQL is all about expressing graph patterns. nGQL is a work in progress. We will add more features and further simplify the existing ones. There might be inconsistency between the syntax specs and implementation for the time being. Goals \u00b6 Easy to learn Easy to understand To focus on the online queries, also to provide the foundation for the offline computation Features \u00b6 Syntax is close to SQL, but not exactly the same (Easy to learn) Expandable Case insensitive Support basic graph traverse Support pattern match Support aggregation Support graph mutation Support distributed transaction (future release) Statement composition, but NO statement embedding (Easy to read) Prerequisite \u00b6 Directed property graph with schema Terminology \u00b6 Graph Space : A physically isolated space for different graph Tag : A label associated with a list of properties Each tag has a name (human readable string), and internally each tag will be assigned a 32-bit integer Each tag associates with a list of properties, each property has a name and a type There could be dependencies between tags. The dependency is a constrain, for instance, if tag S depends on tag T, then tag S cannot exist unless tag T exists Vertex : A Node in the graph Each vertex has a unique 64-bit (signed integer) ID ( VID ) Each vertex can associate with multiple tags Edge : A Link between two vertices Each edge can be uniquely identified by a tuple Edge type (ET) is a human readable string, internally it will be assigned a 32-bit integer. The edge type decides the property list (schema) on the edge Edge rank is an immutable user-assigned 64-bit signed integer. It affects the edge order between two vertices. The edge with a higher rank value comes first. When not specified, the default rank value is zero Each edge can only be of one type Path : A non-forked connection with multiple vertices and edges between them The length of a path is the number of the edges on the path, which is one less than the number of vertices A path can be represented by a list of vertices, edge types, and rank. An edge is a special path with length==1 <vid, edge_type[:rank], vid, ...> Language Specification \u00b6 General \u00b6 The entire set of statements can be categorized into three classes: query , mutation , and administration Every statement can yield a data set as the result. Each data set contains a schema (column name and type) and multiple data rows Composition \u00b6 Statements could be composed in two ways: Statements could be piped together using operator \" | \", much like the pipe in the shell scripts. The result yielded from the previous statement could be redirected to the next statement as input More than one statements can be batched together, separated by \" ; \". The result of the last statement (or a RETURN statement is executed) will be returned as the result of the batch Data Types \u00b6 Simple type: vid , integer (int64), double , float , bool , string , path , timestamp , year , month (year/month), date , datetime vid : 64-bit signed integer, representing a vertex ID List of simple types, such as integer[] , double[] , string[] Map : A list of KV pairs. The key must be a string , the value must be the same type for the given map Object (future release??): A list of KV pairs. The key mush be a string , the value can be any simple type Tuple List : This is only used for return values . It's composed by both meta data and data (multiple rows). The meta data includes the column names and their types. Type Conversion \u00b6 A simple typed value can be implicitly converted into a list A list can be implicitly converted into a one-column tuple list \"<type>_list\" can be used as the column name Common BNF \u00b6 ::= vid | integer | double | float | bool | string | path | timestamp | year | month | date | datetime ::= ::= | ::= vid (, vid )* | \"{\" vid (, vid )* \"}\" <label> ::= [:alpha] ([:alnum:] | \"_\")* ::= (\"_\")* <label> ::= <label> ::= (, )* ::= :<type> ::= \":\" ::= ::= <tuple> (, <tuple>)* | \"{\" <tuple> (, <tuple>)* \"}\" <tuple> ::= \"(\" VALUE (, VALUE )* \")\" <var> ::= \"$\" <label> Statements \u00b6 Choose a graph space \u00b6 Nebula supports multiple graph spaces. Data in different graph spaces are physically isolated. Before executing a query, a graph space needs to be selected using the following statement USE Return a data set \u00b6 Simply return a single value or a data set RETURN ::= vid | | | <var> Create a tag \u00b6 The following statement defines a new tag CREATE TAG ( ) ::= ::= + ::= , ::= Modify a tag type \u00b6 Create an edge type \u00b6 The following statement defines a new edge type CREATE EDGE ( ) := <label> Modify an edge type \u00b6 Insert vertices \u00b6 The following statement inserts one or more vertices INSERT VERTEX [ NO OVERWRITE ] VALUES ::= ( ) (, ( ))* ::= :( ) (, :( ))* ::= vid ::= (, )* ::= VALUE (, VALUE )* Insert edges \u00b6 The following statement inserts one or more edges INSERT EDGE [ NO OVERWRITE ] [( )] VALUES ( )+ edge_value ::= -> [@ ] : Update a vertex \u00b6 The following statement updates a vertex UPDATE VERTEX SET \\ [ WHERE ] [ YIELD ] ::= | ::= = {, = }+ ::= ( ) = ( ) | ( ) = Update an edge \u00b6 The following statement updates an edge UPDATE EDGE -> [@ ] OF SET [ WHERE ] [ YIELD ] Traverse the graph \u00b6 Navigate from given vertices to their neighbors according to the given conditions. It returns either a list of vertex IDs, or a list of tuples GO [ STEPS ] FROM [ OVER [ REVERSELY ] ] [ WHERE ] [ YIELD ] ::= integer | integer TO integer | UPTO integer ::= [data_set] [[ AS ] ] ::= vid | | | ::= [ AS ] ::= {, }* ::= ::= { AND | OR }\\* ::= > | >= | < | <= | == | != | IN ::= {, }* ::= [ AS ] WHERE clause only applies to the results that are going to be returned. It will not be applied to the intermediate results (See the detail description of the STEP[S] clause) When STEP[S] clause is skipped, it implies one step When going out for one step from the given vertex, all neighbors will be checked against the WHERE clause, only results satisfied the WHERE clause will be returned When going out for more than one step, WHERE clause will only be applied to the final results. It will not be applied to the intermediate results. Here is an example GO 2 STEPS FROM me OVER friend WHERE birthday > \"1988/1/1\" Obviously, you will probably guess the meaning of the query is to get all my fof (friend of friend) whose birthday is after 1988/1/1. You are absolutely right. We will not apply the filter to my friends (in the first step) Here is another example GO UPTO 3 STEPS FROM me OVER friend WHERE birthday > \"1988/1/1/\" This query tries to find any friend of me whose birthday is after 1988/1/1. If it finds at least one, it will return all the results. If it cannot find any, it will check my friends of friends to see if anyone's birthday is after 1988/1/1. It will return all the non-empty results, otherwise it will check my friends of friends of friends. So, similarly, next query tries to find anyone whose birthday is after 1988/1/1 starting from my 3-hop friends, and finishing at my 5-hop friends GO 3 TO 5 STEPS FROM me OVER friend WHERE birthday > \"1988/1/1/\" Search \u00b6 Following statements looks for vertices or edges that match certain conditions FIND VERTEX WHERE [ YIELD ] FIND EDGE WHERE [ YIELD ] Pattern match \u00b6 The following statement does a pattern match, and can return tuple list or paths MATCH [ FROM ] [ WHERE ] [ YIELD ] Property Reference \u00b6 It's common to refer a property in the statement, such as in WHERE clause and YIELD clause. In nGQL, the reference to a property is defined as ::= \".\" ::= | | ::= ::= '[' \"]\" <var> always starts with \"$\". There are two special variables: $- and $$. $- refers to the input stream, while $$ refers to the destination objects All property names start with a letter. There are a few system property names starting with \"_\". All properties names starting with \"_\" are reserved. Here are some built-in properties: _id : Vertex id _type : Edge type _src : Source ID of the edge _dst : Destination ID of the edge _rank : Edge rank unuber","title":"Nebula Graph Query Language (nGQL)"},{"location":"nGQL/#nebula-graph-query-language-ngql","text":"","title":"Nebula Graph Query Language (nGQL)"},{"location":"nGQL/#about-ngql","text":"nGQL is a declarative, textual query language like SQL, but for graphs. Unlike SQL, nGQL is all about expressing graph patterns. nGQL is a work in progress. We will add more features and further simplify the existing ones. There might be inconsistency between the syntax specs and implementation for the time being.","title":"About nGQL"},{"location":"nGQL/#goals","text":"Easy to learn Easy to understand To focus on the online queries, also to provide the foundation for the offline computation","title":"Goals"},{"location":"nGQL/#features","text":"Syntax is close to SQL, but not exactly the same (Easy to learn) Expandable Case insensitive Support basic graph traverse Support pattern match Support aggregation Support graph mutation Support distributed transaction (future release) Statement composition, but NO statement embedding (Easy to read)","title":"Features"},{"location":"nGQL/#prerequisite","text":"Directed property graph with schema","title":"Prerequisite"},{"location":"nGQL/#terminology","text":"Graph Space : A physically isolated space for different graph Tag : A label associated with a list of properties Each tag has a name (human readable string), and internally each tag will be assigned a 32-bit integer Each tag associates with a list of properties, each property has a name and a type There could be dependencies between tags. The dependency is a constrain, for instance, if tag S depends on tag T, then tag S cannot exist unless tag T exists Vertex : A Node in the graph Each vertex has a unique 64-bit (signed integer) ID ( VID ) Each vertex can associate with multiple tags Edge : A Link between two vertices Each edge can be uniquely identified by a tuple Edge type (ET) is a human readable string, internally it will be assigned a 32-bit integer. The edge type decides the property list (schema) on the edge Edge rank is an immutable user-assigned 64-bit signed integer. It affects the edge order between two vertices. The edge with a higher rank value comes first. When not specified, the default rank value is zero Each edge can only be of one type Path : A non-forked connection with multiple vertices and edges between them The length of a path is the number of the edges on the path, which is one less than the number of vertices A path can be represented by a list of vertices, edge types, and rank. An edge is a special path with length==1 <vid, edge_type[:rank], vid, ...>","title":"Terminology"},{"location":"nGQL/#language-specification","text":"","title":"Language Specification"},{"location":"nGQL/#general","text":"The entire set of statements can be categorized into three classes: query , mutation , and administration Every statement can yield a data set as the result. Each data set contains a schema (column name and type) and multiple data rows","title":"General"},{"location":"nGQL/#composition","text":"Statements could be composed in two ways: Statements could be piped together using operator \" | \", much like the pipe in the shell scripts. The result yielded from the previous statement could be redirected to the next statement as input More than one statements can be batched together, separated by \" ; \". The result of the last statement (or a RETURN statement is executed) will be returned as the result of the batch","title":"Composition"},{"location":"nGQL/#data-types","text":"Simple type: vid , integer (int64), double , float , bool , string , path , timestamp , year , month (year/month), date , datetime vid : 64-bit signed integer, representing a vertex ID List of simple types, such as integer[] , double[] , string[] Map : A list of KV pairs. The key must be a string , the value must be the same type for the given map Object (future release??): A list of KV pairs. The key mush be a string , the value can be any simple type Tuple List : This is only used for return values . It's composed by both meta data and data (multiple rows). The meta data includes the column names and their types.","title":"Data Types"},{"location":"nGQL/#type-conversion","text":"A simple typed value can be implicitly converted into a list A list can be implicitly converted into a one-column tuple list \"<type>_list\" can be used as the column name","title":"Type Conversion"},{"location":"nGQL/#common-bnf","text":"::= vid | integer | double | float | bool | string | path | timestamp | year | month | date | datetime ::= ::= | ::= vid (, vid )* | \"{\" vid (, vid )* \"}\" <label> ::= [:alpha] ([:alnum:] | \"_\")* ::= (\"_\")* <label> ::= <label> ::= (, )* ::= :<type> ::= \":\" ::= ::= <tuple> (, <tuple>)* | \"{\" <tuple> (, <tuple>)* \"}\" <tuple> ::= \"(\" VALUE (, VALUE )* \")\" <var> ::= \"$\" <label>","title":"Common BNF"},{"location":"nGQL/#statements","text":"","title":"Statements"},{"location":"nGQL/#choose-a-graph-space","text":"Nebula supports multiple graph spaces. Data in different graph spaces are physically isolated. Before executing a query, a graph space needs to be selected using the following statement USE","title":"Choose a graph space"},{"location":"nGQL/#return-a-data-set","text":"Simply return a single value or a data set RETURN ::= vid | | | <var>","title":"Return a data set"},{"location":"nGQL/#create-a-tag","text":"The following statement defines a new tag CREATE TAG ( ) ::= ::= + ::= , ::=","title":"Create a tag"},{"location":"nGQL/#modify-a-tag-type","text":"","title":"Modify a tag type"},{"location":"nGQL/#create-an-edge-type","text":"The following statement defines a new edge type CREATE EDGE ( ) := <label>","title":"Create an edge type"},{"location":"nGQL/#modify-an-edge-type","text":"","title":"Modify an edge type"},{"location":"nGQL/#insert-vertices","text":"The following statement inserts one or more vertices INSERT VERTEX [ NO OVERWRITE ] VALUES ::= ( ) (, ( ))* ::= :( ) (, :( ))* ::= vid ::= (, )* ::= VALUE (, VALUE )*","title":"Insert vertices"},{"location":"nGQL/#insert-edges","text":"The following statement inserts one or more edges INSERT EDGE [ NO OVERWRITE ] [( )] VALUES ( )+ edge_value ::= -> [@ ] :","title":"Insert edges"},{"location":"nGQL/#update-a-vertex","text":"The following statement updates a vertex UPDATE VERTEX SET \\ [ WHERE ] [ YIELD ] ::= | ::= = {, = }+ ::= ( ) = ( ) | ( ) =","title":"Update a vertex"},{"location":"nGQL/#update-an-edge","text":"The following statement updates an edge UPDATE EDGE -> [@ ] OF SET [ WHERE ] [ YIELD ]","title":"Update an edge"},{"location":"nGQL/#traverse-the-graph","text":"Navigate from given vertices to their neighbors according to the given conditions. It returns either a list of vertex IDs, or a list of tuples GO [ STEPS ] FROM [ OVER [ REVERSELY ] ] [ WHERE ] [ YIELD ] ::= integer | integer TO integer | UPTO integer ::= [data_set] [[ AS ] ] ::= vid | | | ::= [ AS ] ::= {, }* ::= ::= { AND | OR }\\* ::= > | >= | < | <= | == | != | IN ::= {, }* ::= [ AS ] WHERE clause only applies to the results that are going to be returned. It will not be applied to the intermediate results (See the detail description of the STEP[S] clause) When STEP[S] clause is skipped, it implies one step When going out for one step from the given vertex, all neighbors will be checked against the WHERE clause, only results satisfied the WHERE clause will be returned When going out for more than one step, WHERE clause will only be applied to the final results. It will not be applied to the intermediate results. Here is an example GO 2 STEPS FROM me OVER friend WHERE birthday > \"1988/1/1\" Obviously, you will probably guess the meaning of the query is to get all my fof (friend of friend) whose birthday is after 1988/1/1. You are absolutely right. We will not apply the filter to my friends (in the first step) Here is another example GO UPTO 3 STEPS FROM me OVER friend WHERE birthday > \"1988/1/1/\" This query tries to find any friend of me whose birthday is after 1988/1/1. If it finds at least one, it will return all the results. If it cannot find any, it will check my friends of friends to see if anyone's birthday is after 1988/1/1. It will return all the non-empty results, otherwise it will check my friends of friends of friends. So, similarly, next query tries to find anyone whose birthday is after 1988/1/1 starting from my 3-hop friends, and finishing at my 5-hop friends GO 3 TO 5 STEPS FROM me OVER friend WHERE birthday > \"1988/1/1/\"","title":"Traverse the graph"},{"location":"nGQL/#search","text":"Following statements looks for vertices or edges that match certain conditions FIND VERTEX WHERE [ YIELD ] FIND EDGE WHERE [ YIELD ]","title":"Search"},{"location":"nGQL/#pattern-match","text":"The following statement does a pattern match, and can return tuple list or paths MATCH [ FROM ] [ WHERE ] [ YIELD ]","title":"Pattern match"},{"location":"nGQL/#property-reference","text":"It's common to refer a property in the statement, such as in WHERE clause and YIELD clause. In nGQL, the reference to a property is defined as ::= \".\" ::= | | ::= ::= '[' \"]\" <var> always starts with \"$\". There are two special variables: $- and $$. $- refers to the input stream, while $$ refers to the destination objects All property names start with a letter. There are a few system property names starting with \"_\". All properties names starting with \"_\" are reserved. Here are some built-in properties: _id : Vertex id _type : Edge type _src : Source ID of the edge _dst : Destination ID of the edge _rank : Edge rank unuber","title":"Property Reference"},{"location":"cn-doc/cn-README/","text":"\u6b22\u8fce\u4f7f\u7528Nebula Graph\u5b98\u65b9\u6587\u6863 \u00b6 Nebula Graph \u662f\u4e16\u754c\u4e0a\u552f\u4e00\u80fd\u591f\u5bb9\u7eb3\u5343\u4ebf\u4e2a\u9876\u70b9\uff08\u8282\u70b9\uff09\u548c\u4e07\u4ebf\u6761\u8fb9\uff0c\u5e76\u63d0\u4f9b\u6beb\u79d2\u7ea7\u67e5\u8be2\u5ef6\u65f6\u7684\u56fe\u6570\u636e\u5e93\u89e3\u51b3\u65b9\u6848\u3002 Nebula Graph \u7684\u76ee\u6807\u662f\u4e3a\u8d85\u5927\u89c4\u6a21\u56fe\u6570\u636e\u63d0\u4f9b\u9ad8\u5e76\u53d1\uff0c\u4f4e\u5ef6\u65f6\u7684\u8bfb\u3001\u5199\u53ca\u8ba1\u7b97\u3002Nebula\u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u6211\u4eec\u671f\u5f85\u4e0e\u793e\u533a\u5408\u4f5c\u5171\u540c\u63a8\u5e7f\u56fe\u6570\u636e\u5e93\u3002 Nebula Graph \u7684\u4e3b\u8981\u7279\u70b9\uff1a shared-nothing distributed \u5bf9\u79f0\u5206\u5e03 \u53ef\u6269\u5c55 \u9ad8\u5bb9\u9519 \u7c7b\u4f3cSQL\u7684\u67e5\u8be2\u8bed\u8a00 \u83b7\u53d6 Nebula \u00b6 Nebula Graph \u6e90\u7801\u53c2\u89c1 GitHub \u3002 \u4e5f\u53ef\u4e0b\u8f7dNebula Docker \u955c\u50cf\u8fdb\u884c\u8bd5\u7528\u3002 \u66f4\u591a\u8be6\u60c5\u53c2\u89c1 Get Started . \u53c2\u4e0e Nebula \u00b6 Nebula Graph \u662f\u4e00\u4e2a\u5b8c\u5168\u5f00\u6e90\u7684\u9879\u76ee\uff0c\u5176\u6240\u6709\u6838\u5fc3\u529f\u80fd\u90fd\u5c06\u5728\u5f00\u6e90repository\u4e2d\u5b9e\u73b0\u3002Nebula\u9f13\u52b1\u793e\u533a\u53c2\u4e0e\u8be5\u9879\u76ee\uff0c\u76ee\u524d\u6709\u4ee5\u4e0b\u8d21\u732e\u65b9\u5f0f\uff1a \u76f4\u63a5\u4e0b\u8f7d\u8bd5\u7528 Nebula Graph \u5e76\u7ed9\u51fa\u53cd\u9988 \u63d0\u4ea4\u529f\u80fd\u8981\u6c42\u548c\u9519\u8bef\u62a5\u544a \u5e2e\u52a9\u6211\u4eec\u5b8c\u5584\u6587\u6863\uff0c\u8be6\u60c5\u53c2\u89c1 Contribute to Nebula Graph Docs \u8bb8\u53ef \u00b6 Nebula Graph \u4f7f\u7528 Apache 2.0 \u8bb8\u53ef\uff0c\u60a8\u53ef\u4ee5\u514d\u8d39\u4e0b\u8f7d\uff0c\u4fee\u6539\uff0c\u90e8\u7f72\u6e90\u4ee3\u7801\u4ee5\u6ee1\u8db3\u60a8\u7684\u9700\u6c42\u3002\u60a8\u8fd8\u53ef\u4ee5\u5c06 Nebula Graph \u4f5c\u4e3a\u540e\u7aef\u670d\u52a1\u90e8\u7f72\u4ee5\u652f\u6301\u60a8\u7684SAAS\u90e8\u7f72\u3002 \u4e3a\u9632\u6b62\u4e91\u4f9b\u5e94\u5546\u4ece\u9879\u76ee\u8d62\u5229\u800c\u4e0d\u56de\u9988\uff0cNebula\u5728\u9879\u76ee\u4e2d\u6dfb\u52a0\u4e86 Common Clause 1.0 \u6761\u6b3e\u3002\u5982\u4e0a\u6240\u8ff0\uff0cNebula\u662f\u4e00\u4e2a\u5b8c\u5168\u5f00\u6e90\u7684\u9879\u76ee\uff0c\u6b22\u8fce\u60a8\u5c31\u8bb8\u53ef\u6a21\u5f0f\u63d0\u8bae\uff0c\u5e2e\u52a9Nebula\u66f4\u9002\u5408\u793e\u533a\u53d1\u5c55\u3002 \u8054\u7cfb\u65b9\u5f0f \u00b6 \u4f7f\u7528 GitHub issue tracker \u63d0\u4ea4\u9519\u8bef\u62a5\u544a\u548c\u529f\u80fd\u8981\u6c42\u3002 \u52a0\u5165 \u3002 Nebula Graph \u8be6\u60c5\u8bbf\u95ee Home Page \u3002","title":"Overview"},{"location":"cn-doc/cn-README/#nebula-graph","text":"Nebula Graph \u662f\u4e16\u754c\u4e0a\u552f\u4e00\u80fd\u591f\u5bb9\u7eb3\u5343\u4ebf\u4e2a\u9876\u70b9\uff08\u8282\u70b9\uff09\u548c\u4e07\u4ebf\u6761\u8fb9\uff0c\u5e76\u63d0\u4f9b\u6beb\u79d2\u7ea7\u67e5\u8be2\u5ef6\u65f6\u7684\u56fe\u6570\u636e\u5e93\u89e3\u51b3\u65b9\u6848\u3002 Nebula Graph \u7684\u76ee\u6807\u662f\u4e3a\u8d85\u5927\u89c4\u6a21\u56fe\u6570\u636e\u63d0\u4f9b\u9ad8\u5e76\u53d1\uff0c\u4f4e\u5ef6\u65f6\u7684\u8bfb\u3001\u5199\u53ca\u8ba1\u7b97\u3002Nebula\u662f\u4e00\u4e2a\u5f00\u6e90\u9879\u76ee\uff0c\u6211\u4eec\u671f\u5f85\u4e0e\u793e\u533a\u5408\u4f5c\u5171\u540c\u63a8\u5e7f\u56fe\u6570\u636e\u5e93\u3002 Nebula Graph \u7684\u4e3b\u8981\u7279\u70b9\uff1a shared-nothing distributed \u5bf9\u79f0\u5206\u5e03 \u53ef\u6269\u5c55 \u9ad8\u5bb9\u9519 \u7c7b\u4f3cSQL\u7684\u67e5\u8be2\u8bed\u8a00","title":"\u6b22\u8fce\u4f7f\u7528Nebula Graph\u5b98\u65b9\u6587\u6863"},{"location":"cn-doc/cn-README/#nebula","text":"Nebula Graph \u6e90\u7801\u53c2\u89c1 GitHub \u3002 \u4e5f\u53ef\u4e0b\u8f7dNebula Docker \u955c\u50cf\u8fdb\u884c\u8bd5\u7528\u3002 \u66f4\u591a\u8be6\u60c5\u53c2\u89c1 Get Started .","title":"\u83b7\u53d6 Nebula"},{"location":"cn-doc/cn-README/#nebula_1","text":"Nebula Graph \u662f\u4e00\u4e2a\u5b8c\u5168\u5f00\u6e90\u7684\u9879\u76ee\uff0c\u5176\u6240\u6709\u6838\u5fc3\u529f\u80fd\u90fd\u5c06\u5728\u5f00\u6e90repository\u4e2d\u5b9e\u73b0\u3002Nebula\u9f13\u52b1\u793e\u533a\u53c2\u4e0e\u8be5\u9879\u76ee\uff0c\u76ee\u524d\u6709\u4ee5\u4e0b\u8d21\u732e\u65b9\u5f0f\uff1a \u76f4\u63a5\u4e0b\u8f7d\u8bd5\u7528 Nebula Graph \u5e76\u7ed9\u51fa\u53cd\u9988 \u63d0\u4ea4\u529f\u80fd\u8981\u6c42\u548c\u9519\u8bef\u62a5\u544a \u5e2e\u52a9\u6211\u4eec\u5b8c\u5584\u6587\u6863\uff0c\u8be6\u60c5\u53c2\u89c1 Contribute to Nebula Graph Docs","title":"\u53c2\u4e0e Nebula"},{"location":"cn-doc/cn-README/#_1","text":"Nebula Graph \u4f7f\u7528 Apache 2.0 \u8bb8\u53ef\uff0c\u60a8\u53ef\u4ee5\u514d\u8d39\u4e0b\u8f7d\uff0c\u4fee\u6539\uff0c\u90e8\u7f72\u6e90\u4ee3\u7801\u4ee5\u6ee1\u8db3\u60a8\u7684\u9700\u6c42\u3002\u60a8\u8fd8\u53ef\u4ee5\u5c06 Nebula Graph \u4f5c\u4e3a\u540e\u7aef\u670d\u52a1\u90e8\u7f72\u4ee5\u652f\u6301\u60a8\u7684SAAS\u90e8\u7f72\u3002 \u4e3a\u9632\u6b62\u4e91\u4f9b\u5e94\u5546\u4ece\u9879\u76ee\u8d62\u5229\u800c\u4e0d\u56de\u9988\uff0cNebula\u5728\u9879\u76ee\u4e2d\u6dfb\u52a0\u4e86 Common Clause 1.0 \u6761\u6b3e\u3002\u5982\u4e0a\u6240\u8ff0\uff0cNebula\u662f\u4e00\u4e2a\u5b8c\u5168\u5f00\u6e90\u7684\u9879\u76ee\uff0c\u6b22\u8fce\u60a8\u5c31\u8bb8\u53ef\u6a21\u5f0f\u63d0\u8bae\uff0c\u5e2e\u52a9Nebula\u66f4\u9002\u5408\u793e\u533a\u53d1\u5c55\u3002","title":"\u8bb8\u53ef"},{"location":"cn-doc/cn-README/#_2","text":"\u4f7f\u7528 GitHub issue tracker \u63d0\u4ea4\u9519\u8bef\u62a5\u544a\u548c\u529f\u80fd\u8981\u6c42\u3002 \u52a0\u5165 \u3002 Nebula Graph \u8be6\u60c5\u8bbf\u95ee Home Page \u3002","title":"\u8054\u7cfb\u65b9\u5f0f"},{"location":"cn-doc/cn-contribute-to-documentation/","text":"\u8d21\u732e\u6587\u6863 \u00b6 Nebula\u6587\u6863\u5b8c\u5168\u5f00\u6e90\uff0c\u6211\u4eec\u6b22\u8fce\u66f4\u591a\u8d21\u732e\u8005\u5e2e\u52a9\u6539\u8fdb\u6587\u6863\u3002Nebula\u6587\u6863\u4f7f\u7528Markdown\u8bed\u8a00\uff0c\u5e76\u53c2\u8003\u4e86 Google\u5f00\u53d1\u8005\u6587\u6863\u98ce\u683c\u6307\u5357 \u8fdb\u884c\u7f16\u5199\u3002 \u5982\u4f55\u8d21\u732e \u00b6 \u8d21\u732e\u6587\u6863\u6709\u591a\u79cd\u65b9\u5f0f\uff1a \u4f7f\u7528\u6bcf\u9875\u53f3\u4fa7\u7684\u94c5\u7b14\u6807\u8bb0\u76f4\u63a5\u5728\u7f51\u7ad9\u7f16\u8f91\u6216\u63d0\u4ea4\u95ee\u9898\u3002 \u5728GitHub\u4e0a\u63d0 issue \u3002 Fork\u4ed3\u5e93\uff0c\u5728\u672c\u5730\u5206\u652f\u4e0a\u505a\u66f4\u6539\uff0c\u7136\u540e\u63d0\u4ea4PR\u3002","title":"Contribute to Docs"},{"location":"cn-doc/cn-contribute-to-documentation/#_1","text":"Nebula\u6587\u6863\u5b8c\u5168\u5f00\u6e90\uff0c\u6211\u4eec\u6b22\u8fce\u66f4\u591a\u8d21\u732e\u8005\u5e2e\u52a9\u6539\u8fdb\u6587\u6863\u3002Nebula\u6587\u6863\u4f7f\u7528Markdown\u8bed\u8a00\uff0c\u5e76\u53c2\u8003\u4e86 Google\u5f00\u53d1\u8005\u6587\u6863\u98ce\u683c\u6307\u5357 \u8fdb\u884c\u7f16\u5199\u3002","title":"\u8d21\u732e\u6587\u6863"},{"location":"cn-doc/cn-contribute-to-documentation/#_2","text":"\u8d21\u732e\u6587\u6863\u6709\u591a\u79cd\u65b9\u5f0f\uff1a \u4f7f\u7528\u6bcf\u9875\u53f3\u4fa7\u7684\u94c5\u7b14\u6807\u8bb0\u76f4\u63a5\u5728\u7f51\u7ad9\u7f16\u8f91\u6216\u63d0\u4ea4\u95ee\u9898\u3002 \u5728GitHub\u4e0a\u63d0 issue \u3002 Fork\u4ed3\u5e93\uff0c\u5728\u672c\u5730\u5206\u652f\u4e0a\u505a\u66f4\u6539\uff0c\u7136\u540e\u63d0\u4ea4PR\u3002","title":"\u5982\u4f55\u8d21\u732e"},{"location":"cn-doc/cn-get-started/","text":"\u672c\u6559\u7a0b\u65e8\u5728\u5bf9 Nebula Graph \u7684\u4f7f\u7528\u505a\u7b80\u8981\u4ecb\u7ecd\u3002 \u5b89\u88c5Nebula Graph \u00b6 \u901a\u8fc7Docker \u00b6 \u542f\u52a8 Nebula Graph \u6700\u5feb\u6377\u7684\u65b9\u5f0f\u662f\u4f7f\u7528 docker \u3002\u9996\u5148\uff0c\u67e5\u770b\u7535\u8111\u662f\u5426\u5df2\u5b89\u88c5Docker\uff1a > docker --version Docker version 18.09.2, build 6247962 \u5982\u679c\u672a\u5b89\u88c5\uff0c\u53c2\u770b \u8fd9\u91cc \u3002 \u5b89\u88c5\u4e4b\u540e\uff0c\u8fd0\u884c\uff1a > docker pull vesoft/nebula-graph:latest ac9208207ada: Pulling fs layer cdcb67189ff7: Pulling fs layer 80407c3cb6b4: Pulling fs layer latest: Pulling from vesoft/nebula-graph ac9208207ada: Pull complete cdcb67189ff7: Pull complete 80407c3cb6b4: Pull complete Digest: sha256:72a73c801685595776779291969b57ab758f53ebd9bda8bab56421e50bfee161 Status: Downloaded newer image for vesoft/nebula-graph:latest \u4e0b\u8f7dNebula\u955c\u50cf\u3002 \u56fd\u5185\u4ece Docker Hub \u62c9\u53d6\u955c\u50cf\u6709\u65f6\u4f1a\u9047\u5230\u56f0\u96be\uff0c\u6b64\u65f6\u53ef\u4ee5\u914d\u7f6e\u56fd\u5185\u5730\u5740\u3002\u4f8b\u5982: Azure \u4e2d\u56fd\u955c\u50cf https://dockerhub.azk8s.cn \u4e03\u725b\u4e91 https://reg-mirror.qiniu.com linux\u7528\u6237\u8bf7\u5728/etc/docker/daemon.json \u4e2d\u5199\u5165\u5982\u4e0b\u5185\u5bb9\uff08\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u8bf7\u65b0\u5efa\u8be5\u6587\u4ef6 { \"registry-mirrors\": [ \"https://dockerhub.azk8s.cn\", \"https://reg-mirror.qiniu.com\" ] } macOS \u7528\u6237\u8bf7\u70b9\u51fb\u4efb\u52a1\u680f\u4e2dDocker Desktop\u56fe\u6807 -> Preferences -> Daemon -> Registry mirrors\u3002 \u5728\u5217\u8868\u4e2d\u6dfb\u52a0 https://dockerhub.azk8s.cn \u548c https://reg-mirror.qiniu.com\u3002\u4fee\u6539\u5b8c\u6210\u540e\uff0c\u70b9\u51fb Apply & Restart \u6309\u94ae\uff0c \u91cd\u542fDocker\u3002 \u955c\u50cf\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u952e\u5165\u547d\u4ee4 docker images \u67e5\u770b\u4e0b\u8f7d\u5b8c\u6210\u7684\u955c\u50cf\u3002 > docker images REPOSITORY TAG IMAGE ID CREATED SIZE vesoft/nebula-graph latest 1afd60e223ca 4 weeks ago 401MB \u8fd0\u884c Nebula Graph nebula \u955c\u50cf\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u8fd0\u884c > docker run -it vesoft/nebula-graph:latest /bin/bash \u542f\u52a8docker\u5bb9\u5668\u3002 \u8fdb\u5165\u5bb9\u5668\u540e\uff0c\u9ed8\u8ba4\u5728\u6839\u76ee\u5f55\u4e0b / \uff0c\u4f7f\u7528 /usr/local/nebula/script/ \u5207\u6362\u5230 neula \u4e3b\u76ee\u5f55\u3002 \u8fd0\u884c > ./start-all.sh Starting MetaService StorageService and GraphService ... \u542f\u52a8\u6d4b\u8bd5\u670d\u52a1\uff0c\u5b58\u50a8\u670d\u52a1\u548c\u56fe\u670d\u52a1\u3002 \u8fd0\u884c > ps -ef | grep nebula \u67e5\u770b\u670d\u52a1\u8fdb\u7a0b\uff0c\uff0c\u5982\u679c\u770b\u5230nebula-metad, nebula-storaged, nebula-graphd \uff0c\u5219\u8868\u660e\u670d\u52a1\u5df2\u6210\u529f\u8fde\u63a5\u3002 \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u8fde\u63a5nebula > ./start-console.sh Welcome to Nebula Graph (Version 0.1) nebula> \u5982\u679c\u5bf9\u90e8\u7f72\u8fc7\u7a0b\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u6b22\u8fce\u5728 GitHub \u4e0a\u63d0issue\u3002 \u7f16\u8bd1\u6e90\u7801(Linux) \u00b6 \u4f9d\u8d56 nebula\u9075\u5faac++14\u6807\u51c6\uff0c\u4f9d\u8d56\u7b2c\u4e09\u65b9\u5e93\uff1a autoconf automake libtool cmake bison unzip boost gperf krb5 openssl libunwind ncurses readline \u5efa\u8bae\u5b89\u88c5g++ 5\u4ee5\u4e0alinux\u7cfb\u7edf, \u6bd4\u5982Fedora 29\u3002\u76ee\u524d\uff0cnebula\u4f7f\u7528 git-lfs \u5b58\u50a8\u7b2c\u4e09\u65b9\u5e93\uff0c\u8bf7\u786e\u4fdd\u83b7\u53d6\u6e90\u4ee3\u7801\u4e4b\u524d\u60a8\u5df2\u5b89\u88c5 git-lfs \u3002 \u4eceGitHub\u83b7\u53d6\u6e90\u7801 > git clone https://github.com/vesoft-inc/nebula.git \u7f16\u8bd1 > cmake ./ \u9ed8\u8ba4\u5b89\u88c5\u5230 /usr/local\u8def\u5f84\uff0c\u5982\u9700\u6307\u5b9a\u5b89\u88c5\u8def\u5f84\uff0c\u8bf7\u4f7f\u7528: > cmake -DCMAKE_INSTALL_PREFIX=$your_nebula_install_dir \u66ff\u6362\u6b64\u5904\u7684 $your_nebula_install_dir \u3002 \u7136\u540e\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a > make && make install \u8fd0\u884cnebula\uff08\u5355\u673a\uff09 \u914d\u7f6enebula-metad.conf \u5728nebula\u5b89\u88c5\u76ee\u5f55\u4e0b\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a > cp etc/nebula-metad.conf.default etc/nebula-metad.conf \u6839\u636e\u5b9e\u9645\u4fee\u6539nebula-metad.conf\u4e2d\u7684\u914d\u7f6e\uff1a local_ip ip\u5730\u5740 port \u7aef\u53e3\u53f7 ws_http_port metaservice HTTP HTTP\u670d\u52a1\u7aef\u53e3\u53f7 ws_h2_port metaservice HTTP2\u670d\u52a1\u7aef\u53e3\u53f7 \u914d\u7f6enebula-storaged.conf > cp etc/nebula-storaged.conf.default etc/nebula-storaged.conf \u6839\u636e\u5b9e\u9645\u4fee\u6539nebula-storaged.conf\u4e2d\u7684\u914d\u7f6e\uff1a local_ip ip\u5730\u5740 port \u7aef\u53e3\u53f7 ws_http_port storageservice HTTP\u670d\u52a1\u7aef\u53e3\u53f7 ws_h2_port storageservice HTTP2\u670d\u52a1\u7aef\u53e3\u53f7 \u6839\u636e\u5b9e\u9645\u4fee\u6539nebula-graphd.conf\u4e2d\u7684\u914d\u7f6e\uff1a > cp etc/nebula-graphd.conf.default etc/nebula-graphd.conf local_ip ip\u5730\u5740 port \u7aef\u53e3\u53f7 ws_http_port graphservice HTTP\u670d\u52a1\u7aef\u53e3\u53f7 ws_h2_port graphservice HTTP2\u670d\u52a1\u7aef\u53e3\u53f7 \u542f\u52a8\u670d\u52a1 > scripts/nebula.service start all \u67e5\u770b\u670d\u52a1\u72b6\u6001 > scripts/nebula.service status all \u8fde\u63a5nebula > bin/nebula -u=user -p=password -u\u4e3a\u7528\u6237\u540d\uff0c\u9ed8\u8ba4\u503c\u4e3a user -p\u4e3a\u5bc6\u7801\uff0c\u7528\u6237 user \u7684\u9ed8\u8ba4\u5bc6\u7801\u4e3a password ADD HOSTS \u5c06\u5b58\u50a8\u8282\u70b9\u6ce8\u518c\u5230\u5143\u6570\u636e\u670d\u52a1\u4e2d > ADD HOSTS $storage_ip:$storage_port \u6839\u636enebula-storaged.conf\u4e2d\u7684 local_ip \uff0c port \u66ff\u6362\u6b64\u5904\u7684 $storage_ip \uff0c $storage_port \u3002 \u521b\u5efa\u56fe\u6570\u636e \u00b6 \u672c\u8282\u4ecb\u7ecd\u5982\u4f55\u6784\u5efa\u56fe\u6570\u636e\u5e76\u8fdb\u884c\u67e5\u8be2\u3002\u672c\u793a\u4f8b\u57fa\u4e8e\u4e0b\u56fe\u6784\u5efa\uff1a \u793a\u4f8b\u6570\u636e\u6709\u4e09\u79cd\u7c7b\u578b\u7684\u6807\u7b7e\uff08 course \uff0c building \uff0c student \uff09\uff0c\u4e24\u79cd\u7c7b\u578b\u7684\u8fb9\uff08 select \u548c like \uff09\uff0c\u5176schema\u4e3a\uff1a { \"tags\" :{ \"course\" :[ \"name: string\" , \"credits: integer\" ], \"building\" :[ \"name: string\" ], \"student\" :[ \"name: string\" , \"age: integer\" , \"gender: string\" ] }, \"edges\" :{ \"select\" :[ \"grade: integer\" ], \"like\" :[ \"likeness: double\" ] } } \u521b\u5efa\u56fe\u7a7a\u95f4 \u00b6 nebula\u4e2d\u7684\u56fe\u5b58\u50a8\u4e8e SPACE \u4e2d\uff0c\u6bcf\u4e2aspace\u662f\u4e00\u4e2a\u7269\u7406\u9694\u79bb\u7684\u7a7a\u95f4\u3002\u9996\u5148\uff0c\u9700\u8981\u521b\u5efa\u4e00\u4e2aspace\uff0c\u7136\u540e\u6307\u5b9a\u4f7f\u7528\u8be5space\u4ee5\u5b8c\u6210\u4e4b\u540e\u7684\u64cd\u4f5c\u3002 \u5217\u51fa\u5df2\u6709\u7684space\uff1a nebula> SHOW SPACES; \u521b\u5efa\u4e00\u4e2a\u540d\u4e3amyspace_test2\u7684\u65b0space\uff1a nebula> CREATE SPACE myspace_test2(partition_num=1, replica_factor=1); -- \u4f7f\u7528\u8fd9\u4e2aspace nebula> USE myspace_test2; replica_factor \u7528\u6765\u6307\u5b9a\u96c6\u7fa4\u590d\u672c\u6570\u3002 partition_num \u7528\u6765\u6307\u5b9a\u4e00\u4e2a\u590d\u672c\u4e2d\u7684\u5206\u533a\u6570\u91cf\u3002 \u5b9a\u4e49\u56fe\u6570\u636eSchema \u00b6 \u4f7f\u7528 CREATE TAG \u8bed\u53e5\u5b9a\u4e49\u5e26\u6709\u6807\u7b7e\u7c7b\u578b\u548c\u5c5e\u6027\u5217\u8868\u7684\u6807\u7b7e\u3002 nebula> CREATE TAG course(name string, credits int); nebula> CREATE TAG building(name string); nebula> CREATE TAG student(name string, age int, gender string); \u4f7f\u7528 CREATE EDGE \u8bed\u53e5\u5b9a\u4e49\u8fb9\u7c7b\u578b\u3002 nebula> CREATE EDGE like(likeness double); nebula> CREATE EDGE select(grade int); \u67e5\u770b\u4e0a\u8ff0\u521b\u5efa\u7684\u6807\u7b7e\u548c\u8fb9\uff1a -- \u67e5\u770b\u6807\u7b7e\u5217\u8868 nebula> SHOW TAGS; -- \u67e5\u770b\u8fb9\u5217\u8868 nebula> SHOW EDGES; \u67e5\u770b\u6807\u7b7e\u6216\u8fb9\u7684\u5c5e\u6027 -- \u67e5\u770b\u6807\u7b7e\u5c5e\u6027 nebula> DESCRIBE TAG student; -- \u67e5\u770b\u8fb9\u5c5e\u6027 nebula> DESCRIBE EDGE like; \u63d2\u5165\u6570\u636e \u00b6 \u4e3a\u4e0a\u8ff0\u56fe\u6570\u636e\u63d2\u5165\u70b9\u548c\u8fb9\u3002 -- \u63d2\u5165\u70b9 nebula> INSERT VERTEX student(name, age, gender) VALUES 200:(\"Monica\", 16, \"female\"); nebula> INSERT VERTEX student(name, age, gender) VALUES 201:(\"Mike\", 18, \"male\"); nebula> INSERT VERTEX student(name, age, gender) VALUES 202:(\"Jane\", 17, \"female\"); nebula> INSERT VERTEX course(name, credits),building(name) VALUES 101:(\"Math\", 3, \"No5\"); nebula> INSERT VERTEX course(name, credits),building(name) VALUES 102:(\"English\", 6, \"No11\"); -- \u63d2\u5165\u8fb9 nebula> INSERT EDGE select(grade) VALUES 200 -> 101:(5); nebula> INSERT EDGE select(grade) VALUES 200 -> 102:(3); nebula> INSERT EDGE select(grade) VALUES 201 -> 102:(3); nebula> INSERT EDGE select(grade) VALUES 202 -> 102:(3); nebula> INSERT EDGE like(likeness) VALUES 200 -> 201:(92.5); nebula> INSERT EDGE like(likeness) VALUES 201 -> 200:(85.6); nebula> INSERT EDGE like(likeness) VALUES 201 -> 202:(93.2); \u793a\u4f8b\u67e5\u8be2 \u00b6 Q1. \u67e5\u8be2\u70b9201\u559c\u6b22\u7684\u70b9\uff1a nebula> GO FROM 201 OVER like; ======= | id | ======= | 200 | ------- | 202 | ------- Q2. \u67e5\u8be2\u70b9201\u559c\u6b22\u7684\u70b9\uff0c\u5e76\u7b5b\u9009\u51fa\u5e74\u9f84\u5927\u4e8e17\u5c81\u7684\u70b9\uff0c\u5e76\u8fd4\u56de\u5176\u59d3\u540d\uff0c\u5e74\u9f84\uff0c\u6027\u522b\uff0c\u5c06\u5176\u91cd\u5168\u540d\u4e3aFriend\uff0cAge\uff0cGender\u3002 nebula> GO FROM 201 OVER like WHERE $$.student.age >= 17 YIELD $$.student.name AS Friend, $$.student.age AS Age, $$.student.gender AS Gender; ========================= | Friend | Age | Gender | ========================= | Jane | 17 | female | ------------------------- YIELD \u7528\u6765\u6307\u5b9a\u76ee\u6807\u8fd4\u56de\u503c\u3002 $^ \u4e3a\u8d77\u59cb\u70b9\u3002 $$ \u4e3a\u76ee\u6807\u70b9\u3002 Q3. \u67e5\u8be2\u70b9201\u559c\u6b22\u7684\u70b9\u9009\u62e9\u4e86\u54ea\u4e9b\u8bfe\u7a0b\u548c\u5176\u5bf9\u5e94\u5e74\u7ea7\u3002 -- \u4f7f\u7528\u7ba1\u9053 nebula> GO FROM 201 OVER like | GO FROM $-.id OVER select YIELD $^.student.name AS Student, $$.course.name AS Course, select.grade AS Grade; ============================= | Student | Course | Grade | ============================= | Monica | Math | 5 | ----------------------------- | Monica | English | 3 | ----------------------------- | Jane | English | 3 | ----------------------------- -- \u4f7f\u7528\u4e34\u65f6\u53d8\u91cf nebula> $a=GO FROM 201 OVER like; GO FROM $a.id OVER select YIELD $^.student.name AS Student, $$.course.name AS Course, select.grade AS Grade; ============================= | Student | Course | Grade | ============================= | Monica | Math | 5 | ----------------------------- | Monica | English | 3 | ----------------------------- | Jane | English | 3 | ----------------------------- | \u8868\u793a\u7ba1\u9053\uff0c\u4e0a\u4e00\u4e2a\u67e5\u8be2\u7684\u8f93\u51fa\u53ef\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u7ba1\u9053\u7684\u8f93\u5165\u3002 $- \u8868\u793a\u8f93\u5165\u6d41\u3002 \u7b2c\u4e8c\u79cd\u65b9\u6cd5\u4f7f\u7528\u4e86\u7528\u6237\u5b9a\u4e49\u53d8\u91cf $a \uff0c\u6b64\u53d8\u91cf\u4ec5\u9002\u7528\u4e8e\u590d\u5408\u8bed\u53e5\u3002","title":"Getting Started"},{"location":"cn-doc/cn-get-started/#nebula-graph","text":"","title":"\u5b89\u88c5Nebula Graph"},{"location":"cn-doc/cn-get-started/#docker","text":"\u542f\u52a8 Nebula Graph \u6700\u5feb\u6377\u7684\u65b9\u5f0f\u662f\u4f7f\u7528 docker \u3002\u9996\u5148\uff0c\u67e5\u770b\u7535\u8111\u662f\u5426\u5df2\u5b89\u88c5Docker\uff1a > docker --version Docker version 18.09.2, build 6247962 \u5982\u679c\u672a\u5b89\u88c5\uff0c\u53c2\u770b \u8fd9\u91cc \u3002 \u5b89\u88c5\u4e4b\u540e\uff0c\u8fd0\u884c\uff1a > docker pull vesoft/nebula-graph:latest ac9208207ada: Pulling fs layer cdcb67189ff7: Pulling fs layer 80407c3cb6b4: Pulling fs layer latest: Pulling from vesoft/nebula-graph ac9208207ada: Pull complete cdcb67189ff7: Pull complete 80407c3cb6b4: Pull complete Digest: sha256:72a73c801685595776779291969b57ab758f53ebd9bda8bab56421e50bfee161 Status: Downloaded newer image for vesoft/nebula-graph:latest \u4e0b\u8f7dNebula\u955c\u50cf\u3002 \u56fd\u5185\u4ece Docker Hub \u62c9\u53d6\u955c\u50cf\u6709\u65f6\u4f1a\u9047\u5230\u56f0\u96be\uff0c\u6b64\u65f6\u53ef\u4ee5\u914d\u7f6e\u56fd\u5185\u5730\u5740\u3002\u4f8b\u5982: Azure \u4e2d\u56fd\u955c\u50cf https://dockerhub.azk8s.cn \u4e03\u725b\u4e91 https://reg-mirror.qiniu.com linux\u7528\u6237\u8bf7\u5728/etc/docker/daemon.json \u4e2d\u5199\u5165\u5982\u4e0b\u5185\u5bb9\uff08\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u8bf7\u65b0\u5efa\u8be5\u6587\u4ef6 { \"registry-mirrors\": [ \"https://dockerhub.azk8s.cn\", \"https://reg-mirror.qiniu.com\" ] } macOS \u7528\u6237\u8bf7\u70b9\u51fb\u4efb\u52a1\u680f\u4e2dDocker Desktop\u56fe\u6807 -> Preferences -> Daemon -> Registry mirrors\u3002 \u5728\u5217\u8868\u4e2d\u6dfb\u52a0 https://dockerhub.azk8s.cn \u548c https://reg-mirror.qiniu.com\u3002\u4fee\u6539\u5b8c\u6210\u540e\uff0c\u70b9\u51fb Apply & Restart \u6309\u94ae\uff0c \u91cd\u542fDocker\u3002 \u955c\u50cf\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u952e\u5165\u547d\u4ee4 docker images \u67e5\u770b\u4e0b\u8f7d\u5b8c\u6210\u7684\u955c\u50cf\u3002 > docker images REPOSITORY TAG IMAGE ID CREATED SIZE vesoft/nebula-graph latest 1afd60e223ca 4 weeks ago 401MB \u8fd0\u884c Nebula Graph nebula \u955c\u50cf\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u8fd0\u884c > docker run -it vesoft/nebula-graph:latest /bin/bash \u542f\u52a8docker\u5bb9\u5668\u3002 \u8fdb\u5165\u5bb9\u5668\u540e\uff0c\u9ed8\u8ba4\u5728\u6839\u76ee\u5f55\u4e0b / \uff0c\u4f7f\u7528 /usr/local/nebula/script/ \u5207\u6362\u5230 neula \u4e3b\u76ee\u5f55\u3002 \u8fd0\u884c > ./start-all.sh Starting MetaService StorageService and GraphService ... \u542f\u52a8\u6d4b\u8bd5\u670d\u52a1\uff0c\u5b58\u50a8\u670d\u52a1\u548c\u56fe\u670d\u52a1\u3002 \u8fd0\u884c > ps -ef | grep nebula \u67e5\u770b\u670d\u52a1\u8fdb\u7a0b\uff0c\uff0c\u5982\u679c\u770b\u5230nebula-metad, nebula-storaged, nebula-graphd \uff0c\u5219\u8868\u660e\u670d\u52a1\u5df2\u6210\u529f\u8fde\u63a5\u3002 \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u8fde\u63a5nebula > ./start-console.sh Welcome to Nebula Graph (Version 0.1) nebula> \u5982\u679c\u5bf9\u90e8\u7f72\u8fc7\u7a0b\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u6b22\u8fce\u5728 GitHub \u4e0a\u63d0issue\u3002","title":"\u901a\u8fc7Docker"},{"location":"cn-doc/cn-get-started/#linux","text":"\u4f9d\u8d56 nebula\u9075\u5faac++14\u6807\u51c6\uff0c\u4f9d\u8d56\u7b2c\u4e09\u65b9\u5e93\uff1a autoconf automake libtool cmake bison unzip boost gperf krb5 openssl libunwind ncurses readline \u5efa\u8bae\u5b89\u88c5g++ 5\u4ee5\u4e0alinux\u7cfb\u7edf, \u6bd4\u5982Fedora 29\u3002\u76ee\u524d\uff0cnebula\u4f7f\u7528 git-lfs \u5b58\u50a8\u7b2c\u4e09\u65b9\u5e93\uff0c\u8bf7\u786e\u4fdd\u83b7\u53d6\u6e90\u4ee3\u7801\u4e4b\u524d\u60a8\u5df2\u5b89\u88c5 git-lfs \u3002 \u4eceGitHub\u83b7\u53d6\u6e90\u7801 > git clone https://github.com/vesoft-inc/nebula.git \u7f16\u8bd1 > cmake ./ \u9ed8\u8ba4\u5b89\u88c5\u5230 /usr/local\u8def\u5f84\uff0c\u5982\u9700\u6307\u5b9a\u5b89\u88c5\u8def\u5f84\uff0c\u8bf7\u4f7f\u7528: > cmake -DCMAKE_INSTALL_PREFIX=$your_nebula_install_dir \u66ff\u6362\u6b64\u5904\u7684 $your_nebula_install_dir \u3002 \u7136\u540e\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a > make && make install \u8fd0\u884cnebula\uff08\u5355\u673a\uff09 \u914d\u7f6enebula-metad.conf \u5728nebula\u5b89\u88c5\u76ee\u5f55\u4e0b\uff0c\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a > cp etc/nebula-metad.conf.default etc/nebula-metad.conf \u6839\u636e\u5b9e\u9645\u4fee\u6539nebula-metad.conf\u4e2d\u7684\u914d\u7f6e\uff1a local_ip ip\u5730\u5740 port \u7aef\u53e3\u53f7 ws_http_port metaservice HTTP HTTP\u670d\u52a1\u7aef\u53e3\u53f7 ws_h2_port metaservice HTTP2\u670d\u52a1\u7aef\u53e3\u53f7 \u914d\u7f6enebula-storaged.conf > cp etc/nebula-storaged.conf.default etc/nebula-storaged.conf \u6839\u636e\u5b9e\u9645\u4fee\u6539nebula-storaged.conf\u4e2d\u7684\u914d\u7f6e\uff1a local_ip ip\u5730\u5740 port \u7aef\u53e3\u53f7 ws_http_port storageservice HTTP\u670d\u52a1\u7aef\u53e3\u53f7 ws_h2_port storageservice HTTP2\u670d\u52a1\u7aef\u53e3\u53f7 \u6839\u636e\u5b9e\u9645\u4fee\u6539nebula-graphd.conf\u4e2d\u7684\u914d\u7f6e\uff1a > cp etc/nebula-graphd.conf.default etc/nebula-graphd.conf local_ip ip\u5730\u5740 port \u7aef\u53e3\u53f7 ws_http_port graphservice HTTP\u670d\u52a1\u7aef\u53e3\u53f7 ws_h2_port graphservice HTTP2\u670d\u52a1\u7aef\u53e3\u53f7 \u542f\u52a8\u670d\u52a1 > scripts/nebula.service start all \u67e5\u770b\u670d\u52a1\u72b6\u6001 > scripts/nebula.service status all \u8fde\u63a5nebula > bin/nebula -u=user -p=password -u\u4e3a\u7528\u6237\u540d\uff0c\u9ed8\u8ba4\u503c\u4e3a user -p\u4e3a\u5bc6\u7801\uff0c\u7528\u6237 user \u7684\u9ed8\u8ba4\u5bc6\u7801\u4e3a password ADD HOSTS \u5c06\u5b58\u50a8\u8282\u70b9\u6ce8\u518c\u5230\u5143\u6570\u636e\u670d\u52a1\u4e2d > ADD HOSTS $storage_ip:$storage_port \u6839\u636enebula-storaged.conf\u4e2d\u7684 local_ip \uff0c port \u66ff\u6362\u6b64\u5904\u7684 $storage_ip \uff0c $storage_port \u3002","title":"\u7f16\u8bd1\u6e90\u7801(Linux)"},{"location":"cn-doc/cn-get-started/#_1","text":"\u672c\u8282\u4ecb\u7ecd\u5982\u4f55\u6784\u5efa\u56fe\u6570\u636e\u5e76\u8fdb\u884c\u67e5\u8be2\u3002\u672c\u793a\u4f8b\u57fa\u4e8e\u4e0b\u56fe\u6784\u5efa\uff1a \u793a\u4f8b\u6570\u636e\u6709\u4e09\u79cd\u7c7b\u578b\u7684\u6807\u7b7e\uff08 course \uff0c building \uff0c student \uff09\uff0c\u4e24\u79cd\u7c7b\u578b\u7684\u8fb9\uff08 select \u548c like \uff09\uff0c\u5176schema\u4e3a\uff1a { \"tags\" :{ \"course\" :[ \"name: string\" , \"credits: integer\" ], \"building\" :[ \"name: string\" ], \"student\" :[ \"name: string\" , \"age: integer\" , \"gender: string\" ] }, \"edges\" :{ \"select\" :[ \"grade: integer\" ], \"like\" :[ \"likeness: double\" ] } }","title":"\u521b\u5efa\u56fe\u6570\u636e"},{"location":"cn-doc/cn-get-started/#_2","text":"nebula\u4e2d\u7684\u56fe\u5b58\u50a8\u4e8e SPACE \u4e2d\uff0c\u6bcf\u4e2aspace\u662f\u4e00\u4e2a\u7269\u7406\u9694\u79bb\u7684\u7a7a\u95f4\u3002\u9996\u5148\uff0c\u9700\u8981\u521b\u5efa\u4e00\u4e2aspace\uff0c\u7136\u540e\u6307\u5b9a\u4f7f\u7528\u8be5space\u4ee5\u5b8c\u6210\u4e4b\u540e\u7684\u64cd\u4f5c\u3002 \u5217\u51fa\u5df2\u6709\u7684space\uff1a nebula> SHOW SPACES; \u521b\u5efa\u4e00\u4e2a\u540d\u4e3amyspace_test2\u7684\u65b0space\uff1a nebula> CREATE SPACE myspace_test2(partition_num=1, replica_factor=1); -- \u4f7f\u7528\u8fd9\u4e2aspace nebula> USE myspace_test2; replica_factor \u7528\u6765\u6307\u5b9a\u96c6\u7fa4\u590d\u672c\u6570\u3002 partition_num \u7528\u6765\u6307\u5b9a\u4e00\u4e2a\u590d\u672c\u4e2d\u7684\u5206\u533a\u6570\u91cf\u3002","title":"\u521b\u5efa\u56fe\u7a7a\u95f4"},{"location":"cn-doc/cn-get-started/#schema","text":"\u4f7f\u7528 CREATE TAG \u8bed\u53e5\u5b9a\u4e49\u5e26\u6709\u6807\u7b7e\u7c7b\u578b\u548c\u5c5e\u6027\u5217\u8868\u7684\u6807\u7b7e\u3002 nebula> CREATE TAG course(name string, credits int); nebula> CREATE TAG building(name string); nebula> CREATE TAG student(name string, age int, gender string); \u4f7f\u7528 CREATE EDGE \u8bed\u53e5\u5b9a\u4e49\u8fb9\u7c7b\u578b\u3002 nebula> CREATE EDGE like(likeness double); nebula> CREATE EDGE select(grade int); \u67e5\u770b\u4e0a\u8ff0\u521b\u5efa\u7684\u6807\u7b7e\u548c\u8fb9\uff1a -- \u67e5\u770b\u6807\u7b7e\u5217\u8868 nebula> SHOW TAGS; -- \u67e5\u770b\u8fb9\u5217\u8868 nebula> SHOW EDGES; \u67e5\u770b\u6807\u7b7e\u6216\u8fb9\u7684\u5c5e\u6027 -- \u67e5\u770b\u6807\u7b7e\u5c5e\u6027 nebula> DESCRIBE TAG student; -- \u67e5\u770b\u8fb9\u5c5e\u6027 nebula> DESCRIBE EDGE like;","title":"\u5b9a\u4e49\u56fe\u6570\u636eSchema"},{"location":"cn-doc/cn-get-started/#_3","text":"\u4e3a\u4e0a\u8ff0\u56fe\u6570\u636e\u63d2\u5165\u70b9\u548c\u8fb9\u3002 -- \u63d2\u5165\u70b9 nebula> INSERT VERTEX student(name, age, gender) VALUES 200:(\"Monica\", 16, \"female\"); nebula> INSERT VERTEX student(name, age, gender) VALUES 201:(\"Mike\", 18, \"male\"); nebula> INSERT VERTEX student(name, age, gender) VALUES 202:(\"Jane\", 17, \"female\"); nebula> INSERT VERTEX course(name, credits),building(name) VALUES 101:(\"Math\", 3, \"No5\"); nebula> INSERT VERTEX course(name, credits),building(name) VALUES 102:(\"English\", 6, \"No11\"); -- \u63d2\u5165\u8fb9 nebula> INSERT EDGE select(grade) VALUES 200 -> 101:(5); nebula> INSERT EDGE select(grade) VALUES 200 -> 102:(3); nebula> INSERT EDGE select(grade) VALUES 201 -> 102:(3); nebula> INSERT EDGE select(grade) VALUES 202 -> 102:(3); nebula> INSERT EDGE like(likeness) VALUES 200 -> 201:(92.5); nebula> INSERT EDGE like(likeness) VALUES 201 -> 200:(85.6); nebula> INSERT EDGE like(likeness) VALUES 201 -> 202:(93.2);","title":"\u63d2\u5165\u6570\u636e"},{"location":"cn-doc/cn-get-started/#_4","text":"Q1. \u67e5\u8be2\u70b9201\u559c\u6b22\u7684\u70b9\uff1a nebula> GO FROM 201 OVER like; ======= | id | ======= | 200 | ------- | 202 | ------- Q2. \u67e5\u8be2\u70b9201\u559c\u6b22\u7684\u70b9\uff0c\u5e76\u7b5b\u9009\u51fa\u5e74\u9f84\u5927\u4e8e17\u5c81\u7684\u70b9\uff0c\u5e76\u8fd4\u56de\u5176\u59d3\u540d\uff0c\u5e74\u9f84\uff0c\u6027\u522b\uff0c\u5c06\u5176\u91cd\u5168\u540d\u4e3aFriend\uff0cAge\uff0cGender\u3002 nebula> GO FROM 201 OVER like WHERE $$.student.age >= 17 YIELD $$.student.name AS Friend, $$.student.age AS Age, $$.student.gender AS Gender; ========================= | Friend | Age | Gender | ========================= | Jane | 17 | female | ------------------------- YIELD \u7528\u6765\u6307\u5b9a\u76ee\u6807\u8fd4\u56de\u503c\u3002 $^ \u4e3a\u8d77\u59cb\u70b9\u3002 $$ \u4e3a\u76ee\u6807\u70b9\u3002 Q3. \u67e5\u8be2\u70b9201\u559c\u6b22\u7684\u70b9\u9009\u62e9\u4e86\u54ea\u4e9b\u8bfe\u7a0b\u548c\u5176\u5bf9\u5e94\u5e74\u7ea7\u3002 -- \u4f7f\u7528\u7ba1\u9053 nebula> GO FROM 201 OVER like | GO FROM $-.id OVER select YIELD $^.student.name AS Student, $$.course.name AS Course, select.grade AS Grade; ============================= | Student | Course | Grade | ============================= | Monica | Math | 5 | ----------------------------- | Monica | English | 3 | ----------------------------- | Jane | English | 3 | ----------------------------- -- \u4f7f\u7528\u4e34\u65f6\u53d8\u91cf nebula> $a=GO FROM 201 OVER like; GO FROM $a.id OVER select YIELD $^.student.name AS Student, $$.course.name AS Course, select.grade AS Grade; ============================= | Student | Course | Grade | ============================= | Monica | Math | 5 | ----------------------------- | Monica | English | 3 | ----------------------------- | Jane | English | 3 | ----------------------------- | \u8868\u793a\u7ba1\u9053\uff0c\u4e0a\u4e00\u4e2a\u67e5\u8be2\u7684\u8f93\u51fa\u53ef\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u7ba1\u9053\u7684\u8f93\u5165\u3002 $- \u8868\u793a\u8f93\u5165\u6d41\u3002 \u7b2c\u4e8c\u79cd\u65b9\u6cd5\u4f7f\u7528\u4e86\u7528\u6237\u5b9a\u4e49\u53d8\u91cf $a \uff0c\u6b64\u53d8\u91cf\u4ec5\u9002\u7528\u4e8e\u590d\u5408\u8bed\u53e5\u3002","title":"\u793a\u4f8b\u67e5\u8be2"},{"location":"cn-doc/cn-how-to-contribute/","text":"Step 1: \u901a\u8fc7GitHub Fork \u00b6 \u8bbf\u95ee https://github.com/vesoft-inc/nebula \u70b9\u51fb\u53f3\u4e0a\u89d2 Fork \u6309\u94ae\u521b\u5efa\u8fdc\u7a0b\u5206\u652f Step 2: \u5c06\u5206\u652f\u514b\u9686\u5230\u672c\u5730 \u00b6 \u5b9a\u4e49\u672c\u5730\u5de5\u4f5c\u76ee\u5f55\uff1a # \u5b9a\u4e49\u5de5\u4f5c\u76ee\u5f55 working_dir = $HOME /Workspace \u5c06 user \u8bbe\u7f6e\u4e3aGitHub\u8d26\u6237\u540d\uff1a user ={ GitHub\u8d26\u6237\u540d } \u514b\u9686\uff1a mkdir -p $working_dir cd $working_dir git clone https://github.com/ $user /nebula.git # \u63a8\u8350\u5982\u4e0b\u65b9\u5f0f # \u6216: git clone git@github.com:$user/nebula.git cd $working_dir /nebula git remote add upstream https://github.com/vesoft-inc/nebula.git # \u6216: git remote add upstream git@github.com:vesoft-inc/nebula.git # \u7531\u4e8e\u6ca1\u6709\u5199\u8bbf\u95ee\u6743\u9650\uff0c\u8bf7\u52ff\u63a8\u9001\u81f3\u4e0a\u6e38\u4e3b\u5206\u652f git remote set-url --push upstream no_push # \u786e\u8ba4\u8fdc\u7a0b\u5206\u652f\u6709\u6548\uff1a # \u6b63\u786e\u7684\u683c\u5f0f\u4e3a\uff1a # origin git@github.com:$(user)/nebula.git (fetch) # origin git@github.com:$(user)/nebula.git (push) # upstream https://github.com/vesoft-inc/nebula (fetch) # upstream no_push (push) git remote -v \u5b9a\u4e49\u9884\u63d0\u4ea4hook \u00b6 \u8bf7\u5c06Nebula Graph\u9884\u63d0\u4ea4\u6302\u94a9\u94fe\u63a5\u5230 .git \u76ee\u5f55\u3002 \u6b64\u6302\u94a9\u68c0\u67e5\u63d0\u4ea4\u683c\u5f0f\uff0c\u6784\u5efa\uff0c\u6587\u6863\u751f\u6210\u7b49\u3002 cd $working_dir /nebula/.git/hooks ln -s ../../cpplint/bin/pre-commit.sh . \u6709\u65f6\uff0c\u9884\u63d0\u4ea4\u6302\u94a9\u4e0d\u80fd\u6267\u884c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u624b\u52a8\u6267\u884c\u3002 cd $working_dir /nebula/.git/hooks chmod +x pre-commit Step 3: \u5206\u652f \u00b6 \u66f4\u65b0\u672c\u5730\u4e3b\u5206\u652f\uff1a cd $working_dir /nebula git fetch upstream git checkout master git rebase upstream/master \u4ece\u4e3b\u5206\u652f\u521b\u5efa\u5e76\u5207\u6362\u5206\u652f\uff1a git checkout -b myfeature \u6ce8\u610f \u7531\u4e8e\u4e00\u4e2aPR\u901a\u5e38\u5305\u542b\u591a\u4e2acommit\uff0c\u5728\u5408\u5e76\u81f3\u4e3b\u5206\u652f\u65f6\u5bb9\u6613\u88ab\u6324\u538b\uff0c\u56e0\u6b64\u5efa\u8bae\u60a8\u521b\u5efa\u72ec\u7acb\u7684\u5206\u652f\u8fdb\u884c\u66f4\u6539\u3002\u5408\u5e76\u540e\u7684\u5206\u652f\u5df2\u65e0\u7528\u5904\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u4e0a\u8ff0rebase\u547d\u4ee4\u5c06\u672c\u5730\u4e3b\u5206\u652f\u4e0e\u4e0a\u6e38\u540c\u6b65\u3002\u6b64\u5916\uff0c\u5982\u679c\u76f4\u63a5\u5c06commit\u63d0\u4ea4\u81f3\u4e3b\u5206\u652f\uff0c\u5219\u9700\u8981hard reset\u4e3b\u5206\u652f\u3002 git fetch upstream git checkout master git reset --hard upstream/master git push --force origin master Step 4: \u5f00\u53d1 \u00b6 \u7f16\u8f91\u4ee3\u7801 \u00b6 \u6b64\u65f6\u53ef\u5728 myfeature \u5206\u652f\u7f16\u8f91\u4ee3\u7801\uff0c \u7f16\u8f91\u65f6\u8bf7\u9075\u5faa \u7f16\u7801\u98ce\u683c\u6307\u5357 \u3002 \u8fd0\u884c\u72ec\u7acb\u6a21\u5f0f \u00b6 \u5982\u9700\u91cd\u73b0\u5e76\u68c0\u67e5\u95ee\u9898\uff0c\u5219\u9700\u5728\u72ec\u7acb\u6a21\u5f0f\u4e0b\u8fd0\u884cnebula\u3002 # \u6784\u5efa\u4e8c\u8fdb\u5236\u6587\u4ef6 make server # \u5728\u72ec\u7acb\u6a21\u5f0f\u4e0b\u8fd0\u884c nebula-graphd \u5c06Nebula Graph\u4e0e\u672c\u5730\u670d\u52a1\u5668\u76f8\u8fde nebula \u8fd0\u884c\u6d4b\u8bd5 \u00b6 # \u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\uff0c\u786e\u4fdd\u6240\u6709\u6d4b\u8bd5\u987a\u5229\u901a\u8fc7\u3002 Step 5: \u4fdd\u6301\u5206\u652f\u540c\u6b65 \u00b6 # \u5f53\u5904\u4e8emyfeature\u5206\u652f\u65f6\uff1a git fetch upstream git rebase upstream/master Step 6: Commit \u00b6 \u63d0\u4ea4\u4ee3\u7801\u66f4\u6539 git commit Step 7: Push \u00b6 \u4ee3\u7801\u66f4\u6539\u5b8c\u6210\u6216\u9700\u8981\u5907\u4efd\u4ee3\u7801\u65f6\uff0c\u5c06\u672c\u5730\u4ed3\u5e93\u521b\u5efa\u7684\u5206\u652fpush\u5230GitHub\u7aef\u7684\u8fdc\u7a0b\u4ed3\u5e93\uff1a git push -f origin myfeature Step 8: \u521b\u5efapull request \u00b6 \u70b9\u51fb\u6b64\u5904\u8bbf\u95eefork\u4ed3\u5e93https://github.com/$user/nebula (\u66ff\u6362\u6b64\u5904\u7684 $user \u7528\u6237\u540d)\u3002 \u70b9\u51fb myfeature \u5206\u652f\u65c1\u7684 Compare & pull request \u6309\u94ae\u3002 Step 9: \u4ee3\u7801\u5ba1\u67e5 \u00b6 \u516c\u5f00\u7684pull request\u81f3\u5c11\u9700\u8981\u4e00\u4eba\u5ba1\u67e5\uff0c\u4ee3\u7801\u5ba1\u67e5\u5305\u62ec\u67e5\u627ebug\uff0c\u5ba1\u67e5\u4ee3\u7801\u98ce\u683c\u7b49\u3002","title":"Contribute to Nebula"},{"location":"cn-doc/cn-how-to-contribute/#step-1-github-fork","text":"\u8bbf\u95ee https://github.com/vesoft-inc/nebula \u70b9\u51fb\u53f3\u4e0a\u89d2 Fork \u6309\u94ae\u521b\u5efa\u8fdc\u7a0b\u5206\u652f","title":"Step 1: \u901a\u8fc7GitHub Fork"},{"location":"cn-doc/cn-how-to-contribute/#step-2","text":"\u5b9a\u4e49\u672c\u5730\u5de5\u4f5c\u76ee\u5f55\uff1a # \u5b9a\u4e49\u5de5\u4f5c\u76ee\u5f55 working_dir = $HOME /Workspace \u5c06 user \u8bbe\u7f6e\u4e3aGitHub\u8d26\u6237\u540d\uff1a user ={ GitHub\u8d26\u6237\u540d } \u514b\u9686\uff1a mkdir -p $working_dir cd $working_dir git clone https://github.com/ $user /nebula.git # \u63a8\u8350\u5982\u4e0b\u65b9\u5f0f # \u6216: git clone git@github.com:$user/nebula.git cd $working_dir /nebula git remote add upstream https://github.com/vesoft-inc/nebula.git # \u6216: git remote add upstream git@github.com:vesoft-inc/nebula.git # \u7531\u4e8e\u6ca1\u6709\u5199\u8bbf\u95ee\u6743\u9650\uff0c\u8bf7\u52ff\u63a8\u9001\u81f3\u4e0a\u6e38\u4e3b\u5206\u652f git remote set-url --push upstream no_push # \u786e\u8ba4\u8fdc\u7a0b\u5206\u652f\u6709\u6548\uff1a # \u6b63\u786e\u7684\u683c\u5f0f\u4e3a\uff1a # origin git@github.com:$(user)/nebula.git (fetch) # origin git@github.com:$(user)/nebula.git (push) # upstream https://github.com/vesoft-inc/nebula (fetch) # upstream no_push (push) git remote -v","title":"Step 2: \u5c06\u5206\u652f\u514b\u9686\u5230\u672c\u5730"},{"location":"cn-doc/cn-how-to-contribute/#hook","text":"\u8bf7\u5c06Nebula Graph\u9884\u63d0\u4ea4\u6302\u94a9\u94fe\u63a5\u5230 .git \u76ee\u5f55\u3002 \u6b64\u6302\u94a9\u68c0\u67e5\u63d0\u4ea4\u683c\u5f0f\uff0c\u6784\u5efa\uff0c\u6587\u6863\u751f\u6210\u7b49\u3002 cd $working_dir /nebula/.git/hooks ln -s ../../cpplint/bin/pre-commit.sh . \u6709\u65f6\uff0c\u9884\u63d0\u4ea4\u6302\u94a9\u4e0d\u80fd\u6267\u884c\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u624b\u52a8\u6267\u884c\u3002 cd $working_dir /nebula/.git/hooks chmod +x pre-commit","title":"\u5b9a\u4e49\u9884\u63d0\u4ea4hook"},{"location":"cn-doc/cn-how-to-contribute/#step-3","text":"\u66f4\u65b0\u672c\u5730\u4e3b\u5206\u652f\uff1a cd $working_dir /nebula git fetch upstream git checkout master git rebase upstream/master \u4ece\u4e3b\u5206\u652f\u521b\u5efa\u5e76\u5207\u6362\u5206\u652f\uff1a git checkout -b myfeature \u6ce8\u610f \u7531\u4e8e\u4e00\u4e2aPR\u901a\u5e38\u5305\u542b\u591a\u4e2acommit\uff0c\u5728\u5408\u5e76\u81f3\u4e3b\u5206\u652f\u65f6\u5bb9\u6613\u88ab\u6324\u538b\uff0c\u56e0\u6b64\u5efa\u8bae\u60a8\u521b\u5efa\u72ec\u7acb\u7684\u5206\u652f\u8fdb\u884c\u66f4\u6539\u3002\u5408\u5e76\u540e\u7684\u5206\u652f\u5df2\u65e0\u7528\u5904\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u4e0a\u8ff0rebase\u547d\u4ee4\u5c06\u672c\u5730\u4e3b\u5206\u652f\u4e0e\u4e0a\u6e38\u540c\u6b65\u3002\u6b64\u5916\uff0c\u5982\u679c\u76f4\u63a5\u5c06commit\u63d0\u4ea4\u81f3\u4e3b\u5206\u652f\uff0c\u5219\u9700\u8981hard reset\u4e3b\u5206\u652f\u3002 git fetch upstream git checkout master git reset --hard upstream/master git push --force origin master","title":"Step 3: \u5206\u652f"},{"location":"cn-doc/cn-how-to-contribute/#step-4","text":"","title":"Step 4: \u5f00\u53d1"},{"location":"cn-doc/cn-how-to-contribute/#_1","text":"\u6b64\u65f6\u53ef\u5728 myfeature \u5206\u652f\u7f16\u8f91\u4ee3\u7801\uff0c \u7f16\u8f91\u65f6\u8bf7\u9075\u5faa \u7f16\u7801\u98ce\u683c\u6307\u5357 \u3002","title":"\u7f16\u8f91\u4ee3\u7801"},{"location":"cn-doc/cn-how-to-contribute/#_2","text":"\u5982\u9700\u91cd\u73b0\u5e76\u68c0\u67e5\u95ee\u9898\uff0c\u5219\u9700\u5728\u72ec\u7acb\u6a21\u5f0f\u4e0b\u8fd0\u884cnebula\u3002 # \u6784\u5efa\u4e8c\u8fdb\u5236\u6587\u4ef6 make server # \u5728\u72ec\u7acb\u6a21\u5f0f\u4e0b\u8fd0\u884c nebula-graphd \u5c06Nebula Graph\u4e0e\u672c\u5730\u670d\u52a1\u5668\u76f8\u8fde nebula","title":"\u8fd0\u884c\u72ec\u7acb\u6a21\u5f0f"},{"location":"cn-doc/cn-how-to-contribute/#_3","text":"# \u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\uff0c\u786e\u4fdd\u6240\u6709\u6d4b\u8bd5\u987a\u5229\u901a\u8fc7\u3002","title":"\u8fd0\u884c\u6d4b\u8bd5"},{"location":"cn-doc/cn-how-to-contribute/#step-5","text":"# \u5f53\u5904\u4e8emyfeature\u5206\u652f\u65f6\uff1a git fetch upstream git rebase upstream/master","title":"Step 5: \u4fdd\u6301\u5206\u652f\u540c\u6b65"},{"location":"cn-doc/cn-how-to-contribute/#step-6-commit","text":"\u63d0\u4ea4\u4ee3\u7801\u66f4\u6539 git commit","title":"Step 6: Commit"},{"location":"cn-doc/cn-how-to-contribute/#step-7-push","text":"\u4ee3\u7801\u66f4\u6539\u5b8c\u6210\u6216\u9700\u8981\u5907\u4efd\u4ee3\u7801\u65f6\uff0c\u5c06\u672c\u5730\u4ed3\u5e93\u521b\u5efa\u7684\u5206\u652fpush\u5230GitHub\u7aef\u7684\u8fdc\u7a0b\u4ed3\u5e93\uff1a git push -f origin myfeature","title":"Step 7: Push"},{"location":"cn-doc/cn-how-to-contribute/#step-8-pull-request","text":"\u70b9\u51fb\u6b64\u5904\u8bbf\u95eefork\u4ed3\u5e93https://github.com/$user/nebula (\u66ff\u6362\u6b64\u5904\u7684 $user \u7528\u6237\u540d)\u3002 \u70b9\u51fb myfeature \u5206\u652f\u65c1\u7684 Compare & pull request \u6309\u94ae\u3002","title":"Step 8: \u521b\u5efapull request"},{"location":"cn-doc/cn-how-to-contribute/#step-9","text":"\u516c\u5f00\u7684pull request\u81f3\u5c11\u9700\u8981\u4e00\u4eba\u5ba1\u67e5\uff0c\u4ee3\u7801\u5ba1\u67e5\u5305\u62ec\u67e5\u627ebug\uff0c\u5ba1\u67e5\u4ee3\u7801\u98ce\u683c\u7b49\u3002","title":"Step 9: \u4ee3\u7801\u5ba1\u67e5"},{"location":"cn-doc/cn-nGQL-tutorial/","text":"\u67e5\u8be2\u8bed\u8a00nGQL \u00b6 nGQL\u662fNebula Graph\u7684\u67e5\u8be2\u8bed\u8a00\uff0c\u53ef\u4f9b\u7528\u6237\u5b58\u50a8\u548c\u68c0\u7d22\u56fe\u6570\u636e\u3002nGQL\u4e3a\u7c7bSQL\u5f0f\u8bed\u8a00\uff0c\u6613\u5b66\u6613\u7528\uff0c\u4e14\u53ef\u6ee1\u8db3\u590d\u6742\u4e1a\u52a1\u9700\u6c42\u3002 nGQL\u7684\u5173\u952e\u5c5e\u6027 \u00b6 Nebula Graph\u81f4\u529b\u4e8e\u6253\u9020\u4e13\u4e3a\u56fe\u6570\u636e\u4f7f\u7528\u7684\u67e5\u8be2\u8bed\u8a00\u2014\u2014nGQL\u3002\u4e0e\u5176\u4ed6\u56fe\u6570\u636e\u5e93\u67e5\u8be2\u8bed\u8a00\u76f8\u6bd4\uff0cnGQL\u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a \u58f0\u660e\u5f0f\uff1a\u4e0e\u547d\u4ee4\u5f0f\u8bed\u8a00\u4e0d\u540c\uff0cnGQL\u662f\u58f0\u660e\u5f0f\u8bed\u8a00\uff0c\u53ea\u9700\u76f4\u63a5\u58f0\u660e\u67e5\u8be2\u6a21\u5f0f\u800c\u65e0\u9700\u544a\u77e5\u5982\u4f55\u67e5\u8be2\u3002 \u8868\u73b0\u529b\u5f3a\uff1anGQL\u91c7\u7528ASCII\u8bed\u6cd5\u98ce\u683c\uff0c\u5176\u67e5\u8be2\u8bed\u8a00\u6240\u8868\u8fbe\u7684\u771f\u5b9e\u542b\u4e49\u6613\u4e8e\u7406\u89e3\u3002 nGQL\u8bed\u6cd5 \u00b6 nGQL\u5173\u952e\u5b57\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u4f46\u662f\u5efa\u8bae\u5c06\u5176\u5168\u90e8\u5927\u5199\uff0c\u4ee5\u4fbf\u4e8e\u9605\u8bfb\u3002\u4e3a\u5e2e\u52a9\u60a8\u5feb\u901f\u4e86\u89e3nGQL\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a myspace_test \u7684\u7b80\u5355\u7684\u56fe\u6570\u636e\uff0c\u5176\u4e2d\u5305\u542b4\u4e2a\u8282\u70b9\u548c3\u6761\u8fb9\u3002 \u96c6\u7fa4\u7ba1\u7406 \u00b6 \u6dfb\u52a0hosts \u6dfb\u52a0\u4e00\u4e2ahost ADD HOSTS $storage_ip:$storage_port \u6dfb\u52a0\u591a\u4e2ahosts ADD HOSTS $storage_ip1:$storage_port1, $storage_ip2:$storage_port2,... \u6ce8\u610f\uff1a \u5c06\u6b64\u5904\u7684$storage_ip\u548c$storage_port\u66ff\u6362\u4e3anebula-storaged.conf\u6587\u4ef6\u4e2d\u7684local_ip\u548cport\u7aef\u53e3\u53f7\uff0chosts\u4e4b\u95f4\u9700\u7528\u9017\u53f7\u9694\u5f00\uff0c\u4f8b\u5982\uff1a ADD HOSTS 192.168.8.5:65500 \u663e\u793ahosts SHOW HOSTS ============================= | Ip | Port | Status | ============================= | 192.168.8.5 | 65500 | online | ----------------------- | 192.168.8.1 | 65500 | offline | ----------------------- \u79fb\u9664hosts \u79fb\u9664\u4e00\u4e2ahost REMOVE HOSTS $storage_ip:$storage_port \u79fb\u9664\u591a\u4e2ahosts REMOVE HOSTS $storage_ip1:$storage_port1, $storage_ip2:$storage_port2,... \u6ce8\u610f\uff1a \u4f7f\u7528\u9017\u53f7\u5c06hosts\u9694\u5f00\u3002 \u56fe\u7ba1\u7406 \u00b6 SPACE\u662f\u7269\u7406\u9694\u79bb\u7684\u7a7a\u95f4\uff0c\u4f5c\u7528\u7c7b\u4f3c\u4e8eMySQL\u4e2d\u7684\u6570\u636e\u5e93\u3002 CREATE DROP USE DESCRIBE SHOW SPACE \u221a \u221a \u221a v0.2 \u221a \u589e\u52a0CREATE\u3001\u5220\u9664DROP\u3001\u4f7f\u7528USE\u3001\u5217\u4e3eSHOW\uff0c\u63cf\u8ff0DESCRIBE\u3002 \u4e3e\u4f8b\u5982\u4e0b\uff1a \u5217\u4e3e\u51fa\u5f53\u524d\u6240\u6709\u7684space\uff1a SHOW SPACES ================ | Name | ================ | myspace_test | ---------------- \u5220\u9664space DROP SPACE myspace_test \u6ce8\u610f\uff1a \u5f53\u524d\u7248\u672cDROP SPACE\u540e\uff0c\u5176\u4e2d\u7684\u6240\u6709\u6570\u636e\u4f1a\u540c\u65f6\u5220\u9664\uff0c\u4e14\u5c1a\u672a\u652f\u6301\u6062\u590d\u529f\u80fd \u521b\u5efaspace CREATE SPACE myspace_test(partition_num=10, replica_factor=1) \u6ce8\u610f\uff1a partition_num\u7528\u4e8e\u63a7\u5236\u6570\u636e\u5206\u7247\u6570\uff1breplica_factor\u7528\u4e8e\u63a7\u5236raft\u526f\u672c\u6570\u91cf\uff0c\u5355\u673a\u8bbe\u4e3a1 \u6307\u5b9a\u4f7f\u7528space USE myspace_test Schema\u7ba1\u7406 \u00b6 Schema\u7528\u4e8e\u7ba1\u7406\u8282\u70b9\u548c\u8fb9\u7684\u5c5e\u6027\uff08\u6bcf\u4e2a\u5b57\u6bb5\u7684\u547d\u540d\u548c\u7c7b\u578b\uff09\uff0cnebula\u4e2d\u4e00\u4e2a\u8282\u70b9\u53ef\u88ab\u6253\u5361\u591a\u4e2a\u6807\u7b7e\u3002 CREATE DROP ALTER DESCRIBE SHOW TTL LOAD DUMP TAG \u221a v0.2 v0.2 \u221a \u221a v0.3 v0.2 v0.3 EDGE \u221a v0.2 v0.2 \u221a \u221a v0.3 v0.2 v0.3 CREATE,DROP,ALTER,DESCRIBE\u5206\u522b\u5bf9\u5e94\u4e00\u4e2aSCHEMA\u7684\u65b0\u5efa\u3001\u5220\u9664\u3001\u4fee\u6539\u548c\u67e5\u770b \u4e3e\u4f8b\u5982\u4e0b\uff1a CREATE TAG player(name string, age int); DESCRIBE TAG player; CREATE TAG team(name string); DESCRIBE TAG team; CREATE EDGE serve (start_year int, end_year int); DESCRIBE EDGE serve; CREATE EDGE like (likeness double); SHOW TAGS; SHOW EDGES \u6570\u636e\u64cd\u4f5c \u00b6 INSERT \u7528\u4e8e\u63d2\u5165\u65b0\u7684\u8282\u70b9\u6216\u8fb9\uff0c\u66f4\u65b0\u548c\u5220\u9664\u64cd\u4f5c\u4f1a\u5728v0.2\u4e00\u8d77\u53d1\u5e03\u3002 INSERT UPDATE REMOVE TAG \u221a v0.2 v0.2 EDGE \u221a v0.2 v0.2 \u63d2\u5165\u8282\u70b9\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u8282\u70b9\u7684\u6807\u7b7e\u7c7b\u578b\uff0c\u4ee5\u53ca\u8282\u70b9id\uff08\u4e5f\u53ef\u901a\u8fc7hash\u81ea\u52a8\u751f\u6210\uff09\u3002 \u4e3e\u4f8b\u5982\u4e0b\uff1a INSERT VERTEX player(name, age) VALUES 100:(\"Stoudemire\", 36); -- \u624b\u52a8\u6307\u5b9a\u8282\u70b9ID INSERT VERTEX player(name, age) VALUES hash(\"Jummy\"):(\"Jummy\", 0); -- hash\u751f\u6210\u8282\u70b9ID INSERT VERTEX player(name, age) VALUES 101:(\"Vicenta\", 0); INSERT VERTEX team(name) VALUES 201:(\"Magic\"); INSERT EDGE like (likeness) VALUES 100 -> 101:(90.02); INSERT EDGE like (likeness) VALUES 101 -> 102:(10.00); INSERT EDGE serve (start_year, end_year) VALUES 101 -> 201:(2002, 2010); \u56fe\u67e5\u8be2 \u00b6 \u5f53\u524d\u6700\u5e38\u7528\u7684\u56fe\u67e5\u8be2/\u904d\u5386\u7b97\u5b50\u662fGO\uff0c\u8bed\u4e49\u662f\u4ece\u67d0\u4e2a\u70b9\u5f00\u59cb\uff0c\u67e5\u8be21\u5ea6\u8fd1\u90bb\u3002\u901a\u8fc7\u7ed3\u5408\u7ba1\u9053 | \uff0c\u8fc7\u6ee4WHERE\u3001YIELD\u7b49\u6761\u4ef6\uff0c\u5b9e\u73b0\u591a\u8df3\u590d\u6742\u67e5\u8be2\u3002\u4e3e\u4f8b\u5982\u4e0b\uff1a GO FROM 100 OVER like; -- \u4ece\u70b9100\u5f00\u59cb\uff0c\u6cbflike\u7c7b\u578b\u7684\u8fb9\u67e5\u8be21\u8df3 GO 2 STEPS FROM 100 OVER like; -- \u4ece\u70b9100\u5f00\u59cb\uff0c\u6cbflike\u7c7b\u578b\u7684\u8fb9\u67e5\u8be22\u8df3 GO FROM 100 OVER like WHERE likeness >= 0; -- \u4ece\u70b9100\u5f00\u59cb\uff0c\u6cbflike\u7c7b\u578b\u7684\u8fb9\uff0c\u8fc7\u6ee4\u8fb9\u4e0a\u5c5e\u6027likeness GO FROM 100 OVER like WHERE $$.player.name==\"Vicenta\"; -- \u8fc7\u6ee4\u8981\u6c42\uff1a\u7ec8\u70b9\u8282\u70b9name\u5b57\u6bb5\u4e3a\u201cVicenta\u201d GO FROM 101 OVER serve YIELD serve._src AS src_id, $^.player.age AS src_propAge, serve._dst AS dst_id, $$.team.name AS dst_propName; -- \u8fd4\u56de\u8d77\u70b9id\uff08\u91cd\u547d\u540d\u4e3asrcid\uff09\uff0c\u8d77\u70b9\u5c5e\u6027age\uff0c\u7ec8\u70b9id\uff0c\u7ec8\u70b9\u5c5e\u6027name GO FROM 100 OVER like | GO FROM $-.id OVER serve; -- \u4ece\u70b9100\u5f00\u59cb1\u8df3\uff0c\u5176\u8f93\u51fa\u4f5c\u4e3a\u4e0b\u4e2aquery\u7684\u8f93\u5165\uff08\u7ba1\u9053\uff09","title":"\u67e5\u8be2\u8bed\u8a00nGQL"},{"location":"cn-doc/cn-nGQL-tutorial/#ngql","text":"nGQL\u662fNebula Graph\u7684\u67e5\u8be2\u8bed\u8a00\uff0c\u53ef\u4f9b\u7528\u6237\u5b58\u50a8\u548c\u68c0\u7d22\u56fe\u6570\u636e\u3002nGQL\u4e3a\u7c7bSQL\u5f0f\u8bed\u8a00\uff0c\u6613\u5b66\u6613\u7528\uff0c\u4e14\u53ef\u6ee1\u8db3\u590d\u6742\u4e1a\u52a1\u9700\u6c42\u3002","title":"\u67e5\u8be2\u8bed\u8a00nGQL"},{"location":"cn-doc/cn-nGQL-tutorial/#ngql_1","text":"Nebula Graph\u81f4\u529b\u4e8e\u6253\u9020\u4e13\u4e3a\u56fe\u6570\u636e\u4f7f\u7528\u7684\u67e5\u8be2\u8bed\u8a00\u2014\u2014nGQL\u3002\u4e0e\u5176\u4ed6\u56fe\u6570\u636e\u5e93\u67e5\u8be2\u8bed\u8a00\u76f8\u6bd4\uff0cnGQL\u5177\u6709\u4ee5\u4e0b\u7279\u70b9\uff1a \u58f0\u660e\u5f0f\uff1a\u4e0e\u547d\u4ee4\u5f0f\u8bed\u8a00\u4e0d\u540c\uff0cnGQL\u662f\u58f0\u660e\u5f0f\u8bed\u8a00\uff0c\u53ea\u9700\u76f4\u63a5\u58f0\u660e\u67e5\u8be2\u6a21\u5f0f\u800c\u65e0\u9700\u544a\u77e5\u5982\u4f55\u67e5\u8be2\u3002 \u8868\u73b0\u529b\u5f3a\uff1anGQL\u91c7\u7528ASCII\u8bed\u6cd5\u98ce\u683c\uff0c\u5176\u67e5\u8be2\u8bed\u8a00\u6240\u8868\u8fbe\u7684\u771f\u5b9e\u542b\u4e49\u6613\u4e8e\u7406\u89e3\u3002","title":"nGQL\u7684\u5173\u952e\u5c5e\u6027"},{"location":"cn-doc/cn-nGQL-tutorial/#ngql_2","text":"nGQL\u5173\u952e\u5b57\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u4f46\u662f\u5efa\u8bae\u5c06\u5176\u5168\u90e8\u5927\u5199\uff0c\u4ee5\u4fbf\u4e8e\u9605\u8bfb\u3002\u4e3a\u5e2e\u52a9\u60a8\u5feb\u901f\u4e86\u89e3nGQL\uff0c\u6211\u4eec\u521b\u5efa\u4e86\u4e00\u4e2a\u540d\u4e3a myspace_test \u7684\u7b80\u5355\u7684\u56fe\u6570\u636e\uff0c\u5176\u4e2d\u5305\u542b4\u4e2a\u8282\u70b9\u548c3\u6761\u8fb9\u3002","title":"nGQL\u8bed\u6cd5"},{"location":"cn-doc/cn-nGQL-tutorial/#_1","text":"\u6dfb\u52a0hosts \u6dfb\u52a0\u4e00\u4e2ahost ADD HOSTS $storage_ip:$storage_port \u6dfb\u52a0\u591a\u4e2ahosts ADD HOSTS $storage_ip1:$storage_port1, $storage_ip2:$storage_port2,... \u6ce8\u610f\uff1a \u5c06\u6b64\u5904\u7684$storage_ip\u548c$storage_port\u66ff\u6362\u4e3anebula-storaged.conf\u6587\u4ef6\u4e2d\u7684local_ip\u548cport\u7aef\u53e3\u53f7\uff0chosts\u4e4b\u95f4\u9700\u7528\u9017\u53f7\u9694\u5f00\uff0c\u4f8b\u5982\uff1a ADD HOSTS 192.168.8.5:65500 \u663e\u793ahosts SHOW HOSTS ============================= | Ip | Port | Status | ============================= | 192.168.8.5 | 65500 | online | ----------------------- | 192.168.8.1 | 65500 | offline | ----------------------- \u79fb\u9664hosts \u79fb\u9664\u4e00\u4e2ahost REMOVE HOSTS $storage_ip:$storage_port \u79fb\u9664\u591a\u4e2ahosts REMOVE HOSTS $storage_ip1:$storage_port1, $storage_ip2:$storage_port2,... \u6ce8\u610f\uff1a \u4f7f\u7528\u9017\u53f7\u5c06hosts\u9694\u5f00\u3002","title":"\u96c6\u7fa4\u7ba1\u7406"},{"location":"cn-doc/cn-nGQL-tutorial/#_2","text":"SPACE\u662f\u7269\u7406\u9694\u79bb\u7684\u7a7a\u95f4\uff0c\u4f5c\u7528\u7c7b\u4f3c\u4e8eMySQL\u4e2d\u7684\u6570\u636e\u5e93\u3002 CREATE DROP USE DESCRIBE SHOW SPACE \u221a \u221a \u221a v0.2 \u221a \u589e\u52a0CREATE\u3001\u5220\u9664DROP\u3001\u4f7f\u7528USE\u3001\u5217\u4e3eSHOW\uff0c\u63cf\u8ff0DESCRIBE\u3002 \u4e3e\u4f8b\u5982\u4e0b\uff1a \u5217\u4e3e\u51fa\u5f53\u524d\u6240\u6709\u7684space\uff1a SHOW SPACES ================ | Name | ================ | myspace_test | ---------------- \u5220\u9664space DROP SPACE myspace_test \u6ce8\u610f\uff1a \u5f53\u524d\u7248\u672cDROP SPACE\u540e\uff0c\u5176\u4e2d\u7684\u6240\u6709\u6570\u636e\u4f1a\u540c\u65f6\u5220\u9664\uff0c\u4e14\u5c1a\u672a\u652f\u6301\u6062\u590d\u529f\u80fd \u521b\u5efaspace CREATE SPACE myspace_test(partition_num=10, replica_factor=1) \u6ce8\u610f\uff1a partition_num\u7528\u4e8e\u63a7\u5236\u6570\u636e\u5206\u7247\u6570\uff1breplica_factor\u7528\u4e8e\u63a7\u5236raft\u526f\u672c\u6570\u91cf\uff0c\u5355\u673a\u8bbe\u4e3a1 \u6307\u5b9a\u4f7f\u7528space USE myspace_test","title":"\u56fe\u7ba1\u7406"},{"location":"cn-doc/cn-nGQL-tutorial/#schema","text":"Schema\u7528\u4e8e\u7ba1\u7406\u8282\u70b9\u548c\u8fb9\u7684\u5c5e\u6027\uff08\u6bcf\u4e2a\u5b57\u6bb5\u7684\u547d\u540d\u548c\u7c7b\u578b\uff09\uff0cnebula\u4e2d\u4e00\u4e2a\u8282\u70b9\u53ef\u88ab\u6253\u5361\u591a\u4e2a\u6807\u7b7e\u3002 CREATE DROP ALTER DESCRIBE SHOW TTL LOAD DUMP TAG \u221a v0.2 v0.2 \u221a \u221a v0.3 v0.2 v0.3 EDGE \u221a v0.2 v0.2 \u221a \u221a v0.3 v0.2 v0.3 CREATE,DROP,ALTER,DESCRIBE\u5206\u522b\u5bf9\u5e94\u4e00\u4e2aSCHEMA\u7684\u65b0\u5efa\u3001\u5220\u9664\u3001\u4fee\u6539\u548c\u67e5\u770b \u4e3e\u4f8b\u5982\u4e0b\uff1a CREATE TAG player(name string, age int); DESCRIBE TAG player; CREATE TAG team(name string); DESCRIBE TAG team; CREATE EDGE serve (start_year int, end_year int); DESCRIBE EDGE serve; CREATE EDGE like (likeness double); SHOW TAGS; SHOW EDGES","title":"Schema\u7ba1\u7406"},{"location":"cn-doc/cn-nGQL-tutorial/#_3","text":"INSERT \u7528\u4e8e\u63d2\u5165\u65b0\u7684\u8282\u70b9\u6216\u8fb9\uff0c\u66f4\u65b0\u548c\u5220\u9664\u64cd\u4f5c\u4f1a\u5728v0.2\u4e00\u8d77\u53d1\u5e03\u3002 INSERT UPDATE REMOVE TAG \u221a v0.2 v0.2 EDGE \u221a v0.2 v0.2 \u63d2\u5165\u8282\u70b9\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u8282\u70b9\u7684\u6807\u7b7e\u7c7b\u578b\uff0c\u4ee5\u53ca\u8282\u70b9id\uff08\u4e5f\u53ef\u901a\u8fc7hash\u81ea\u52a8\u751f\u6210\uff09\u3002 \u4e3e\u4f8b\u5982\u4e0b\uff1a INSERT VERTEX player(name, age) VALUES 100:(\"Stoudemire\", 36); -- \u624b\u52a8\u6307\u5b9a\u8282\u70b9ID INSERT VERTEX player(name, age) VALUES hash(\"Jummy\"):(\"Jummy\", 0); -- hash\u751f\u6210\u8282\u70b9ID INSERT VERTEX player(name, age) VALUES 101:(\"Vicenta\", 0); INSERT VERTEX team(name) VALUES 201:(\"Magic\"); INSERT EDGE like (likeness) VALUES 100 -> 101:(90.02); INSERT EDGE like (likeness) VALUES 101 -> 102:(10.00); INSERT EDGE serve (start_year, end_year) VALUES 101 -> 201:(2002, 2010);","title":"\u6570\u636e\u64cd\u4f5c"},{"location":"cn-doc/cn-nGQL-tutorial/#_4","text":"\u5f53\u524d\u6700\u5e38\u7528\u7684\u56fe\u67e5\u8be2/\u904d\u5386\u7b97\u5b50\u662fGO\uff0c\u8bed\u4e49\u662f\u4ece\u67d0\u4e2a\u70b9\u5f00\u59cb\uff0c\u67e5\u8be21\u5ea6\u8fd1\u90bb\u3002\u901a\u8fc7\u7ed3\u5408\u7ba1\u9053 | \uff0c\u8fc7\u6ee4WHERE\u3001YIELD\u7b49\u6761\u4ef6\uff0c\u5b9e\u73b0\u591a\u8df3\u590d\u6742\u67e5\u8be2\u3002\u4e3e\u4f8b\u5982\u4e0b\uff1a GO FROM 100 OVER like; -- \u4ece\u70b9100\u5f00\u59cb\uff0c\u6cbflike\u7c7b\u578b\u7684\u8fb9\u67e5\u8be21\u8df3 GO 2 STEPS FROM 100 OVER like; -- \u4ece\u70b9100\u5f00\u59cb\uff0c\u6cbflike\u7c7b\u578b\u7684\u8fb9\u67e5\u8be22\u8df3 GO FROM 100 OVER like WHERE likeness >= 0; -- \u4ece\u70b9100\u5f00\u59cb\uff0c\u6cbflike\u7c7b\u578b\u7684\u8fb9\uff0c\u8fc7\u6ee4\u8fb9\u4e0a\u5c5e\u6027likeness GO FROM 100 OVER like WHERE $$.player.name==\"Vicenta\"; -- \u8fc7\u6ee4\u8981\u6c42\uff1a\u7ec8\u70b9\u8282\u70b9name\u5b57\u6bb5\u4e3a\u201cVicenta\u201d GO FROM 101 OVER serve YIELD serve._src AS src_id, $^.player.age AS src_propAge, serve._dst AS dst_id, $$.team.name AS dst_propName; -- \u8fd4\u56de\u8d77\u70b9id\uff08\u91cd\u547d\u540d\u4e3asrcid\uff09\uff0c\u8d77\u70b9\u5c5e\u6027age\uff0c\u7ec8\u70b9id\uff0c\u7ec8\u70b9\u5c5e\u6027name GO FROM 100 OVER like | GO FROM $-.id OVER serve; -- \u4ece\u70b9100\u5f00\u59cb1\u8df3\uff0c\u5176\u8f93\u51fa\u4f5c\u4e3a\u4e0b\u4e2aquery\u7684\u8f93\u5165\uff08\u7ba1\u9053\uff09","title":"\u56fe\u67e5\u8be2"},{"location":"cn-manual-doc/Language_Structure/Comment_Syntax/","text":"Nebula\u652f\u6301\u56db\u79cd\u6ce8\u91ca\u65b9\u5f0f\uff1a * \u5728\u884c\u672b\u52a0 # * \u5728\u884c\u672b\u52a0 -- * \u5728\u884c\u672b\u52a0 //\uff0c\u4e0eC\u8bed\u8a00\u7c7b\u4f3c * \u6dfb\u52a0 /* */ \u7b26\u53f7\uff0c\u5176\u5f00\u59cb\u548c\u7ed3\u675f\u5e8f\u5217\u65e0\u9700\u5728\u540c\u4e00\u884c\uff0c\u56e0\u6b64\u6b64\u7c7b\u6ce8\u91ca\u65b9\u5f0f\u652f\u6301\u6362\u884c\u3002 \u5c1a\u4e0d\u652f\u6301\u5d4c\u5957\u6ce8\u91ca\u3002 \u6ce8\u91ca\u65b9\u5f0f\u793a\u4f8b\u5982\u4e0b\uff1a nebula> -- Do nothing this line nebula> YIELD 1+1 # \u6ce8\u91ca\u5728\u672c\u884c\u672b\u7ed3\u675f nebula> YIELD 1+1 -- \u6ce8\u91ca\u5728\u672c\u884c\u672b\u7ed3\u675f nebula> YIELD 1+1 // \u6ce8\u91ca\u5728\u672c\u884c\u672b\u7ed3\u675f nebula> YIELD 1 /* \u6b64\u4e3a\u884c\u5185\u6ce8\u91ca */ + 1 nebula> YIELD 11 + \\ /* \u591a\u884c\u6ce8\u91ca\u4f7f\u7528 \\ \u9694\u5f00 \\ */ 12 \u884c\u5185 \\ \u8868\u793a\u6362\u884c\u7b26\u3002","title":"Comment syntax"},{"location":"cn-manual-doc/Language_Structure/Expression/","text":"","title":"Expression"},{"location":"cn-manual-doc/Language_Structure/Identifier_Case_Sensitivity/","text":"In Nebula Graph, Identifiers are case-sensitive. Nebula Graph\u6807\u8bc6\u7b26\u4e3a\u5927\u5c0f\u5199\u654f\u611f\uff0c\u56e0\u6b64\u4e0b\u65b9\u793a\u4f8b\u8bed\u53e5\u65e0\u6548\uff0c\u201cmy_space\u201d\u548c\u201cMY_SPACE\u201d\u4e3a\u4e24\u4e2a\u4e0d\u540c\u7684space\u3002 nebula> CREATE SPACE my_space; nebula> use MY_SPACE; \u4f46\u662f\u5173\u952e\u8bcd\u548c\u4fdd\u7559\u5173\u952e\u8bcd\u4e3a\u5927\u5c0f\u5199\u4e0d\u654f\u611f\uff0c\u56e0\u6b64\u5982\u4e0b\u8bed\u53e5\u662f\u7b49\u4ef7\u7684\uff1a nebula> show spaces; nebula> SHOW SPACES; nebula> SHOW spaces; nebula> show spaces;","title":"Identifier"},{"location":"cn-manual-doc/Language_Structure/Keywords_and_Reserved_Words/","text":"","title":"Keywords and Reserved Words"},{"location":"cn-manual-doc/Language_Structure/Property_Reference/","text":"\u5c5e\u6027\u5f15\u7528 \u00b6 WHERE \u548c YIELD \u53ef\u5f15\u7528\u8282\u70b9\u6216\u8fb9\u7684\u5c5e\u6027\u3002 \u5f15\u7528\u70b9\u5c5e\u6027 \u00b6 \u5f15\u7528\u8d77\u70b9\u5c5e\u6027 \u00b6 $^.tag_name.prop_name \u5176\u4e2d\u7b26\u53f7 $ ^ \u7528\u4e8e\u83b7\u53d6\u8d77\u70b9\u5c5e\u6027\uff0c tag_name \u8868\u793a\u8d77\u70b9\u7684 \u6807\u7b7e \uff0c prop_name \u4e3a\u6307\u5b9a\u5c5e\u6027\u7684\u540d\u79f0\u3002 \u5f15\u7528\u7ec8\u70b9\u5c5e\u6027 \u00b6 $$.tag_name.prop_name \u5176\u4e2d\u7b26\u53f7 $$ \u7528\u4e8e\u83b7\u53d6\u7ec8\u70b9\u5c5e\u6027\uff0c tag_name \u8868\u793a\u7ec8\u70b9\u7684 \u6807\u7b7e \uff0c prop_name \u4e3a\u6307\u5b9a\u5c5e\u6027\u7684\u540d\u79f0\u3002 \u793a\u4f8b \u00b6 GO FROM 1 YIELD $^.start.name AS startName, $$.end.Age AS endAge \u83b7\u53d6\u8d77\u70b9\u7684\u5c5e\u6027\u540d\u79f0\u548c\u7ec8\u70b9\u7684\u5c5e\u6027\u5e74\u9f84\u3002 \u5f15\u7528\u8fb9 \u00b6 \u5f15\u7528\u8fb9\u5c5e\u6027 \u00b6 \u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u83b7\u53d6\u8fb9\u5c5e\u6027\uff1a edge_type.edge_prop \u6b64\u5904\uff0c edge_type \u4e3a\u8fb9\u7684\u7c7b\u578b\uff0c edge_prop \u4e3a\u5c5e\u6027\uff0c\u4f8b\u5982\uff1a GO FROM 1 OVER e1 YIELD e1.prop1 \u5f15\u7528\u5185\u7f6e\u5c5e\u6027 \u00b6 \u4e00\u6761\u8fb9\u6709\u56db\u79cd\u5185\u7f6e\u5c5e\u6027\uff1a _src: \u8fb9\u8d77\u70b9id _dst: \u8fb9\u7ec8\u70b9id _type: \u8fb9\u7c7b\u578b _rank: \u8fb9\u6743\u91cd \u83b7\u53d6\u8d77\u70b9\u548c\u7ec8\u70b9id\u53ef\u901a\u8fc7 _src \u548c _dst \u83b7\u53d6\uff0c\u8fd9\u5728\u663e\u793a\u56fe\u8def\u5f84\u65f6\u7ecf\u5e38\u4f1a\u7528\u5230\u3002 \u4f8b\u5982\uff1a GO FROM 1 OVER e1 YIELD e1._src as startVID /* which is, 1 */, e1._dst as endVID \u8be5\u8bed\u53e5\u901a\u8fc7\u5f15\u7528 e1._src \u4f5c\u4e3a\u8d77\u59cb\u9876\u70b9id\uff08\u5f53\u7136\uff0c\u8fd9\u662f 1 \uff09\u548c e1._dst \u4f5c\u4e3a\u7ed3\u675f\u9876\u70b9\uff0c\u8fd4\u56de 1 \u5728\u8fb9\u7f18\u7c7b\u578b e1 \u4e0a\u7684\u6240\u6709\u90bb\u57df\u3002 ID\u3002 \u4e0a\u8ff0\u8bed\u53e5\u8fd4\u56de\u70b9 1 \u6cbf\u8fb9 e1 \u7684\u6240\u6709\u8fd1\u90bb\uff0c\u5176\u4e2d e1._src \u8fd4\u56de\u8d77\u70b9ID\uff0c\u6b64\u5904\u4e3a1\uff0c e1._dst \u8fd4\u56de\u7ec8\u70b9ID\u3002","title":"Property reference"},{"location":"cn-manual-doc/Language_Structure/Property_Reference/#_1","text":"WHERE \u548c YIELD \u53ef\u5f15\u7528\u8282\u70b9\u6216\u8fb9\u7684\u5c5e\u6027\u3002","title":"\u5c5e\u6027\u5f15\u7528"},{"location":"cn-manual-doc/Language_Structure/Property_Reference/#_2","text":"","title":"\u5f15\u7528\u70b9\u5c5e\u6027"},{"location":"cn-manual-doc/Language_Structure/Property_Reference/#_3","text":"$^.tag_name.prop_name \u5176\u4e2d\u7b26\u53f7 $ ^ \u7528\u4e8e\u83b7\u53d6\u8d77\u70b9\u5c5e\u6027\uff0c tag_name \u8868\u793a\u8d77\u70b9\u7684 \u6807\u7b7e \uff0c prop_name \u4e3a\u6307\u5b9a\u5c5e\u6027\u7684\u540d\u79f0\u3002","title":"\u5f15\u7528\u8d77\u70b9\u5c5e\u6027"},{"location":"cn-manual-doc/Language_Structure/Property_Reference/#_4","text":"$$.tag_name.prop_name \u5176\u4e2d\u7b26\u53f7 $$ \u7528\u4e8e\u83b7\u53d6\u7ec8\u70b9\u5c5e\u6027\uff0c tag_name \u8868\u793a\u7ec8\u70b9\u7684 \u6807\u7b7e \uff0c prop_name \u4e3a\u6307\u5b9a\u5c5e\u6027\u7684\u540d\u79f0\u3002","title":"\u5f15\u7528\u7ec8\u70b9\u5c5e\u6027"},{"location":"cn-manual-doc/Language_Structure/Property_Reference/#_5","text":"GO FROM 1 YIELD $^.start.name AS startName, $$.end.Age AS endAge \u83b7\u53d6\u8d77\u70b9\u7684\u5c5e\u6027\u540d\u79f0\u548c\u7ec8\u70b9\u7684\u5c5e\u6027\u5e74\u9f84\u3002","title":"\u793a\u4f8b"},{"location":"cn-manual-doc/Language_Structure/Property_Reference/#_6","text":"","title":"\u5f15\u7528\u8fb9"},{"location":"cn-manual-doc/Language_Structure/Property_Reference/#_7","text":"\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u83b7\u53d6\u8fb9\u5c5e\u6027\uff1a edge_type.edge_prop \u6b64\u5904\uff0c edge_type \u4e3a\u8fb9\u7684\u7c7b\u578b\uff0c edge_prop \u4e3a\u5c5e\u6027\uff0c\u4f8b\u5982\uff1a GO FROM 1 OVER e1 YIELD e1.prop1","title":"\u5f15\u7528\u8fb9\u5c5e\u6027"},{"location":"cn-manual-doc/Language_Structure/Property_Reference/#_8","text":"\u4e00\u6761\u8fb9\u6709\u56db\u79cd\u5185\u7f6e\u5c5e\u6027\uff1a _src: \u8fb9\u8d77\u70b9id _dst: \u8fb9\u7ec8\u70b9id _type: \u8fb9\u7c7b\u578b _rank: \u8fb9\u6743\u91cd \u83b7\u53d6\u8d77\u70b9\u548c\u7ec8\u70b9id\u53ef\u901a\u8fc7 _src \u548c _dst \u83b7\u53d6\uff0c\u8fd9\u5728\u663e\u793a\u56fe\u8def\u5f84\u65f6\u7ecf\u5e38\u4f1a\u7528\u5230\u3002 \u4f8b\u5982\uff1a GO FROM 1 OVER e1 YIELD e1._src as startVID /* which is, 1 */, e1._dst as endVID \u8be5\u8bed\u53e5\u901a\u8fc7\u5f15\u7528 e1._src \u4f5c\u4e3a\u8d77\u59cb\u9876\u70b9id\uff08\u5f53\u7136\uff0c\u8fd9\u662f 1 \uff09\u548c e1._dst \u4f5c\u4e3a\u7ed3\u675f\u9876\u70b9\uff0c\u8fd4\u56de 1 \u5728\u8fb9\u7f18\u7c7b\u578b e1 \u4e0a\u7684\u6240\u6709\u90bb\u57df\u3002 ID\u3002 \u4e0a\u8ff0\u8bed\u53e5\u8fd4\u56de\u70b9 1 \u6cbf\u8fb9 e1 \u7684\u6240\u6709\u8fd1\u90bb\uff0c\u5176\u4e2d e1._src \u8fd4\u56de\u8d77\u70b9ID\uff0c\u6b64\u5904\u4e3a1\uff0c e1._dst \u8fd4\u56de\u7ec8\u70b9ID\u3002","title":"\u5f15\u7528\u5185\u7f6e\u5c5e\u6027"},{"location":"cn-manual-doc/Language_Structure/Schema_Object_Names/","text":"Certain objects within Nebula graph, including space, tag, edge, alias, customer variables and other object names are referred as identifiers. This section describes the rules for identifiers in Nebula Graph: Nebula Graph\u5c06\u4ee5\u4e0b\u5bf9\u8c61\u540d\u79f0\u4f5c\u4e3a\u6807\u8bc6\u7b26\uff0c\u5305\u62ec\u56fe\u7a7a\u95f4\uff0c\u6807\u7b7e\uff0c\u8fb9\uff0c\u522b\u540d\uff0c\u81ea\u5b9a\u4e49\u53d8\u91cf\u7b49\u3002\u672c\u8282\u4ecb\u7ecdNebula Graph\u6807\u8bc6\u7b26\u89c4\u5219\uff1a * \u6807\u8bc6\u7b26\u4e2d\u5141\u8bb8\u7684\u5b57\u7b26\uff1a ASCII: [_0-9,a-z,A-Z,_] (\u57fa\u672c\u62c9\u4e01\u5b57\u6bcd\uff0c\u6570\u5b570-9\uff0c\u4e0b\u5212\u7ebf)\uff0c\u4e0d\u652f\u6301\u5176\u4ed6\u6807\u70b9\u5b57\u7b26\u3002 \u6240\u6709\u6807\u8bc6\u7b26\u5fc5\u987b\u4ee5\u5b57\u6bcd\u8868\u4e2d\u7684\u5b57\u6bcd\u5f00\u5934\u3002 \u6807\u8bc6\u7b26\u533a\u5206\u5927\u5c0f\u5199\u3002 \u4e0d\u53ef\u4f7f\u7528\u5173\u952e\u5b57\u6216\u4fdd\u7559\u5173\u952e\u5b57\u505a\u6807\u8bc6\u7b26\u3002","title":"Schema object names"},{"location":"cn-manual-doc/Language_Structure/Statement_Composition/","text":"\u7ec4\u5408\u8bed\u53e5\uff08\u6216\u5b50\u67e5\u8be2\uff09\u7684\u65b9\u6cd5\u6709\u4e24\u79cd\uff1a * \u5c06\u591a\u4e2a\u8bed\u53e5\u653e\u5728\u4e00\u4e2a\u8bed\u53e5\u4e2d\u8fdb\u884c\u6279\u5904\u7406\uff0c\u4ee5\u5206\u53f7\uff08;\uff09\u9694\u5f00\uff0c\u6700\u540e\u4e00\u4e2a\u8bed\u53e5\u7684\u7ed3\u679c\u5c06\u4f5c\u4e3a\u6279\u5904\u7406\u7684\u7ed3\u679c\u8fd4\u56de\u3002 \u5c06\u591a\u4e2a\u8bed\u53e5\u901a\u8fc7\u8fd0\u7b97\u7b26\uff08|\uff09\u8fde\u63a5\u5728\u4e00\u8d77\uff0c\u7c7b\u4f3c\u4e8eshell\u811a\u672c\u4e2d\u7684\u7ba1\u9053\u3002\u524d\u4e00\u4e2a\u8bed\u53e5\u5f97\u5230\u7684\u7ed3\u679c\u53ef\u4ee5\u91cd\u5b9a\u5411\u5230\u4e0b\u4e00\u4e2a\u8bed\u53e5\u4f5c\u4e3a\u8f93\u5165\u3002 \u6ce8\u610f\u590d\u5408\u8bed\u53e5\u975e \u4e8b\u52a1\u6027 \u67e5\u8be2\u3002 \u4f8b\u5982\uff0c\u7531\u4e09\u4e2a\u5b50\u67e5\u8be2\u7ec4\u6210\u7684\u8bed\u53e5\uff1aA | B | C\uff0c\u5176\u4e2dA\u662f\u8bfb\u64cd\u4f5c\uff0cB\u662f\u8ba1\u7b97\uff0cC\u662f\u5199\u64cd\u4f5c\u3002 \u5982\u679c\u4efb\u4f55\u90e8\u5206\u5728\u6267\u884c\u4e2d\u5931\u8d25\uff0c\u6574\u4e2a\u7ed3\u679c\u5c06\u672a\u88ab\u5b9a\u4e49 - \u76ee\u524d\u5c1a\u4e0d\u652f\u6301\u8c03\u7528\u56de\u6eda - \u5199\u5165\u5185\u5bb9\u4f9d\u8d56\u4e8e\u67e5\u8be2\u4f18\u5316\u5668\u3002 \u793a\u4f8b \u00b6 \u5206\u53f7\u590d\u5408\u8bed\u53e5 SHOW TAGS; SHOW EDGES; -- \u4ec5\u5217\u51fa\u8fb9 INSERT VERTEX player(name, age) VALUES 100:(\"Tim Duncan\", 42); \\ INSERT VERTEX player(name, age) VALUES 101:(\"Tony Parker\", 36); \\ INSERT VERTEX player(name, age) VALUES 102:(\"LaMarcus Aldridge\", 33); /* \u901a\u8fc7\u590d\u5408\u8bed\u53e5\u63d2\u5165\u591a\u4e2a\u70b9*/ PIPE\u7ba1\u9053\u590d\u5408\u8bed\u53e5 GO FROM 201 OVER edge_serve | GO FROM $-.id OVER edge_fans | GO FROM $-.id ... \u5360\u4f4d\u7b26 $-.id \u83b7\u53d6\u7b2c\u4e00\u4e2a\u8bed\u53e5 GO FROM 201 OVER edge_serve \u8fd4\u56de\u7684\u7ed3\u679c\u3002","title":"Statement composition"},{"location":"cn-manual-doc/Language_Structure/Statement_Composition/#_1","text":"\u5206\u53f7\u590d\u5408\u8bed\u53e5 SHOW TAGS; SHOW EDGES; -- \u4ec5\u5217\u51fa\u8fb9 INSERT VERTEX player(name, age) VALUES 100:(\"Tim Duncan\", 42); \\ INSERT VERTEX player(name, age) VALUES 101:(\"Tony Parker\", 36); \\ INSERT VERTEX player(name, age) VALUES 102:(\"LaMarcus Aldridge\", 33); /* \u901a\u8fc7\u590d\u5408\u8bed\u53e5\u63d2\u5165\u591a\u4e2a\u70b9*/ PIPE\u7ba1\u9053\u590d\u5408\u8bed\u53e5 GO FROM 201 OVER edge_serve | GO FROM $-.id OVER edge_fans | GO FROM $-.id ... \u5360\u4f4d\u7b26 $-.id \u83b7\u53d6\u7b2c\u4e00\u4e2a\u8bed\u53e5 GO FROM 201 OVER edge_serve \u8fd4\u56de\u7684\u7ed3\u679c\u3002","title":"\u793a\u4f8b"},{"location":"cn-manual-doc/Language_Structure/User-Defined_Variables/","text":"","title":"User Defined Variables"},{"location":"cn-manual-doc/cn_Statement_Syntax/DATA_Manipulation_Statements/Go_Syntax/","text":"GO \u662fNebula\u4e2d\u6700\u5e38\u7528\u7684\u5173\u952e\u5b57\uff0c\u8868\u793a\u4ee5\u6307\u5b9a\u8fc7\u6ee4\u6761\u4ef6\uff08\u5982 WHERE \uff09\u904d\u5386\u56fe\u6570\u636e\u5e76\u83b7\u53d6\u70b9\u548c\u8fb9\u7684\u5c5e\u6027\uff0c \u4ee5\u6307\u5b9a\u987a\u5e8f\uff08 ORDER BY ASC | DESC \uff09\u8fd4\u56de\u6307\u5b9a\u6570\u76ee\uff08 LIMIT \uff09\u7ed3\u679c\u3002 GO \u548c FIND \u7684\u7528\u6cd5\u4e0eSQL\u4e2d\u7684 SELECT \u7c7b\u4f3c\uff0c\u91cd\u8981\u533a\u522b\u662f GO \u5fc5\u987b\u4ece\u904d\u5386\u4e00\u7cfb\u5217\u7684\u8282\u70b9\u5f00\u59cb\u3002 \u8bf7\u53c2\u8003 FIND \u7684\u7528\u6cd5\uff0c\u5b83\u5bf9\u5e94\u4e8eSQL\u4e2d\u7684 SELECT \u3002 GO FROM <node_list> OVER <edge_type_list> WHERE (expression [ AND | OR expression ...]) YIELD | YIELDS [DISTINCT] <return_list> <node_list> | vid [, vid ...] | $-.id <edge_type_list> edge_type [, edge_type ...] <return_list> <col_name> [AS <col_alias>] [, <col_name> [AS <col_alias>] ...] \u4e3a\u9017\u53f7\u9694\u5f00\u7684\u8282\u70b9id\uff0c\u6216\u7279\u6b8a\u5360\u4f4d\u7b26 $-.id (\u53c2\u770b PIPE \u7528\u6cd5)\u3002 \u4e3a\u56fe\u904d\u5386\u8fd4\u56de\u7684\u8fb9\u7c7b\u578b\u5217\u8868\u3002 WHERE \u6307\u5b9a\u88ab\u7b5b\u9009\u7684\u903b\u8f91\u6761\u4ef6\uff0cWHERE\u53ef\u7528\u4e8e\u8d77\u70b9\uff0c\u8fb9\u53ca\u7ec8\u70b9\uff0c\u540c\u6837\u652f\u6301\u903b\u8f91\u5173\u952e\u8bcd AND\uff0cOR\uff0cNOT\uff0c\u8be6\u60c5\u53c2\u89c1WHERE\u7684\u7528\u6cd5\u3002 YIELD [DISTINCT] \u4ee5\u5217\u7684\u5f62\u5f0f\u8fd4\u56de\u7ed3\u679c\uff0c\u5e76\u53ef\u5bf9\u5217\u8fdb\u884c\u91cd\u547d\u540d\u3002\u8be6\u60c5\u53c2\u770b YIELD \u7528\u6cd5\u3002 DISTINCT \u7684\u7528\u6cd5\u4e0eSQL\u76f8\u540c\u3002 \u793a\u4f8b \u00b6 nebula> GO FROM 101 OVER serve \\ /* \u4ece\u70b9101\u51fa\u53d1\uff0c\u6cbf\u8fb9serve\uff0c\u627e\u5230\u70b9204\uff0c215 */ ======= | id | ======= | 204 | ------- | 215 | ------- nebula> GO FROM 101 OVER serve \\ WHERE serve.start_year > 1990 /* \u7b5b\u9009\u8fb9serve\u7684start_year\u5c5e\u6027 */ \\ YIELD $$.team.name AS team_name, /* \u76ee\u6807\u70b9team\u7684serve.start_year\u5c5e\u6027 serve.start_year */ ================================ | team_name | serve.start_year | ================================ | Spurs | 1999 | -------------------------------- | Hornets | 2018 | -------------------------------- nebula> GO FROM 100,102 OVER serve \\ WHERE serve.start_year > 1995 /* \u7b5b\u9009\u8fb9\u5c5e\u6027*/ \\ YIELD DISTINCT $$.team.name AS team_name, /* DISTINCT\u4e0eSQL\u7528\u6cd5\u76f8\u540c */ \\ serve.start_year, /* \u8fb9\u5c5e\u6027 */ \\ $^.player.name AS player_name /* \u8d77\u70b9(player)\u5c5e\u6027 */ ======================================================== | team_name | serve.start_year | player_name | ======================================================== | Trail Blazers | 2006 | LaMarcus Aldridge | -------------------------------------------------------- | Spurs | 2015 | LaMarcus Aldridge | -------------------------------------------------------- | Spurs | 1997 | Tim Duncan | -------------------------------------------------------- \u53c2\u8003 \u00b6","title":"Go syntax"},{"location":"cn-manual-doc/cn_Statement_Syntax/DATA_Manipulation_Statements/Go_Syntax/#_1","text":"nebula> GO FROM 101 OVER serve \\ /* \u4ece\u70b9101\u51fa\u53d1\uff0c\u6cbf\u8fb9serve\uff0c\u627e\u5230\u70b9204\uff0c215 */ ======= | id | ======= | 204 | ------- | 215 | ------- nebula> GO FROM 101 OVER serve \\ WHERE serve.start_year > 1990 /* \u7b5b\u9009\u8fb9serve\u7684start_year\u5c5e\u6027 */ \\ YIELD $$.team.name AS team_name, /* \u76ee\u6807\u70b9team\u7684serve.start_year\u5c5e\u6027 serve.start_year */ ================================ | team_name | serve.start_year | ================================ | Spurs | 1999 | -------------------------------- | Hornets | 2018 | -------------------------------- nebula> GO FROM 100,102 OVER serve \\ WHERE serve.start_year > 1995 /* \u7b5b\u9009\u8fb9\u5c5e\u6027*/ \\ YIELD DISTINCT $$.team.name AS team_name, /* DISTINCT\u4e0eSQL\u7528\u6cd5\u76f8\u540c */ \\ serve.start_year, /* \u8fb9\u5c5e\u6027 */ \\ $^.player.name AS player_name /* \u8d77\u70b9(player)\u5c5e\u6027 */ ======================================================== | team_name | serve.start_year | player_name | ======================================================== | Trail Blazers | 2006 | LaMarcus Aldridge | -------------------------------------------------------- | Spurs | 2015 | LaMarcus Aldridge | -------------------------------------------------------- | Spurs | 1997 | Tim Duncan | --------------------------------------------------------","title":"\u793a\u4f8b"},{"location":"cn-manual-doc/cn_Statement_Syntax/DATA_Manipulation_Statements/Go_Syntax/#_2","text":"","title":"\u53c2\u8003"},{"location":"cn-manual-doc/cn_Statement_Syntax/DATA_Manipulation_Statements/INSERT_EDGE_Syntax/","text":"INSERT EDGE edge_name ( <prop_name_list> ) {VALUES | VALUE} <src_vid> -> <dst_vid> : ( <prop_value_list> ) [, <src_vid> -> <dst_vid> : ( <prop_value_list> )] <prop_name_list>: [ <prop_name> [, <prop_name> ] ...] <prop_value_list>: [ <prop_value> [, <prop_value> ] ...] INSERT EDGE\u7528\u4e8e\u63d2\u5165\u4ece\u8d77\u70b9\uff08src_vid\uff09\u5230\u7ec8\u70b9\uff08dst_vid\uff09\u7684\u4e00\u6761\u8fb9\u3002 <edge_name> \u8868\u793a\u8fb9\u7c7b\u578b\uff0c\u5728\u8fdb\u884c INSERT EDGE \u64cd\u4f5c\u524d\u9700\u521b\u5efa\u597d\u3002 <prop_name_list> \u4e3a\u6307\u5b9a\u8fb9\u7684\u5c5e\u6027\u5217\u8868\u3002 <prop_value_list> \u987b\u6839\u636e \u5217\u51fa\u5c5e\u6027\uff0c\u5982\u65e0\u5339\u914d\u7c7b\u578b\uff0c\u5219\u8fd4\u56de\u9519\u8bef\u3002 \u76ee\u524d\u7248\u672c\u5c1a\u4e0d\u652f\u6301\u9ed8\u8ba4\u5c5e\u6027\u503c\u3002 \u793a\u4f8b \u00b6 # CREATE EDGE e1() -- \u521b\u5efa\u7a7a\u5c5e\u6027\u8fb9t1 INSERT EDGE e1 () VALUES 10->11:() -- \u63d2\u5165\u4e00\u6761\u4ece\u70b910\u5230\u70b911\u7684\u7a7a\u5c5e\u6027\u8fb9 # CREATE EDGE e2 (name string, age int) -- \u521b\u5efa\u6709\u4e24\u79cd\u5c5e\u6027\u7684\u8fb9e2 INSERT EDGE e2 (name, age) VALUES 11->13:(\"n1\", 1) -- \u63d2\u5165\u4e00\u6761\u4ece\u70b911\u5230\u70b913\u7684 \u6709\u4e24\u6761\u5c5e\u6027\u7684\u8fb9 INSERT EDGE e2 (name, age) VALUES \\ 12->13:(\"n1\", 1), 13->14(\"n2\", 2) -- \u63d2\u5165\u4e24\u6761\u8fb9 INSERT EDGE e2 (name, age) VALUES 11->13:(\"n1\", \"a13\") -- \u9519\u8bef\u64cd\u4f5c\uff0c\"a13\"\u4e0d\u662fint\u7c7b\u578b \u540c\u4e00\u6761\u8fb9\u53ef\u88ab\u591a\u6b21\u63d2\u5165\u6216\u5199\u5165\uff0c\u8bfb\u53d6\u65f6\u4ee5\u6700\u540e\u4e00\u6b21\u63d2\u5165\u4e3a\u51c6\u3002 -- \u4e3a\u63d2\u5165\u8fb9\u8d4b\u65b0\u503c insert edge with new version of values. INSERT EDGE e2 (name, age) VALUES 11->13:(\"n1\", 12) INSERT EDGE e2 (name, age) VALUES 11->13:(\"n1\", 13) INSERT EDGE e2 (name, age) VALUES 11->13:(\"n1\", 14) -- \u8bfb\u53d6\u6700\u540e\u63d2\u5165\u7684\u503c","title":"INSERT EDGE Syntax"},{"location":"cn-manual-doc/cn_Statement_Syntax/DATA_Manipulation_Statements/INSERT_EDGE_Syntax/#_1","text":"# CREATE EDGE e1() -- \u521b\u5efa\u7a7a\u5c5e\u6027\u8fb9t1 INSERT EDGE e1 () VALUES 10->11:() -- \u63d2\u5165\u4e00\u6761\u4ece\u70b910\u5230\u70b911\u7684\u7a7a\u5c5e\u6027\u8fb9 # CREATE EDGE e2 (name string, age int) -- \u521b\u5efa\u6709\u4e24\u79cd\u5c5e\u6027\u7684\u8fb9e2 INSERT EDGE e2 (name, age) VALUES 11->13:(\"n1\", 1) -- \u63d2\u5165\u4e00\u6761\u4ece\u70b911\u5230\u70b913\u7684 \u6709\u4e24\u6761\u5c5e\u6027\u7684\u8fb9 INSERT EDGE e2 (name, age) VALUES \\ 12->13:(\"n1\", 1), 13->14(\"n2\", 2) -- \u63d2\u5165\u4e24\u6761\u8fb9 INSERT EDGE e2 (name, age) VALUES 11->13:(\"n1\", \"a13\") -- \u9519\u8bef\u64cd\u4f5c\uff0c\"a13\"\u4e0d\u662fint\u7c7b\u578b \u540c\u4e00\u6761\u8fb9\u53ef\u88ab\u591a\u6b21\u63d2\u5165\u6216\u5199\u5165\uff0c\u8bfb\u53d6\u65f6\u4ee5\u6700\u540e\u4e00\u6b21\u63d2\u5165\u4e3a\u51c6\u3002 -- \u4e3a\u63d2\u5165\u8fb9\u8d4b\u65b0\u503c insert edge with new version of values. INSERT EDGE e2 (name, age) VALUES 11->13:(\"n1\", 12) INSERT EDGE e2 (name, age) VALUES 11->13:(\"n1\", 13) INSERT EDGE e2 (name, age) VALUES 11->13:(\"n1\", 14) -- \u8bfb\u53d6\u6700\u540e\u63d2\u5165\u7684\u503c","title":"\u793a\u4f8b"},{"location":"cn-manual-doc/cn_Statement_Syntax/DATA_Manipulation_Statements/INSERT_VERTEX_Syntax/","text":"INSERT VERTEX tag_name[, tag_name] (prop_name_list[, prop_name_list]) {VALUES | VALUE} vid: (prop_value_list[, prop_value_list]) prop_name_list: [prop_name [, prop_name] ...] prop_value_list: [prop_value [, prop_value] ...] INSERT VERTEX\u53ef\u5411Nebula\u63d2\u5165\u8282\u70b9\u3002 * tag_name \u8868\u793a\u6807\u7b7e\uff08\u8282\u70b9\u7c7b\u578b\uff09\uff0c\u5728\u8fdb\u884c INSERT VERTEX \u64cd\u4f5c\u524d\u9700\u521b\u5efa\u597d\u3002 * prop_name_list \u4e3a\u6307\u5b9a\u6807\u7b7e\u7684\u5c5e\u6027\u5217\u8868\u3002 * prop_value_list \u987b\u6839\u636e \u5217\u51fa\u5c5e\u6027\u6027\uff0c\u5982\u65e0\u5339\u914d\u7c7b\u578b\uff0c\u5219\u8fd4\u56de\u9519\u8bef\u3002 \u76ee\u524d\u7248\u672c\u5c1a\u4e0d\u652f\u6301\u9ed8\u8ba4\u5c5e\u6027\u503c\u3002 \u793a\u4f8b \u00b6 # CREATE TAG t1() -- \u521b\u5efa\u7a7a\u5c5e\u6027\u6807\u7b7et1 INSERT VERTEX t1 () VALUES 10:() -- \u63d2\u5165\u7a7a\u5c5e\u6027\u70b9100 # CREATE TAG t2 (name string, age int) -- \u521b\u5efa\u6709\u4e24\u79cd\u5c5e\u6027\u7684\u6807\u7b7et2 INSERT VERTEX t2 (name, age) VALUES 11:(\"n1\", 12) -- \u63d2\u5165\u6709\u4e24\u79cd\u5c5e\u6027\u7684\u70b911 INSERT VERTEX t2 (name, age) VALUES 12:(\"n1\", \"a13\") -- \u9519\u8bef\u64cd\u4f5c\uff0c\"a13\"\u4e0d\u662fint\u7c7b\u578b # CREATE TAG t1(i1 int) # CREATE TAG t2(s2 string) INSERT VERTEX t1 (i1), t2(s2) VALUES 21: (321, \"hello\") -- \u63d2\u5165\u6709\u4e24\u4e2a\u6807\u7b7e\u7684\u70b921 \u540c\u4e00\u8282\u70b9\u53ef\u88ab\u591a\u6b21\u63d2\u5165\u6216\u5199\u5165\uff0c\u8bfb\u53d6\u65f6\u4ee5\u6700\u540e\u4e00\u6b21\u63d2\u5165\u4e3a\u51c6\u3002 -- \u4e3a\u70b911\u591a\u6b21\u63d2\u5165\u65b0\u503c INSERT VERTEX t2 (name, age) VALUES 11:(\"n2\", 13) INSERT VERTEX t2 (name, age) VALUES 11:(\"n3\", 14) INSERT VERTEX t2 (name, age) VALUES 11:(\"n4\", 15) -- \u8bfb\u53d6\u6700\u540e\u63d2\u5165\u7684\u503c","title":"Insert vertex syntax"},{"location":"cn-manual-doc/cn_Statement_Syntax/DATA_Manipulation_Statements/INSERT_VERTEX_Syntax/#_1","text":"# CREATE TAG t1() -- \u521b\u5efa\u7a7a\u5c5e\u6027\u6807\u7b7et1 INSERT VERTEX t1 () VALUES 10:() -- \u63d2\u5165\u7a7a\u5c5e\u6027\u70b9100 # CREATE TAG t2 (name string, age int) -- \u521b\u5efa\u6709\u4e24\u79cd\u5c5e\u6027\u7684\u6807\u7b7et2 INSERT VERTEX t2 (name, age) VALUES 11:(\"n1\", 12) -- \u63d2\u5165\u6709\u4e24\u79cd\u5c5e\u6027\u7684\u70b911 INSERT VERTEX t2 (name, age) VALUES 12:(\"n1\", \"a13\") -- \u9519\u8bef\u64cd\u4f5c\uff0c\"a13\"\u4e0d\u662fint\u7c7b\u578b # CREATE TAG t1(i1 int) # CREATE TAG t2(s2 string) INSERT VERTEX t1 (i1), t2(s2) VALUES 21: (321, \"hello\") -- \u63d2\u5165\u6709\u4e24\u4e2a\u6807\u7b7e\u7684\u70b921 \u540c\u4e00\u8282\u70b9\u53ef\u88ab\u591a\u6b21\u63d2\u5165\u6216\u5199\u5165\uff0c\u8bfb\u53d6\u65f6\u4ee5\u6700\u540e\u4e00\u6b21\u63d2\u5165\u4e3a\u51c6\u3002 -- \u4e3a\u70b911\u591a\u6b21\u63d2\u5165\u65b0\u503c INSERT VERTEX t2 (name, age) VALUES 11:(\"n2\", 13) INSERT VERTEX t2 (name, age) VALUES 11:(\"n3\", 14) INSERT VERTEX t2 (name, age) VALUES 11:(\"n4\", 15) -- \u8bfb\u53d6\u6700\u540e\u63d2\u5165\u7684\u503c","title":"\u793a\u4f8b"},{"location":"cn-manual-doc/cn_Statement_Syntax/DATA_Manipulation_Statements/PIPE_Syntax/","text":"nGQL\u548cSQL\u7684\u4e3b\u8981\u533a\u522b\u4e4b\u4e00\u662f\u5b50\u67e5\u8be2\u7684\u7ec4\u5408\u65b9\u5f0f\u3002 SQL\u4e2d\u7684\u67e5\u8be2\u8bed\u53e5\u901a\u5e38\u7531\u5b50\u67e5\u8be2\u5d4c\u5957\u7ec4\u6210\uff0c\u800cnGQL\u5219\u4f7f\u7528\u7c7b\u4f3c\u4e8eshell\u7684\u7ba1\u9053\u65b9\u5f0f PIPE(|) \u6765\u7ec4\u5408\u5b50\u67e5\u8be2 \u793a\u4f8b \u00b6 GO FROM 201 OVER edge_serve | GO FROM $-.id OVER edge_fans | GO FROM $-.id ... GO FROM 100 OVER like YIELD like._dst AS Id, $$.player.name AS Name | GO FROM $-.Id OVER like YIELD like._dst, like.likeness, $-.Name","title":"Pipe syntax"},{"location":"cn-manual-doc/cn_Statement_Syntax/DATA_Manipulation_Statements/PIPE_Syntax/#_1","text":"GO FROM 201 OVER edge_serve | GO FROM $-.id OVER edge_fans | GO FROM $-.id ... GO FROM 100 OVER like YIELD like._dst AS Id, $$.player.name AS Name | GO FROM $-.Id OVER like YIELD like._dst, like.likeness, $-.Name","title":"\u793a\u4f8b"},{"location":"cn-manual-doc/cn_Statement_Syntax/DATA_Manipulation_Statements/WHERE_Syntax/","text":"\u76ee\u524d\uff0c WHERE \u8bed\u53e5\u4ec5\u9002\u7528\u4e8e GO \u8bed\u53e5\u3002 WHERE (expression [ AND | OR expression ...]) \u901a\u5e38\uff0c\u7b5b\u9009\u6761\u4ef6\u662f\u5173\u4e8e\u8282\u70b9\u3001\u8fb9\u7684\u8868\u8fbe\u5f0f\u7684\u903b\u8f91\u7ec4\u5408\u3002 \u4f5c\u4e3a\u8bed\u6cd5\u7cd6\uff0c\u903b\u8f91\u548c\u53ef\u7528 AND \u6216 && \uff0c\u540c\u7406\uff0c\u903b\u8f91\u6216\u53ef\u7528 OR \u6216 || \u8868\u793a\u3002 \u793a\u4f8b \u00b6 /* GO FROM 201 OVER like */ -- \u9002\u7528\u4e8eGO\u8bed\u53e5 WHERE e1.prop1 >= 17 -- \u8fb9e1\u7684prop1\u5c5e\u6027\u5927\u4e8e17 WHERE $^.v1.prop1 == $$.v2.prop2 -- \u8d77\u70b9v1\u7684prop1\u5c5e\u6027\u4e0e\u7ec8\u70b9v2\u7684prop2\u5c5e\u6027\u503c\u76f8\u7b49 WHERE ((e3.prop3 < 0.5) OR ($^.v4.prop4 != \"hello\")) AND $$.v5.prop5 == \"world\" -- logical combination is allowed WHERE 1 == 1 OR TRUE --always TRUE \u53c2\u8003 \u00b6","title":"Where syntax"},{"location":"cn-manual-doc/cn_Statement_Syntax/DATA_Manipulation_Statements/WHERE_Syntax/#_1","text":"/* GO FROM 201 OVER like */ -- \u9002\u7528\u4e8eGO\u8bed\u53e5 WHERE e1.prop1 >= 17 -- \u8fb9e1\u7684prop1\u5c5e\u6027\u5927\u4e8e17 WHERE $^.v1.prop1 == $$.v2.prop2 -- \u8d77\u70b9v1\u7684prop1\u5c5e\u6027\u4e0e\u7ec8\u70b9v2\u7684prop2\u5c5e\u6027\u503c\u76f8\u7b49 WHERE ((e3.prop3 < 0.5) OR ($^.v4.prop4 != \"hello\")) AND $$.v5.prop5 == \"world\" -- logical combination is allowed WHERE 1 == 1 OR TRUE --always TRUE","title":"\u793a\u4f8b"},{"location":"cn-manual-doc/cn_Statement_Syntax/DATA_Manipulation_Statements/WHERE_Syntax/#_2","text":"","title":"\u53c2\u8003"},{"location":"cn-manual-doc/cn_Statement_Syntax/DATA_Manipulation_Statements/YIELD_Syntax/","text":"YIELD [DISTINCT] <col_name> [AS <col_alias>] [, <col_name> [AS <col_alias>] ...] YIELD\u8bed\u53e5\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528\uff0c\u800c\u65e0\u9700\u904d\u5386\u56fe\u6570\u636e\u3002\u60a8\u53ef\u4ee5\u4f7f\u7528 AS \u91cd\u547d\u540d\u8fd4\u56de\u7684\u5217\u3002 nebula> YIELD 1 + 1 ========= | (1+1) | ========= | 2 | --------- nebula> YIELD \"Hel\" + \"\\tlo\" AS HELLO_1, \", World!\" as WORLD_2 ====================== | HELLO_1 | WORLD_2 | ====================== | Hel lo | , World! | ---------------------- \u4f46\u662fYIELD\u8bed\u53e5\u66f4\u5e38\u7528\u4e8e\u8fd4\u56de\u7531 GO \uff08\u8be6\u60c5\u8bf7\u53c2\u9605 GO \u7528\u6cd5\uff09\u8bed\u53e5\u751f\u6210\u7684\u7ed3\u679c\u3002 nebula> GO FROM 201 OVER relations_edge YIELD $$.student.name AS Friend, $$.student.age AS Age, $$.student.gender AS Gender ========================= | Friend | Age | Gender | ========================= | Jane | 17 | female | ------------------------- e.g., $$.student.name\u7528\u6765\u83b7\u53d6\u76ee\u6807\u70b9\uff08$$)\u7684\u5c5e\u6027\u3002 DISTINCT YIELD DISTINCT \u5fc5\u987b\u4e0e GO \u540c\u65f6\u4f7f\u7528 nebula> YIELD DISTINCT 1 --- \u8bed\u6cd5\u9519\u8bef","title":"Yield syntax"},{"location":"cn-manual-doc/cn_Statement_Syntax/DATA_Manipulation_Statements/fetch_Syntax/","text":"Fetch\u8bed\u53e5 \u00b6 FETCH \u8bed\u53e5\u7528\u4e8e\u83b7\u53d6\u70b9\u548c\u8fb9\u7684\u5c5e\u6027\u3002 \u83b7\u53d6\u70b9\u5c5e\u6027 \u00b6 FETCH PROP ON \u53ef\u8fd4\u56de\u8282\u70b9\u7684\u4e00\u7cfb\u5217\u5c5e\u6027\uff0c\u76ee\u524d\u5df2\u652f\u6301\u4e00\u6761\u8bed\u53e5\u8fd4\u56de\u591a\u4e2a\u8282\u70b9\u5c5e\u6027\u3002 FETCH PROP ON <tag_name> <vertex_id_list> [YIELD [DISTINCT] <return_list>] <tag_name>\u4e3a\u6807\u7b7e\u540d\u79f0\uff0c\u4e0ereturn_list\u4e2d\u7684\u6807\u7b7e\u76f8\u540c\u3002 <vertex_id_list>::=[vertex_id [, vertex_id]] is a list of vertex id separated by comma(,) [YIELD [DISTINCT] <return_list>]\u4e3a\u8fd4\u56de\u7684\u5c5e\u6027\u5217\u8868\uff0c`YIELD`\u8bed\u6cd5\u53c2\u770b[\u6b64\u5904](Yield_Syntax.md)\u3002 \u793a\u4f8b \u00b6 nebula> FETCH PROP ON player 1 -- \u5982\u672a\u6307\u5b9aYIELD\u5b57\u6bb5\uff0c\u5219\u8fd4\u56de\u8282\u70b91\u7684\u6240\u6709\u5c5e\u6027 nebula> FETCH PROP ON player 1 YIELD player.name, player.age -- \u8fd4\u56de\u8282\u70b91\u7684\u59d3\u540d\u4e0e\u5e74\u9f84\u5c5e\u6027 nebula> FETCH PROP ON player hash(\\\"nebula\\\") YIELD player.name, player.age -- \u901a\u8fc7hash\u751f\u6210int64\u8282\u70b9id\uff0c\u8fd4\u56de\u5176\u59d3\u540d\u548c\u5e74\u9f84\u5c5e\u6027 nebula> GO FROM 1 over e1 | FETCH PROP ON player $- YIELD player.name, player.age -- \u6cbf\u8fb9e1\u5bfb\u627e\u8282\u70b91\u7684\u6240\u6709\u8fd1\u90bb\uff0c\u8fd4\u56de\u5176\u59d3\u540d\u548c\u5e74\u9f84\u5c5e\u6027 nebula> $var = GO FROM 1 over e1; FETCH PROP ON player $var.id YIELD player.name, player.age -- \u4e0e\u4e0a\u8ff0\u8bed\u53e5\u76f8\u540c nebula> FETCH PROP ON player 1,2,3 YIELD DISTINCT player.name, player.age -- \u83b7\u53d61\uff0c2\uff0c3\u4e09\u4e2a\u8282\u70b9\uff0c\u8fd4\u56de\u59d3\u540d\u548c\u5e74\u9f84\u90fd\u4e0d\u76f8\u540c\u7684\u8bb0\u5f55 \u83b7\u53d6\u8fb9\u5c5e\u6027 \u00b6 \u4f7f\u7528 FETCH \u83b7\u53d6\u8fb9\u5c5e\u6027\u7684\u7528\u6cd5\u4e0e\u70b9\u5c5e\u6027\u5927\u81f4\u76f8\u540c\uff0c\u4e14\u53ef\u540c\u65f6\u83b7\u53d6\u76f8\u540c\u7c7b\u578b\u591a\u6761\u8fb9\u7684\u5c5e\u6027\u3002 FETCH PROP ON <edge_type> <vid> -> <vid> [, <vid> -> <vid> ...] [YIELD [DISTINCT] <return_list>] <edge_type>\u6307\u5b9a\u8fb9\u7684\u7c7b\u578b\uff0c\u9700\u4e0e<return_list>\u76f8\u540c\u3002 <vid> -> <vid> \u4ece\u8d77\u59cb\u8282\u70b9\u5230\u7ec8\u6b62\u8282\u70b9\u3002\u591a\u6761\u8fb9\u9700\u4f7f\u7528\u9017\u53f7\u9694\u5f00\u3002 [YIELD [DISTINCT] <return_list>]\u4e3a\u8fd4\u56de\u7684\u5c5e\u6027\u5217\u8868\u3002 \u793a\u4f8b \u00b6 nebula> FETCH PROP ON e1 100 -> 200 -- \u672c\u8bed\u53e5\u672a\u6307\u5b9aYIELD\uff0c\u56e0\u6b64\u83b7\u53d6\u4ece\u8282\u70b9100\u5230\u8282\u70b9200\u8fb9e1\u7684\u6240\u6709\u5c5e\u6027 nebula> FETCH PROP ON e1 100 -> 200 YIELD e1.p1 -- \u4ec5\u8fd4\u56de\u5c5e\u6027p1 nebula> GO FROM 1 OVER e1 YIELD e1.prop1 -- \u83b7\u53d6\u8282\u70b91\u51fa\u8fb9e1\u7684prop1\u5c5e\u6027 nebula> GO FROM 1 OVER e1 YIELD e1._src AS s, serve._dst AS d \\ | FETCH PROP ON e1 $-.s -> $-.d YIELD e1.prop1 -- \u540c\u4e0a\u8ff0\u8bed\u53e5 nebula> $var = GO FROM 1 OVER e1 YIELD e1._src AS s, e2._dst AS d;\\ FETCH PROP ON serve $var.s -> $var.d YIELD e1.prop1. -- \u540c\u4e0a\u8ff0\u8bed\u53e5","title":"Fetch syntax"},{"location":"cn-manual-doc/cn_Statement_Syntax/DATA_Manipulation_Statements/fetch_Syntax/#fetch","text":"FETCH \u8bed\u53e5\u7528\u4e8e\u83b7\u53d6\u70b9\u548c\u8fb9\u7684\u5c5e\u6027\u3002","title":"Fetch\u8bed\u53e5"},{"location":"cn-manual-doc/cn_Statement_Syntax/DATA_Manipulation_Statements/fetch_Syntax/#_1","text":"FETCH PROP ON \u53ef\u8fd4\u56de\u8282\u70b9\u7684\u4e00\u7cfb\u5217\u5c5e\u6027\uff0c\u76ee\u524d\u5df2\u652f\u6301\u4e00\u6761\u8bed\u53e5\u8fd4\u56de\u591a\u4e2a\u8282\u70b9\u5c5e\u6027\u3002 FETCH PROP ON <tag_name> <vertex_id_list> [YIELD [DISTINCT] <return_list>] <tag_name>\u4e3a\u6807\u7b7e\u540d\u79f0\uff0c\u4e0ereturn_list\u4e2d\u7684\u6807\u7b7e\u76f8\u540c\u3002 <vertex_id_list>::=[vertex_id [, vertex_id]] is a list of vertex id separated by comma(,) [YIELD [DISTINCT] <return_list>]\u4e3a\u8fd4\u56de\u7684\u5c5e\u6027\u5217\u8868\uff0c`YIELD`\u8bed\u6cd5\u53c2\u770b[\u6b64\u5904](Yield_Syntax.md)\u3002","title":"\u83b7\u53d6\u70b9\u5c5e\u6027"},{"location":"cn-manual-doc/cn_Statement_Syntax/DATA_Manipulation_Statements/fetch_Syntax/#_2","text":"nebula> FETCH PROP ON player 1 -- \u5982\u672a\u6307\u5b9aYIELD\u5b57\u6bb5\uff0c\u5219\u8fd4\u56de\u8282\u70b91\u7684\u6240\u6709\u5c5e\u6027 nebula> FETCH PROP ON player 1 YIELD player.name, player.age -- \u8fd4\u56de\u8282\u70b91\u7684\u59d3\u540d\u4e0e\u5e74\u9f84\u5c5e\u6027 nebula> FETCH PROP ON player hash(\\\"nebula\\\") YIELD player.name, player.age -- \u901a\u8fc7hash\u751f\u6210int64\u8282\u70b9id\uff0c\u8fd4\u56de\u5176\u59d3\u540d\u548c\u5e74\u9f84\u5c5e\u6027 nebula> GO FROM 1 over e1 | FETCH PROP ON player $- YIELD player.name, player.age -- \u6cbf\u8fb9e1\u5bfb\u627e\u8282\u70b91\u7684\u6240\u6709\u8fd1\u90bb\uff0c\u8fd4\u56de\u5176\u59d3\u540d\u548c\u5e74\u9f84\u5c5e\u6027 nebula> $var = GO FROM 1 over e1; FETCH PROP ON player $var.id YIELD player.name, player.age -- \u4e0e\u4e0a\u8ff0\u8bed\u53e5\u76f8\u540c nebula> FETCH PROP ON player 1,2,3 YIELD DISTINCT player.name, player.age -- \u83b7\u53d61\uff0c2\uff0c3\u4e09\u4e2a\u8282\u70b9\uff0c\u8fd4\u56de\u59d3\u540d\u548c\u5e74\u9f84\u90fd\u4e0d\u76f8\u540c\u7684\u8bb0\u5f55","title":"\u793a\u4f8b"},{"location":"cn-manual-doc/cn_Statement_Syntax/DATA_Manipulation_Statements/fetch_Syntax/#_3","text":"\u4f7f\u7528 FETCH \u83b7\u53d6\u8fb9\u5c5e\u6027\u7684\u7528\u6cd5\u4e0e\u70b9\u5c5e\u6027\u5927\u81f4\u76f8\u540c\uff0c\u4e14\u53ef\u540c\u65f6\u83b7\u53d6\u76f8\u540c\u7c7b\u578b\u591a\u6761\u8fb9\u7684\u5c5e\u6027\u3002 FETCH PROP ON <edge_type> <vid> -> <vid> [, <vid> -> <vid> ...] [YIELD [DISTINCT] <return_list>] <edge_type>\u6307\u5b9a\u8fb9\u7684\u7c7b\u578b\uff0c\u9700\u4e0e<return_list>\u76f8\u540c\u3002 <vid> -> <vid> \u4ece\u8d77\u59cb\u8282\u70b9\u5230\u7ec8\u6b62\u8282\u70b9\u3002\u591a\u6761\u8fb9\u9700\u4f7f\u7528\u9017\u53f7\u9694\u5f00\u3002 [YIELD [DISTINCT] <return_list>]\u4e3a\u8fd4\u56de\u7684\u5c5e\u6027\u5217\u8868\u3002","title":"\u83b7\u53d6\u8fb9\u5c5e\u6027"},{"location":"cn-manual-doc/cn_Statement_Syntax/DATA_Manipulation_Statements/fetch_Syntax/#_4","text":"nebula> FETCH PROP ON e1 100 -> 200 -- \u672c\u8bed\u53e5\u672a\u6307\u5b9aYIELD\uff0c\u56e0\u6b64\u83b7\u53d6\u4ece\u8282\u70b9100\u5230\u8282\u70b9200\u8fb9e1\u7684\u6240\u6709\u5c5e\u6027 nebula> FETCH PROP ON e1 100 -> 200 YIELD e1.p1 -- \u4ec5\u8fd4\u56de\u5c5e\u6027p1 nebula> GO FROM 1 OVER e1 YIELD e1.prop1 -- \u83b7\u53d6\u8282\u70b91\u51fa\u8fb9e1\u7684prop1\u5c5e\u6027 nebula> GO FROM 1 OVER e1 YIELD e1._src AS s, serve._dst AS d \\ | FETCH PROP ON e1 $-.s -> $-.d YIELD e1.prop1 -- \u540c\u4e0a\u8ff0\u8bed\u53e5 nebula> $var = GO FROM 1 OVER e1 YIELD e1._src AS s, e2._dst AS d;\\ FETCH PROP ON serve $var.s -> $var.d YIELD e1.prop1. -- \u540c\u4e0a\u8ff0\u8bed\u53e5","title":"\u793a\u4f8b"},{"location":"cn-manual-doc/cn_Statement_Syntax/cn_Data_Administration_Statements/cn_Account_Management_Statements/Drop_User_Syntax/","text":"DROP USER [IF EXISTS] user_name \u53ea\u6709 God \u548c Admin \u7528\u6237\u6709\u4f7f\u7528DROP\u8bed\u53e5\u7684\u6743\u9650\u3002 DROP USER \u4e0d\u4f1a\u81ea\u52a8\u5173\u95ed\u4efb\u4f55\u5df2\u6253\u5f00\u7684\u5ba2\u6237\u7aef\u8fde\u63a5\u3002","title":"Drop user syntax"},{"location":"cn-manual-doc/cn_Statement_Syntax/cn_Data_Administration_Statements/cn_Configuration_Statements/cn_Variables_Syntax/","text":"Nebula\u4f7f\u7528 gflags \u8fdb\u884c\u8fd0\u884c\u65f6\u914d\u7f6e\u3002 \u663e\u793a\u53d8\u91cf \u00b6 SHOW VARIABLES graph|meta|storage \u4f8b\u5982 nebula> SHOW VARIABLES meta ============================================================================================================================ | module | name | type | mode | value | ============================================================================================================================ | META | v | INT64 | IMMUTABLE | 4 | ---------------------------------------------------------------------------------------------------------------------------- | META | help | BOOL | IMMUTABLE | False | ---------------------------------------------------------------------------------------------------------------------------- | META | port | INT64 | IMMUTABLE | 45500 | ---------------------------------------------------------------------------------------------------------------------------- \u83b7\u53d6\u53d8\u91cf \u00b6 GET VARIABLES [graph|meta|storage :] var \u4f8b\u5982 nebula> GET VARIABLES storage:load_config_interval_secs ================================================================= | module | name | type | mode | value | ================================================================= | STORAGE | load_config_interval_secs | INT64 | MUTABLE | 120 | ----------------------------------------------------------------- nebula> GET VARIABLES load_config_interval_secs =================================================================== | module | name | type | mode | value | =================================================================== | META | load_config_interval_secs | INT64 | IMMUTABLE | 120 | ------------------------------------------------------------------- | STORAGE | load_config_interval_secs | INT64 | MUTABLE | 1 | ------------------------------------------------------------------- \u66f4\u65b0\u53d8\u91cf \u00b6 UPDATE VARIABLES [graph|meta|storage :] var = value \u66f4\u65b0\u7684\u53d8\u91cf\u5c06\u6c38\u4e45\u5b58\u50a8\u4e8emeta-service\u4e2d\u3002 \u5982\u679c\u53d8\u91cf\u6a21\u5f0f\u4e3a MUTABLE \uff0c\u66f4\u6539\u4f1a\u5373\u65f6\u751f\u6548\u3002\u5982\u679c\u6a21\u5f0f\u4e3a REBOOT \uff0c\u66f4\u6539\u5728\u670d\u52a1\u5668\u91cd\u542f\u540e\u751f\u6548\u3002 \u4f8b\u5982 nebula> UPDATE VARIABLES storage:load_config_interval_secs=1 Execution succeeded (Time spent: 1750/2484 us) nebula> GET VARIABLES storage:load_config_interval_secs ================================================================= | module | name | type | mode | value | ================================================================= | STORAGE | load_config_interval_secs | INT64 | MUTABLE | 1 | -----------------------------------------------------------------","title":"Variables syntax"},{"location":"cn-manual-doc/cn_Statement_Syntax/cn_Data_Administration_Statements/cn_Configuration_Statements/cn_Variables_Syntax/#_1","text":"SHOW VARIABLES graph|meta|storage \u4f8b\u5982 nebula> SHOW VARIABLES meta ============================================================================================================================ | module | name | type | mode | value | ============================================================================================================================ | META | v | INT64 | IMMUTABLE | 4 | ---------------------------------------------------------------------------------------------------------------------------- | META | help | BOOL | IMMUTABLE | False | ---------------------------------------------------------------------------------------------------------------------------- | META | port | INT64 | IMMUTABLE | 45500 | ----------------------------------------------------------------------------------------------------------------------------","title":"\u663e\u793a\u53d8\u91cf"},{"location":"cn-manual-doc/cn_Statement_Syntax/cn_Data_Administration_Statements/cn_Configuration_Statements/cn_Variables_Syntax/#_2","text":"GET VARIABLES [graph|meta|storage :] var \u4f8b\u5982 nebula> GET VARIABLES storage:load_config_interval_secs ================================================================= | module | name | type | mode | value | ================================================================= | STORAGE | load_config_interval_secs | INT64 | MUTABLE | 120 | ----------------------------------------------------------------- nebula> GET VARIABLES load_config_interval_secs =================================================================== | module | name | type | mode | value | =================================================================== | META | load_config_interval_secs | INT64 | IMMUTABLE | 120 | ------------------------------------------------------------------- | STORAGE | load_config_interval_secs | INT64 | MUTABLE | 1 | -------------------------------------------------------------------","title":"\u83b7\u53d6\u53d8\u91cf"},{"location":"cn-manual-doc/cn_Statement_Syntax/cn_Data_Administration_Statements/cn_Configuration_Statements/cn_Variables_Syntax/#_3","text":"UPDATE VARIABLES [graph|meta|storage :] var = value \u66f4\u65b0\u7684\u53d8\u91cf\u5c06\u6c38\u4e45\u5b58\u50a8\u4e8emeta-service\u4e2d\u3002 \u5982\u679c\u53d8\u91cf\u6a21\u5f0f\u4e3a MUTABLE \uff0c\u66f4\u6539\u4f1a\u5373\u65f6\u751f\u6548\u3002\u5982\u679c\u6a21\u5f0f\u4e3a REBOOT \uff0c\u66f4\u6539\u5728\u670d\u52a1\u5668\u91cd\u542f\u540e\u751f\u6548\u3002 \u4f8b\u5982 nebula> UPDATE VARIABLES storage:load_config_interval_secs=1 Execution succeeded (Time spent: 1750/2484 us) nebula> GET VARIABLES storage:load_config_interval_secs ================================================================= | module | name | type | mode | value | ================================================================= | STORAGE | load_config_interval_secs | INT64 | MUTABLE | 1 | -----------------------------------------------------------------","title":"\u66f4\u65b0\u53d8\u91cf"},{"location":"cn-manual-doc/cn_Statement_Syntax/cn_Data_Definition_Statements/Create_Space_Syntax/","text":"","title":"Create space syntax"},{"location":"cn-manual-doc/cn_Statement_Syntax/cn_Data_Definition_Statements/Create_Tag_Edge_Syntax/","text":"","title":"Create tag edge syntax"},{"location":"cn-manual-doc/cn_Statement_Syntax/cn_Data_Definition_Statements/Drop_Edge_Syntax/","text":"DROP EDGE edge_type_name \u4ec5\u652f\u6301\u6709DROP\u6743\u9650\u7684\u7528\u6237\u8fdb\u884c\u6b64\u64cd\u4f5c\u3002 \u6b64\u64cd\u4f5c\u5c06\u79fb\u9664\u6307\u5b9a\u7c7b\u578b\u7684\u6240\u6709\u8fb9\u3002 \u78c1\u76d8\u4e2d\u6240\u6709\u6587\u4ef6\u53ca\u8def\u5f84\u4ec5\u4ec5\u903b\u8f91\u4e0a\u6807\u8bb0\u4e3a\u4e0d\u53ef\u8bbf\u95ee\uff0c\u540e\u7eed\u7248\u672c\u5c06\u652f\u6301\u6b64\u529f\u80fd\uff08\u53c2\u89c1TODO\uff09\u3002","title":"Drop edge syntax"},{"location":"cn-manual-doc/cn_Statement_Syntax/cn_Data_Definition_Statements/Drop_Space_Syntax/","text":"DROP SPACE space_name \u4ec5\u652f\u6301\u6709DROP\u6743\u9650\u7684\u7528\u6237\u8fdb\u884c\u6b64\u64cd\u4f5c\u3002 DROP SPACE\u5c06\u5220\u9664\u6307\u5b9aspace\u5185\u7684\u6240\u6709\u70b9\u548c\u8fb9\u3002 \u5176\u4ed6space\u4e0d\u53d7\u5f71\u54cd\u3002 \u78c1\u76d8\u4e2d\u6240\u6709\u6587\u4ef6\u53ca\u8def\u5f84\u5747\u4e0d\u4f1a\u76f4\u63a5\u5220\u9664\uff0c\u540e\u7eed\u7248\u672c\u5c06\u652f\u6301\u6b64\u529f\u80fd\uff08\u53c2\u89c1TODO\uff09\u3002 \u6b64\u64cd\u4f5c\u4e0d\u4f1a\u7acb\u5373\u5220\u9664\u5b58\u50a8\u5f15\u64ce\u53ca\u78c1\u76d8\u7a7a\u95f4\u5185\u7684\u6587\u4ef6\u53ca\u8def\u5f84\uff0c\u5220\u9664\u64cd\u4f5c\u53d6\u51b3\u4e8e\u5b58\u50a8\u5f15\u64ce\u3002 \u8bf7\u8c28\u614e\u8fdb\u884c\u6b64\u64cd\u4f5c\u3002","title":"Drop space syntax"},{"location":"cn-manual-doc/cn_Statement_Syntax/cn_Data_Definition_Statements/Drop_Tag_Syntax/","text":"DROP TAG tag_name \u4ec5\u652f\u6301\u6709DROP\u6743\u9650\u7684\u7528\u6237\u8fdb\u884c\u6b64\u64cd\u4f5c\u3002 \u8bf7\u8c28\u614e\u8fdb\u884c\u6b64\u64cd\u4f5c\u3002 \u4e00\u4e2a\u8282\u70b9\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u6807\u7b7e\uff08\u7c7b\u578b\uff09\u3002 \u5220\u9664\u6240\u6709\u6807\u7b7e\u540e\uff0c\u8282\u70b9\u5c06\u4e0d\u53ef\u8bbf\u95ee\uff0c\u540c\u65f6\u4e0e\u8282\u70b9\u8fde\u63a5\u7684\u8fb9\u4e5f\u4e0d\u53ef\u4f7f\u7528\u3002 \u5220\u9664\u5355\u4e2a\u6807\u7b7e\u540e\uff0c\u8282\u70b9\u4ecd\u53ef\u8bbf\u95ee\uff0c\u4f46\u662f\u5df2\u5220\u9664\u6807\u7b7e\u7684\u5c5e\u6027\u4e0d\u53ef\u8bbf\u95ee\u3002 \u78c1\u76d8\u4e2d\u6240\u6709\u6587\u4ef6\u53ca\u8def\u5f84\u5747\u4e0d\u4f1a\u76f4\u63a5\u5220\u9664\uff0c\u540e\u7eed\u7248\u672c\u5c06\u652f\u6301\u6b64\u529f\u80fd\uff08\u53c2\u89c1TODO\uff09\u3002","title":"Drop tage syntax"},{"location":"cn-manual-doc/cn_Statement_Syntax/cn_Data_Definition_Statements/Show_Syntax/","text":"","title":"Show syntax"},{"location":"cn-manual-doc/cn_Statement_Syntax/cn_Data_Definition_Statements/cn_Alter_Tag_Edge_Syntax/","text":"ALTER {TAG | EDGE} tag_name | edge_name [alter_definition [, alter_definition] ...] [ttl_definition [, ttl_definition] ... ] alter_definition: | ADD (prop_name data_type) | DROP (prop_name) | CHANGE (prop_name data_type) ttl_definition: TTL_DURATION = ttl_duration, TTL_COL = prop_name ALTER \u53ef\u4ea7\u751f\u4e0d\u540c\u7684\u7ed3\u679c\uff0c\u5982\u679c\u4f7f\u7528\u4e0d\u5339\u914d\u7684\u7248\u672c/schema\uff0c\u5176\u6210\u884c\u4e3a\u662f\u672a\u5b9a\u4e49\u7684\u3002 ALTER \u8bed\u53e5\u53ef\u6539\u53d8\u6807\u7b7e\u6216\u8fb9\u7684\u7ed3\u6784\uff0c\u4f8b\u5982\uff0c\u53ef\u4ee5\u6dfb\u52a0\u6216\u5220\u9664\u5c5e\u6027\uff0c\u66f4\u6539\u5df2\u6709\u5c5e\u6027\u7684\u7c7b\u578b\u6216\u91cd\u547d\u540d\u5c5e\u6027\uff0c\u4e5f\u53ef \u5c06\u5c5e\u6027\u8bbe\u7f6e\u4e3aTTL\uff08\u751f\u5b58\u65f6\u95f4\uff09\uff0c\u6216\u66f4\u6539TTL\u65f6\u95f4\u3002 \u4e00\u4e2a ALTER \u8bed\u53e5\u5141\u8bb8\u4f7f\u7528\u591a\u4e2a ADD \uff0c DROP \uff0c CHANGE \u8bed\u53e5\uff0c\u8bed\u53e5\u4e4b\u95f4\u9700\u7528\u9017\u53f7\u9694\u5f00\u3002\u4f46\u662f\u4e0d\u8981\u5728\u4e00\u4e2a \u8bed\u53e5\u4e2d\u6dfb\u52a0\uff0c\u5220\u9664\u6216\u66f4\u6539\u76f8\u540c\u7684\u5c5e\u6027\u3002\u5982\u679c\u5fc5\u987b\u8fdb\u884c\u6b64\u64cd\u4f5c\uff0c\u8bf7\u5c06\u5176\u4f5c\u4e3a\u6bcf\u4e2a ALTER \u7684\u5b50\u8bed\u53e5\u3002 ALTER TAG t1 ADD (id int, name string) ALTER EDGE e1 ADD (prop1 int, prop2 string), /* \u6dfb\u52a0prop1 */ CHANGE (prop3 string), /* \u5c06prop3\u7c7b\u578b\u66f4\u6539\u4e3a\u5b57\u7b26 */ DROP (prop4, prop5) /* \u5220\u9664prop4\u548cprop5 */ ALTER EDGE e1 TTL_DURATION = 2, TTL_COL = prop1 -- \u6ce8\u610fprop1\u7684\u503c\u5c06\u57282\u79d2\u5185\u79fb\u9664 \u6ce8\u610fTTL_COL\u4ec5\u652f\u6301INT\u548cTIMESTAMP\u3002","title":"Alter tag edge syntax"},{"location":"manual-doc/data-types/numeric-types/","text":"Two basic data types are supported by Nebula -- int64 & double. The range for int64 is [-9223372036854775808, 9223372036854775807]. There are no upper and lower bound for double. Notice there is no over-flow for int64 based computation.","title":"Numeric types"},{"location":"manual-doc/data-types/string-types/","text":"","title":"String types"},{"location":"manual-doc/functions-and-operators/comparison-functions-and-operators/","text":"Name Description = Assign a value / Division operator == Equal operator != Not equal operator < Less than operator <= Less than or equal operator - Minus operator % Modulo operator + Addition operator * Multiplication operator - Change the sign of the argument Comparison operations result in a value of true and false . == Equal. String comparisons are case-sensitive. Values of different type are not equal. nebula> YIELD 'A' == 'a'; ============== | (\"A\"==\"a\") | ============== | false | -------------- nebula> YIELD '2' == 2; ============ | (\"2\"==2) | ============ |false | ------------ > Greater than\uff1a nebula> YIELD 3 > 2; ========= | (3>2) | ========= | true | --------- \u2265 Greater than or equal: nebula> YIELD 2 >= 2; ========== | (2>=2) | ========== | true | ---------- < Less than: nebula> YIELD 2.0 < 1.9; ======================= | (2.000000<1.900000) | ======================= |false | ----------------------- \u2264 Less than or equal: nebula> YIELD 0.11 <= 0.11; ======================== | (0.110000<=0.110000) | ======================== |true | ------------------------ != Not equal: nebula> YIELD 1 != '1' ============ | (1!=\"1\") | ============ | true | ------------","title":"Comparison functions and operators"},{"location":"manual-doc/functions-and-operators/functions-and-operator-reference/","text":"Name Description abs() Return the absolute value acos() Return the arc cosine asin() Return the arc sine atan() Return the arc tangent cbrt() Returns the cubic root of the argument ceil() Return the smallest integer value not less than the argument cos() Return the cosine exp() Raise to the power of floor() Return the largest integer value not greater than the argument hypot() Returns the hypotenuse of a right-angled triangle log() Return the natural logarithm of the first argument log2() Return the base-2 logarithm of the argument log10() Return the base-10 logarithm of the argument now() Return the current date and time pow() Return the argument raised to the specified power rand32() Return a random 32 bit interger rand64() Return a random 64 bit interger round() Round the argument sin() Return the sine of the argument sqrt() Return the square root of the argument strcasecmp() Compare strings without sensitivity to case tan() Return the tangent of the argument","title":"Functions and operator reference"},{"location":"manual-doc/functions-and-operators/group-by-function/","text":"Aggregate (Group by) function \u00b6 The GROUP BY functions are similar with SQL. It can only be applied in the YIELD -syntax. Name Description AVG() Return the average value of the argument COUNT() Return the number of records COUNT(DISTINCT) Return the number of different values MAX() Return the maximum value MIN() Return the minimum value STD() Return the population standard deviation SUM() Return the sum All the functions above can only applies for int64 and double. Example \u00b6 nebula> GO FROM 1 OVER e1 | YIELD $-.id AS fid, COUNT(*) AS cnt GROUP BY fid -- for each fid, return the occurrence count. nebula> GO FROM 1 YIELD e1._dst AS fid, e1.prop1 AS prop1 | YIELD fid, SUM(prop1) GROUP BY fid -- for each fid, return the sum of prop1.","title":"Aggregate (Group by) function"},{"location":"manual-doc/functions-and-operators/group-by-function/#aggregate-group-by-function","text":"The GROUP BY functions are similar with SQL. It can only be applied in the YIELD -syntax. Name Description AVG() Return the average value of the argument COUNT() Return the number of records COUNT(DISTINCT) Return the number of different values MAX() Return the maximum value MIN() Return the minimum value STD() Return the population standard deviation SUM() Return the sum All the functions above can only applies for int64 and double.","title":"Aggregate (Group by) function"},{"location":"manual-doc/functions-and-operators/group-by-function/#example","text":"nebula> GO FROM 1 OVER e1 | YIELD $-.id AS fid, COUNT(*) AS cnt GROUP BY fid -- for each fid, return the occurrence count. nebula> GO FROM 1 YIELD e1._dst AS fid, e1.prop1 AS prop1 | YIELD fid, SUM(prop1) GROUP BY fid -- for each fid, return the sum of prop1.","title":"Example"},{"location":"manual-doc/functions-and-operators/logical-operators/","text":"Name Description && Logical AND ! Logical NOT || Logical OR In nGQL, nonzero numbers are evaluated to true . The precedence of the operators refer to Operator Precedence . && Logical AND: nebula> YIELD -1 && true; ================ | (-(1)&&true) | ================ |true | ---------------- ! Logical NOT: nebula> YIELD !(-1); =========== | !(-(1)) | =========== |false | ----------- || Logical OR: nebula> YIELD 1 || !1; ============= | (1||!(1)) | ============= | true |","title":"Logical operators"},{"location":"manual-doc/functions-and-operators/operator-precedence/","text":"The following list shows the precedence of nGQL operators, in descending order. Operators on a line have the same precedence. ! - (unary minus) *, /, % -, + == , >=, >, <=, <, <>, != && || = (assignment) For operators from the same precedence level within an expression, evaluation is from left to right, with the exception that assignment evaluates right to left. However, parentheses can be used to modify the order. Examples: nebula> YIELD 2+3*5; nebula> YIELD (2+3)*5;","title":"Operator precedence"},{"location":"manual-doc/functions-and-operators/order-by-function/","text":"Order By Function \u00b6 Similar with SQL, ORDER BY can be used to sort in ascending ( ASC ) or descending ( DESC ) order for return results. And it can only be used in the PIEP -syntax (\"|\") | ORDER BY <prop> ASC | DESC [, <prop> ASC | DESC ...] By default, ORDER BY sorts the records in ascending order if no ASC or DESC is given. Example \u00b6 nebula> FETCH PROP ON player 1,2,3,4 YIELD player.age AS age, player.weight as weight | ORDER BY $-.age, $-.weight DESC -- get four of vertices and sort by their age begin with the youngest one, and for those with the same age, sort by their weight. (see FETCH for the usage) nebula> GO FROM 1 OVER edge2 YIELD $^.t1.prop1 AS s1_p1, edge2.prop2 AS e2_p2, $$.t3.prop3 AS d3_p3 | ORDER BY s1_p1 ASC, e2_p2 DESC, d3_p3 ASC For a group of returned tuples , first sort in ascending order of s1_p1, then in descending order of e2_p2, finally ascending order of d3_p3.","title":"Order By Function"},{"location":"manual-doc/functions-and-operators/order-by-function/#order-by-function","text":"Similar with SQL, ORDER BY can be used to sort in ascending ( ASC ) or descending ( DESC ) order for return results. And it can only be used in the PIEP -syntax (\"|\") | ORDER BY <prop> ASC | DESC [, <prop> ASC | DESC ...] By default, ORDER BY sorts the records in ascending order if no ASC or DESC is given.","title":"Order By Function"},{"location":"manual-doc/functions-and-operators/order-by-function/#example","text":"nebula> FETCH PROP ON player 1,2,3,4 YIELD player.age AS age, player.weight as weight | ORDER BY $-.age, $-.weight DESC -- get four of vertices and sort by their age begin with the youngest one, and for those with the same age, sort by their weight. (see FETCH for the usage) nebula> GO FROM 1 OVER edge2 YIELD $^.t1.prop1 AS s1_p1, edge2.prop2 AS e2_p2, $$.t3.prop3 AS d3_p3 | ORDER BY s1_p1 ASC, e2_p2 DESC, d3_p3 ASC For a group of returned tuples , first sort in ascending order of s1_p1, then in descending order of e2_p2, finally ascending order of d3_p3.","title":"Example"},{"location":"manual-doc/functions-and-operators/set-operations/","text":"Set Operations ( UNION , INTERSECT , and MINUS ) \u00b6 UNION , UNION DISTINCT , and UNION ALL \u00b6 Operator UNION DISTINCT (or by short UNION ) returns the union of two sets A and B (denoted by A \u22c3 B in mathematics), with the distinct element belongs to set A or set B, or both. Meanwhile, operation UNION ALL returns the union set with duplicated elements. The UNION -syntax is <left> UNION [DISTINCT | ALL] <right> where <left> and <right> must have the same number of columns and pair-wise data types. Example \u00b6 The following statement GO FROM 1 OVER e1 \\ UNION \\ GO FROM 2 OVER e1 return the neighbors' id of vertex 1 and 2 (along with edge e1 ) without duplication. While GO FROM 1 OVER e1 \\ UNION ALL\\ GO FROM 2 OVER e1 returns all the neighbors of vertex 1 and 2 , with all possible duplications. UNION can also work with the YIELD -syntax-returned properties. For example, let's suppose the results of the following two queries nebula> GO FROM 1 OVER e1 YIELD e1._dst AS id, e1.prop1 AS left.1, $$.tag.prop2 AS left.2 -- query 1 ========================== | id | left.1 | left.2 | ========================== | 104 | 1 | 2 | -- line 1 -------------------------- | 215 | 4 | 3 | -- line 3 -------------------------- nebula> GO FROM 2,3 OVER e1 YIELD e1._dst AS id, e1.prop1 AS right.1, $$.tag.prop2 AS right.2 -- query 2 =========================== | id | right.1 | right.2 | =========================== | 104 | 1 | 2 | -- line 1 --------------------------- | 104 | 2 | 2 | -- line 2 --------------------------- And the following statement GO FROM 1 OVER e1 YIELD e1._dst AS id, e1.prop1 AS left.1, $$.tag.prop2 AS left.2 UNION /* DISTINCT */ GO FROM 2,3 OVER e1 YIELD e1._dst AS id, e1.prop1 AS right.1, $$.tag.prop2 AS right.2 will return as follows: ========================= | id | left.1 | left.2 | -- UNION or UNION DISTINCT. The column names come from query 1 ========================= | 104 | 1 | 2 | -- line 1 ------------------------- | 104 | 2 | 2 | -- line 2 ------------------------- | 215 | 4 | 3 | -- line 3 ------------------------- Notice that line 1 and line 2 return the same id (104) with different column values. The DISTINCT check duplication by all the columns for every line. So line 1 and line 2 are different. You can expect for the UNION ALL result GO FROM 1 OVER e1 YIELD e1._dst AS id, e1.prop1 AS left.1, $$.tag.prop2 AS left.2 UNION ALL GO FROM 2,3 OVER e1 YIELD e1._dst AS id, e1.prop1 AS right.1, $$.tag.prop2 AS right.2 ========================= | id | left.1 | left.2 | -- UNION ALL ========================= | 104 | 1 | 2 | -- line 1 ------------------------- | 104 | 1 | 2 | -- line 1 ------------------------- | 104 | 2 | 2 | -- line 2 ------------------------- | 215 | 4 | 3 | -- line 3 ------------------------- INTERSECT \u00b6 Operator INTERSECT returns the intersection of two sets A and B (denoted by A \u22c2 B), if the elements belong both to set A and set B. <left> INTERSECT <right> Alike UNION , <left> and <right> must have the same number of columns and data types. Besides, only the same line of <left> and <right> will be returned. Example \u00b6 You can imagine GO FROM 1 OVER e1 YIELD e1._dst AS id, e1.prop1 AS left.1, $$.tag.prop2 AS left.2 INTERSECT GO FROM 2,3 OVER e1 YIELD e1._dst AS id, e1.prop1 AS right.1, $$.tag.prop2 AS right.2 will return ========================= | id | left.1 | left.2 | ========================= | 104 | 1 | 2 | -- line 1 ------------------------- MINUS \u00b6 The set subtraction (or difference), A - B, consists of elements that are in A but not in B. So the operation order matters. Example \u00b6 GO FROM 1 OVER e1 YIELD e1._dst AS id, e1.prop1 AS left.1, $$.tag.prop2 AS left.2 MINUS GO FROM 2,3 OVER e1 YIELD e1._dst AS id, e1.prop1 AS right.1, $$.tag.prop2 AS right.2 comes out ========================== | id | left.1 | left.2 | ========================== | 215 | 4 | 3 | -- line 3 -------------------------- And if we reverse the MINUS order GO FROM 2,3 OVER e1 YIELD e1._dst AS id, e1.prop1 AS right.1, $$.tag.prop2 AS right.2 MINUS GO FROM 1 OVER e1 YIELD e1._dst AS id, e1.prop1 AS left.1, $$.tag.prop2 AS left.2 results in =========================== | id | right.1 | right.2 | -- column named from query 2 =========================== | 104 | 2 | 2 | -- line 2 ---------------------------","title":"Set Operations (`UNION`, `INTERSECT`, and `MINUS`)"},{"location":"manual-doc/functions-and-operators/set-operations/#set-operations-union-intersect-and-minus","text":"","title":"Set Operations (UNION, INTERSECT, and MINUS)"},{"location":"manual-doc/functions-and-operators/set-operations/#union-union-distinct-and-union-all","text":"Operator UNION DISTINCT (or by short UNION ) returns the union of two sets A and B (denoted by A \u22c3 B in mathematics), with the distinct element belongs to set A or set B, or both. Meanwhile, operation UNION ALL returns the union set with duplicated elements. The UNION -syntax is <left> UNION [DISTINCT | ALL] <right> where <left> and <right> must have the same number of columns and pair-wise data types.","title":"UNION, UNION DISTINCT, and UNION ALL"},{"location":"manual-doc/functions-and-operators/set-operations/#example","text":"The following statement GO FROM 1 OVER e1 \\ UNION \\ GO FROM 2 OVER e1 return the neighbors' id of vertex 1 and 2 (along with edge e1 ) without duplication. While GO FROM 1 OVER e1 \\ UNION ALL\\ GO FROM 2 OVER e1 returns all the neighbors of vertex 1 and 2 , with all possible duplications. UNION can also work with the YIELD -syntax-returned properties. For example, let's suppose the results of the following two queries nebula> GO FROM 1 OVER e1 YIELD e1._dst AS id, e1.prop1 AS left.1, $$.tag.prop2 AS left.2 -- query 1 ========================== | id | left.1 | left.2 | ========================== | 104 | 1 | 2 | -- line 1 -------------------------- | 215 | 4 | 3 | -- line 3 -------------------------- nebula> GO FROM 2,3 OVER e1 YIELD e1._dst AS id, e1.prop1 AS right.1, $$.tag.prop2 AS right.2 -- query 2 =========================== | id | right.1 | right.2 | =========================== | 104 | 1 | 2 | -- line 1 --------------------------- | 104 | 2 | 2 | -- line 2 --------------------------- And the following statement GO FROM 1 OVER e1 YIELD e1._dst AS id, e1.prop1 AS left.1, $$.tag.prop2 AS left.2 UNION /* DISTINCT */ GO FROM 2,3 OVER e1 YIELD e1._dst AS id, e1.prop1 AS right.1, $$.tag.prop2 AS right.2 will return as follows: ========================= | id | left.1 | left.2 | -- UNION or UNION DISTINCT. The column names come from query 1 ========================= | 104 | 1 | 2 | -- line 1 ------------------------- | 104 | 2 | 2 | -- line 2 ------------------------- | 215 | 4 | 3 | -- line 3 ------------------------- Notice that line 1 and line 2 return the same id (104) with different column values. The DISTINCT check duplication by all the columns for every line. So line 1 and line 2 are different. You can expect for the UNION ALL result GO FROM 1 OVER e1 YIELD e1._dst AS id, e1.prop1 AS left.1, $$.tag.prop2 AS left.2 UNION ALL GO FROM 2,3 OVER e1 YIELD e1._dst AS id, e1.prop1 AS right.1, $$.tag.prop2 AS right.2 ========================= | id | left.1 | left.2 | -- UNION ALL ========================= | 104 | 1 | 2 | -- line 1 ------------------------- | 104 | 1 | 2 | -- line 1 ------------------------- | 104 | 2 | 2 | -- line 2 ------------------------- | 215 | 4 | 3 | -- line 3 -------------------------","title":"Example"},{"location":"manual-doc/functions-and-operators/set-operations/#intersect","text":"Operator INTERSECT returns the intersection of two sets A and B (denoted by A \u22c2 B), if the elements belong both to set A and set B. <left> INTERSECT <right> Alike UNION , <left> and <right> must have the same number of columns and data types. Besides, only the same line of <left> and <right> will be returned.","title":"INTERSECT"},{"location":"manual-doc/functions-and-operators/set-operations/#example_1","text":"You can imagine GO FROM 1 OVER e1 YIELD e1._dst AS id, e1.prop1 AS left.1, $$.tag.prop2 AS left.2 INTERSECT GO FROM 2,3 OVER e1 YIELD e1._dst AS id, e1.prop1 AS right.1, $$.tag.prop2 AS right.2 will return ========================= | id | left.1 | left.2 | ========================= | 104 | 1 | 2 | -- line 1 -------------------------","title":"Example"},{"location":"manual-doc/functions-and-operators/set-operations/#minus","text":"The set subtraction (or difference), A - B, consists of elements that are in A but not in B. So the operation order matters.","title":"MINUS"},{"location":"manual-doc/functions-and-operators/set-operations/#example_2","text":"GO FROM 1 OVER e1 YIELD e1._dst AS id, e1.prop1 AS left.1, $$.tag.prop2 AS left.2 MINUS GO FROM 2,3 OVER e1 YIELD e1._dst AS id, e1.prop1 AS right.1, $$.tag.prop2 AS right.2 comes out ========================== | id | left.1 | left.2 | ========================== | 215 | 4 | 3 | -- line 3 -------------------------- And if we reverse the MINUS order GO FROM 2,3 OVER e1 YIELD e1._dst AS id, e1.prop1 AS right.1, $$.tag.prop2 AS right.2 MINUS GO FROM 1 OVER e1 YIELD e1._dst AS id, e1.prop1 AS left.1, $$.tag.prop2 AS left.2 results in =========================== | id | right.1 | right.2 | -- column named from query 2 =========================== | 104 | 2 | 2 | -- line 2 ---------------------------","title":"Example"},{"location":"manual-doc/functions-and-operators/type-conversion/","text":"","title":"Type conversion"},{"location":"manual-doc/language-structure/comment-syntax/","text":"Nebula supports four comment styles: * From a # character to the end of the line. * From a -- sequence to the end of the line. * From a // sequence to the end of the line, as in the C programming language. * From a / sequence to the following / sequence. This syntax enables a comment to extend over multiple lines because the beginning and closing sequences need not be on the same line. Nested comments are not supported The following example demonstrates all these comment styles: nebula> -- Do nothing this line nebula> YIELD 1+1 # This comment continues to the end of line nebula> YIELD 1+1 -- This comment continues to the end of line nebula> YIELD 1+1 // This comment continues to the end of line nebula> YIELD 1 /* this is an in-line comment */ + 1 nebula> YIELD 11 + \\ /* Multiple-line comment \\ Use backslash as line break. \\ */ 12 The backslash \\ at the line of line indicates a line break.","title":"Comment syntax"},{"location":"manual-doc/language-structure/expression/","text":"","title":"Expression"},{"location":"manual-doc/language-structure/identifier-case-sensitivity/","text":"In Nebula Graph, Identifiers are case-sensitive. The following statement would not work because it refers to a space both as 'my_space' and as 'MY_SPACE': nebula> CREATE SPACE my_space; nebula> use MY_SPACE; However, keywords and reserved words are case-insensitive. The following statements are equivalent: nebula> show spaces; nebula> SHOW SPACES; nebula> SHOW spaces; nebula> show spaces;","title":"Identifier case sensitivity"},{"location":"manual-doc/language-structure/keywords-and-reserved-words/","text":"","title":"Keywords and reserved words"},{"location":"manual-doc/language-structure/property-reference/","text":"Property Reference \u00b6 You can refer a vertex or edge's property in WHERE or YIELD syntax. Reference from vertex \u00b6 For source vertex \u00b6 $^.tag_name.prop_name where symbol $^ is used to get a source vertex's property, tag_name indicates the source vertex's tag , and prop_name specifies the property name. For destination vertex \u00b6 $$.tag_name.prop_name where symbol $$ indicates the ending vertex, tag_name and prop_name are the vertex's tag and property respectively. Example \u00b6 GO FROM 1 YIELD $^.start.name AS startName, $$.end.Age AS endAge to get the starting vertex's property name and ending vertex's property age. Reference from edge \u00b6 For property \u00b6 You can use the following to get an edge's property. edge_type.edge_prop where edge_type is the edge's type, meanwhile edge_prop is the property. For example, GO FROM 1 OVER e1 YIELD e1.prop1 For build-in properties \u00b6 There are four build-in properties in the edge: _src: source vertex id of the edge _dst: destination id of the edge _type: edge type _rank: the edge's ranking You can use _src and _dst to get the starting and ending vertices' id, so they are very commonly used to show a graph path. For example, GO FROM 1 OVER e1 YIELD e1._src as startVID /* which is, 1 */, e1._dst as endVID This statement returns all the neighbors of vertex 1 over edge type e1 , by referencing e1._src as the starting vertex id (which, of course, is 1 ) and e1._dst as the ending vertex id.","title":"Property Reference"},{"location":"manual-doc/language-structure/property-reference/#property-reference","text":"You can refer a vertex or edge's property in WHERE or YIELD syntax.","title":"Property Reference"},{"location":"manual-doc/language-structure/property-reference/#reference-from-vertex","text":"","title":"Reference from vertex"},{"location":"manual-doc/language-structure/property-reference/#for-source-vertex","text":"$^.tag_name.prop_name where symbol $^ is used to get a source vertex's property, tag_name indicates the source vertex's tag , and prop_name specifies the property name.","title":"For source vertex"},{"location":"manual-doc/language-structure/property-reference/#for-destination-vertex","text":"$$.tag_name.prop_name where symbol $$ indicates the ending vertex, tag_name and prop_name are the vertex's tag and property respectively.","title":"For destination vertex"},{"location":"manual-doc/language-structure/property-reference/#example","text":"GO FROM 1 YIELD $^.start.name AS startName, $$.end.Age AS endAge to get the starting vertex's property name and ending vertex's property age.","title":"Example"},{"location":"manual-doc/language-structure/property-reference/#reference-from-edge","text":"","title":"Reference from edge"},{"location":"manual-doc/language-structure/property-reference/#for-property","text":"You can use the following to get an edge's property. edge_type.edge_prop where edge_type is the edge's type, meanwhile edge_prop is the property. For example, GO FROM 1 OVER e1 YIELD e1.prop1","title":"For property"},{"location":"manual-doc/language-structure/property-reference/#for-build-in-properties","text":"There are four build-in properties in the edge: _src: source vertex id of the edge _dst: destination id of the edge _type: edge type _rank: the edge's ranking You can use _src and _dst to get the starting and ending vertices' id, so they are very commonly used to show a graph path. For example, GO FROM 1 OVER e1 YIELD e1._src as startVID /* which is, 1 */, e1._dst as endVID This statement returns all the neighbors of vertex 1 over edge type e1 , by referencing e1._src as the starting vertex id (which, of course, is 1 ) and e1._dst as the ending vertex id.","title":"For build-in properties"},{"location":"manual-doc/language-structure/schema-object-names/","text":"Certain objects within Nebula graph, including space, tag, edge, alias, customer variables and other object names are referred as identifiers. This section describes the rules for identifiers in Nebula Graph: Permitted characters in identifiers: ASCII: [0-9,a-z,A-Z,_] (basic Latin letters, digits 0-9, underscore), Other punctuation characters are not supported. * All identifiers must begin with a letter of the alphabet. * Identifiers are case sensitive. * You cannot use a keyword (a reserved word) as an identifier.","title":"Schema object names"},{"location":"manual-doc/language-structure/statement-composition/","text":"There are only two ways to compose statements (or subqueries): * More than one statements can be batched together, separated by semicolon (;). The result of the last statement will be returned as the result of the batch. * Statements could be piped together using operator (|), much like the pipe in the shell scripts. The result yielded from the previous statement could be redirected to the next statement as input. Notice that compose statements are not Transactional queries. For example, a statement composed of three subqueries: A | B | C, where A is a read operation, B is a computation, and C is a write operation. If any part fails in the execution, the whole result could be undefined -- currently, there is no so call roll back -- what was written dependents on the query optimizer. Examples \u00b6 semicolon statements SHOW TAGS; SHOW EDGES; -- only edges are shown INSERT VERTEX player(name, age) VALUES 100:(\"Tim Duncan\", 42); \\ INSERT VERTEX player(name, age) VALUES 101:(\"Tony Parker\", 36); \\ INSERT VERTEX player(name, age) VALUES 102:(\"LaMarcus Aldridge\", 33); /* multiple vertices are added in a compose statement. */ PIPE statements GO FROM 201 OVER edge_serve | GO FROM $-.id OVER edge_fans | GO FROM $-.id ... Placeholder $-.id takes the result from the first statment GO FROM 201 OVER edge_serve","title":"Statement composition"},{"location":"manual-doc/language-structure/statement-composition/#examples","text":"semicolon statements SHOW TAGS; SHOW EDGES; -- only edges are shown INSERT VERTEX player(name, age) VALUES 100:(\"Tim Duncan\", 42); \\ INSERT VERTEX player(name, age) VALUES 101:(\"Tony Parker\", 36); \\ INSERT VERTEX player(name, age) VALUES 102:(\"LaMarcus Aldridge\", 33); /* multiple vertices are added in a compose statement. */ PIPE statements GO FROM 201 OVER edge_serve | GO FROM $-.id OVER edge_fans | GO FROM $-.id ... Placeholder $-.id takes the result from the first statment GO FROM 201 OVER edge_serve","title":"Examples"},{"location":"manual-doc/language-structure/user-defined_variable/","text":"","title":"User defined variable"},{"location":"manual-doc/language-structure/literal-values/NULL-values/","text":"","title":"NULL values"},{"location":"manual-doc/language-structure/literal-values/boolean-literals/","text":"Boolean Literals \u00b6 The boolean literals TRUE and FALSE can be written in any letter case. nebula> yield TRUE, true, FALSE, false, FalsE ========================================= | true | true | false | false | false | =========================================","title":"Boolean Literals"},{"location":"manual-doc/language-structure/literal-values/boolean-literals/#boolean-literals","text":"The boolean literals TRUE and FALSE can be written in any letter case. nebula> yield TRUE, true, FALSE, false, FalsE ========================================= | true | true | false | false | false | =========================================","title":"Boolean Literals"},{"location":"manual-doc/language-structure/literal-values/numeric-literals/","text":"Number literals include interger literals and floating-point literals. Integers are 64 bit digitals, and can be preceded by + or - to indicate a positive or negative value, respectively. They're the same as int64_t in the C language. floating-points are the same as double in the C language. Here are some examples: 1, -5, +10000100000 -2.3, +1.00000000000 Notice that the maximum value for the positive interges is 9223372036854775807 . It's syntax-error if you try to input any value larger than the maximum. So as the minimum value -9223372036854775808 for the negative interges. Though there are no upper or lower bounds for the doubles. Scientific notations will be supported in the next release.","title":"Numeric literals"},{"location":"manual-doc/language-structure/literal-values/string-literals/","text":"A string is a sequence of bytes or characters, enclosed within either single quote (') or double quote (\") characters. Examples: nebula> YIELD 'a string' nebula> YIELD \"another string\" Certain backslash escapes () have been supported (also known as the escape character ). They are shown in the following table: | Escape Sequence | Character Represented by Sequence | |:----|:----| | \\' | A single quote (') character | | \\\" | A double quote (\") character | | \\t | A tab character | | \\n | A newline character | | \\b | A backspace character | | \\ | A backslash () character | Here are some examples: nebula> YIELD 'This\\nIs\\nFour\\nLines' -------------------- | This Is Four Lines | -------------------- nebula> YIELD 'disappearing\\ backslash' -------------------- | disappearing backslash | --------------------","title":"String literals"},{"location":"manual-doc/statement-syntax/data-administration-statements/account-management-statements/drop-user-syntax/","text":"DROP USER [IF EXISTS] user_name Only God and Admin user have the DROP privilege for the sentence. DROP USER does not automatically close any already opened client session.","title":"Drop user syntax"},{"location":"manual-doc/statement-syntax/data-administration-statements/configuration-statements/variables-syntax/","text":"Nebula use gflags for run-time configurations. Show variables \u00b6 SHOW VARIABLES [graph|meta|storage] For example nebula> SHOW VARIABLES meta ============================================================================================================================ | module | name | type | mode | value | ============================================================================================================================ | META | v | INT64 | IMMUTABLE | 4 | ---------------------------------------------------------------------------------------------------------------------------- | META | help | BOOL | IMMUTABLE | False | ---------------------------------------------------------------------------------------------------------------------------- | META | port | INT64 | IMMUTABLE | 45500 | ---------------------------------------------------------------------------------------------------------------------------- Get variables \u00b6 GET VARIABLES [graph|meta|storage :] var For example nebula> GET VARIABLES storage:load_config_interval_secs ================================================================= | module | name | type | mode | value | ================================================================= | STORAGE | load_config_interval_secs | INT64 | MUTABLE | 120 | ----------------------------------------------------------------- nebula> GET VARIABLES load_config_interval_secs =================================================================== | module | name | type | mode | value | =================================================================== | META | load_config_interval_secs | INT64 | IMMUTABLE | 120 | ------------------------------------------------------------------- | STORAGE | load_config_interval_secs | INT64 | MUTABLE | 1 | ------------------------------------------------------------------- Update variables \u00b6 UPDATE VARIABLES [graph|meta|storage :] var = value The updated variables will be stored into meta-service permanently. If the variable's mode is MUTABLE , the change will take effects immediately. Otherwise, if the mode is REBOOT , the change will not work until server restart. For example nebula> UPDATE VARIABLES storage:load_config_interval_secs=1 Execution succeeded (Time spent: 1750/2484 us) nebula> GET VARIABLES storage:load_config_interval_secs ================================================================= | module | name | type | mode | value | ================================================================= | STORAGE | load_config_interval_secs | INT64 | MUTABLE | 1 | -----------------------------------------------------------------","title":"Variables syntax"},{"location":"manual-doc/statement-syntax/data-administration-statements/configuration-statements/variables-syntax/#show-variables","text":"SHOW VARIABLES [graph|meta|storage] For example nebula> SHOW VARIABLES meta ============================================================================================================================ | module | name | type | mode | value | ============================================================================================================================ | META | v | INT64 | IMMUTABLE | 4 | ---------------------------------------------------------------------------------------------------------------------------- | META | help | BOOL | IMMUTABLE | False | ---------------------------------------------------------------------------------------------------------------------------- | META | port | INT64 | IMMUTABLE | 45500 | ----------------------------------------------------------------------------------------------------------------------------","title":"Show variables"},{"location":"manual-doc/statement-syntax/data-administration-statements/configuration-statements/variables-syntax/#get-variables","text":"GET VARIABLES [graph|meta|storage :] var For example nebula> GET VARIABLES storage:load_config_interval_secs ================================================================= | module | name | type | mode | value | ================================================================= | STORAGE | load_config_interval_secs | INT64 | MUTABLE | 120 | ----------------------------------------------------------------- nebula> GET VARIABLES load_config_interval_secs =================================================================== | module | name | type | mode | value | =================================================================== | META | load_config_interval_secs | INT64 | IMMUTABLE | 120 | ------------------------------------------------------------------- | STORAGE | load_config_interval_secs | INT64 | MUTABLE | 1 | -------------------------------------------------------------------","title":"Get variables"},{"location":"manual-doc/statement-syntax/data-administration-statements/configuration-statements/variables-syntax/#update-variables","text":"UPDATE VARIABLES [graph|meta|storage :] var = value The updated variables will be stored into meta-service permanently. If the variable's mode is MUTABLE , the change will take effects immediately. Otherwise, if the mode is REBOOT , the change will not work until server restart. For example nebula> UPDATE VARIABLES storage:load_config_interval_secs=1 Execution succeeded (Time spent: 1750/2484 us) nebula> GET VARIABLES storage:load_config_interval_secs ================================================================= | module | name | type | mode | value | ================================================================= | STORAGE | load_config_interval_secs | INT64 | MUTABLE | 1 | -----------------------------------------------------------------","title":"Update variables"},{"location":"manual-doc/statement-syntax/data-definition-statements/alter-tag-edge-syntax/","text":"ALTER {TAG | EDGE} tag_name | edge_name [alter_definition [, alter_definition] ...] [ttl_definition [, ttl_definition] ... ] alter_definition: | ADD (prop_name data_type) | DROP (prop_name) | CHANGE (prop_name data_type) ttl_definition: TTL_DURATION = ttl_duration, TTL_COL = prop_name ALTER statement results in multiple versions. It's an UNDEFINED behavior if you interpret data with the mis-match version/schema. ALTER statement changes the structure of a tag or edge. For example, you can add or delete properties, change the type of an existing property, or rename properties. You can also set a property as TTL (Time-To-Live), or change the TTL duration. Multiple ADD , DROP , CHANGE clauses are permitted in a single ALTER statements, separated by commas. But do NOT add, drop, change the same property in one statement. If you have to do so, make it one of each clause per ALTER statement. ALTER TAG t1 ADD (id int, name string) ALTER EDGE e1 ADD (prop1 int, prop2 string), /* add prop1 */ CHANGE (prop3 string), /* change prop3 to string */ DROP (prop4, prop5) /* remove prop4 and prop5 */ ALTER EDGE e1 TTL_DURATION = 2, TTL_COL = prop1 -- mark prop1's value to be removed in 2 seconds Notice that TTL_COL only support INT and TIMESTAMP types.","title":"Alter tag edge syntax"},{"location":"manual-doc/statement-syntax/data-definition-statements/create-space-syntax/","text":"Create Space Syntax \u00b6 CREATE SPACE space_name (space_option,...) space_option: option_name = value This statement creates a new space. SPACE is a region that provides physically isolation of graphs in Nebula. Space Name \u00b6 space_name The name uniquely identifies the space in a cluster. The rules for the naming are given in Schena_Object_Names.md Space Options \u00b6 When creating a space, options can be given. An option_name can be any of the following: * partition_num _partition_num_ specifies the number of partitions in one replica. The default value is 1024. replica_factor replica_factor specifies the number of replicas in the cluster. The default replica factor is 1. However, if no option is given, Nebula Graph will create the space with default patition number and replica factor. Example \u00b6 CREATE SPACE my_space_1; -- create space with default partion number and replica factor CREATE SPACE my_space_2(partition_num=10); -- create space with default replica factor CREATE SPACE my_space_3(replica_factor=1); -- create space with default partion number CREATE SPACE my_space_4(partition_num=10, replica_factor=1);","title":"Create Space Syntax"},{"location":"manual-doc/statement-syntax/data-definition-statements/create-space-syntax/#create-space-syntax","text":"CREATE SPACE space_name (space_option,...) space_option: option_name = value This statement creates a new space. SPACE is a region that provides physically isolation of graphs in Nebula.","title":"Create Space Syntax"},{"location":"manual-doc/statement-syntax/data-definition-statements/create-space-syntax/#space-name","text":"space_name The name uniquely identifies the space in a cluster. The rules for the naming are given in Schena_Object_Names.md","title":"Space Name"},{"location":"manual-doc/statement-syntax/data-definition-statements/create-space-syntax/#space-options","text":"When creating a space, options can be given. An option_name can be any of the following: * partition_num _partition_num_ specifies the number of partitions in one replica. The default value is 1024. replica_factor replica_factor specifies the number of replicas in the cluster. The default replica factor is 1. However, if no option is given, Nebula Graph will create the space with default patition number and replica factor.","title":"Space Options"},{"location":"manual-doc/statement-syntax/data-definition-statements/create-space-syntax/#example","text":"CREATE SPACE my_space_1; -- create space with default partion number and replica factor CREATE SPACE my_space_2(partition_num=10); -- create space with default replica factor CREATE SPACE my_space_3(replica_factor=1); -- create space with default partion number CREATE SPACE my_space_4(partition_num=10, replica_factor=1);","title":"Example"},{"location":"manual-doc/statement-syntax/data-definition-statements/create-tag-edge-syntax/","text":"Create TAG / EDGE Syntax \u00b6 CREATE {TAG | EDGE} tag_name|edge_name (create_definition, ...) [tag_edge_options] create_definition: prop_name data_type tag_edge_options: option [, option ...] option: TTL_DURATION [=] ttl_duration | TTL_COL [=] prop_name Nebula's graph schema is composed of tags and edges, either of which may have properties. CREATE TAG statement defines a tag with the given name. CREATE EDGE statement is to define an edge type. There are several aspects to this syntax, described under the following topics in this section: Tag Name and Edge Type Name Property Name and Data Type Tag Name and EdgeType Name \u00b6 tag_name and edge_name The name of tags and edgeTypes should be unique within the space. Once the name is defined, it can not be altered. The rules of tag and edgeType names are the same as those for names of spaces. See Schema Object Name Property Name and Data Type \u00b6 prop_name prop_name indicates the name of properties. It must be unique for each tag or edgeType. data_type data_type represents the data type of each property. For more information about data types that Nebula Graph supports, see data types section. NULL and NOT NULL constrain are not supported yet when creating tags/edges (comparing with relational databases). Time-to-Live (TTL) syntax \u00b6 TTL_DURATION ttl_duration specifies the life cycle of vertices (or edges). TTL expires the vertexes or edges after the specified number of seconds has passed since the TTL_COL configured value; i.e. the expiration threshold is TTL_COL configured property's value plus the specified number of seconds. If the value for ttl_duration is zero or negative, the vertices or edges will not expire. TTL_COL The data type of prop_name must be either int64 or timestamp. multiple TTL definition If TTL_COL is a list of prop_name, and there are multiple ttl_duration, Nebula Graph uses the lowest(i.e. earliest) expiration threshold to expire data. Examples \u00b6 CREATE TAG course(name string, credits int) CREATE TAG notag() -- empty properties CREATE EDGE follow(start_time timestamp, likeness double) CREATE EDGE noedge() -- empty properties CREATE TAG woman(name string, age int, married bool, salary double, create_time timestamp) TTL_DRUATION = 100, TTL_COL = create_time -- expired when now is later than create_time + 100 CREATE EDGE marriage(location string, since timestamp) TTL_DURATION = 0, TTL_COL = since -- negative or zero, not expire CREATE TAG icecream(made timestamp, temprature int) TTL_DURATION = 100, TTL_COL = made, TTL_DRUATION = 10, TTL_COL = temprature -- no matter which comes first: made + 100 or temprature + 10 CREATE EDGE garbge (thrown timestamp, temprature int) TTL_DURATION = -2, TTL_COL = thrown, TTL_DRUATION = 10, TTL_COL = thrown -- legal, but not recommended. expired at thrown + 10","title":"Create tag edge syntax"},{"location":"manual-doc/statement-syntax/data-definition-statements/create-tag-edge-syntax/#create-tag-edge-syntax","text":"CREATE {TAG | EDGE} tag_name|edge_name (create_definition, ...) [tag_edge_options] create_definition: prop_name data_type tag_edge_options: option [, option ...] option: TTL_DURATION [=] ttl_duration | TTL_COL [=] prop_name Nebula's graph schema is composed of tags and edges, either of which may have properties. CREATE TAG statement defines a tag with the given name. CREATE EDGE statement is to define an edge type. There are several aspects to this syntax, described under the following topics in this section: Tag Name and Edge Type Name Property Name and Data Type","title":"Create TAG / EDGE Syntax"},{"location":"manual-doc/statement-syntax/data-definition-statements/create-tag-edge-syntax/#tag-name-and-edgetype-name","text":"tag_name and edge_name The name of tags and edgeTypes should be unique within the space. Once the name is defined, it can not be altered. The rules of tag and edgeType names are the same as those for names of spaces. See Schema Object Name","title":"Tag Name and EdgeType Name"},{"location":"manual-doc/statement-syntax/data-definition-statements/create-tag-edge-syntax/#property-name-and-data-type","text":"prop_name prop_name indicates the name of properties. It must be unique for each tag or edgeType. data_type data_type represents the data type of each property. For more information about data types that Nebula Graph supports, see data types section. NULL and NOT NULL constrain are not supported yet when creating tags/edges (comparing with relational databases).","title":"Property Name and Data Type"},{"location":"manual-doc/statement-syntax/data-definition-statements/create-tag-edge-syntax/#time-to-live-ttl-syntax","text":"TTL_DURATION ttl_duration specifies the life cycle of vertices (or edges). TTL expires the vertexes or edges after the specified number of seconds has passed since the TTL_COL configured value; i.e. the expiration threshold is TTL_COL configured property's value plus the specified number of seconds. If the value for ttl_duration is zero or negative, the vertices or edges will not expire. TTL_COL The data type of prop_name must be either int64 or timestamp. multiple TTL definition If TTL_COL is a list of prop_name, and there are multiple ttl_duration, Nebula Graph uses the lowest(i.e. earliest) expiration threshold to expire data.","title":"Time-to-Live (TTL) syntax"},{"location":"manual-doc/statement-syntax/data-definition-statements/create-tag-edge-syntax/#examples","text":"CREATE TAG course(name string, credits int) CREATE TAG notag() -- empty properties CREATE EDGE follow(start_time timestamp, likeness double) CREATE EDGE noedge() -- empty properties CREATE TAG woman(name string, age int, married bool, salary double, create_time timestamp) TTL_DRUATION = 100, TTL_COL = create_time -- expired when now is later than create_time + 100 CREATE EDGE marriage(location string, since timestamp) TTL_DURATION = 0, TTL_COL = since -- negative or zero, not expire CREATE TAG icecream(made timestamp, temprature int) TTL_DURATION = 100, TTL_COL = made, TTL_DRUATION = 10, TTL_COL = temprature -- no matter which comes first: made + 100 or temprature + 10 CREATE EDGE garbge (thrown timestamp, temprature int) TTL_DURATION = -2, TTL_COL = thrown, TTL_DRUATION = 10, TTL_COL = thrown -- legal, but not recommended. expired at thrown + 10","title":"Examples"},{"location":"manual-doc/statement-syntax/data-definition-statements/drop-edge-syntax/","text":"DROP EDGE edge_type_name You must have the DROP privilege for the edge type. This statement removes all the edges (connections) with the specific edge type. All the files and directories in the disk are NOT deleted directly. They can only be released by future operations (see TODO).","title":"Drop edge syntax"},{"location":"manual-doc/statement-syntax/data-definition-statements/drop-space-syntax/","text":"DROP SPACE space_name You must have the DROP privilege for the graph space. DROP SPACE deletes everything (all the vertices, edges, indices, and properties) in the specific space. Other spaces remain unchanged. This statement does not immediately remove all the files and directories in the storage engine (and release disk space). The deletion depends on the implement of different storage engine. Be very careful with this statement.","title":"Drop space syntax"},{"location":"manual-doc/statement-syntax/data-definition-statements/drop-tag-syntax/","text":"DROP TAG tag_name You must have the DROP privilege for the tag. Be careful with this statement. A vertex can have either only one tag (types) or multiple tags (types). In the former case, such a vertex can NOT be accessible after the statement -- which may result in DANGLING edges those are connecting with such vertex. In the later case, such a vertex is still accessible. But all the properties defined by this dropped tag are not accessible. All the files and directories in the disk are NOT deleted directly. They can only be released by furture operations (see TODO).","title":"Drop tag syntax"},{"location":"manual-doc/statement-syntax/data-definition-statements/show-syntax/","text":"SHOW {SPACES | TAGS | EDGES | HOSTS} SHOW VARIABLES [graph|meta|storage] SHOW SPACES lists the SPACES on the Nebula Graph cluster. SHOW TAGS and SHOW EDGES return the defined tags and edge types in the space, respectively. SHOW HOSTS is to list storage hosts registered by the meta server. For more information about SHOW VARIABLES [graph|meta|storage] , please refer to variable syntax . Example \u00b6 nebula> SHOW SPACES; ======== | Name | ======== | test | -------- nebula> USE test; nebula> SHOW TAGS; nebula> SHOW EDGES;","title":"Show syntax"},{"location":"manual-doc/statement-syntax/data-definition-statements/show-syntax/#example","text":"nebula> SHOW SPACES; ======== | Name | ======== | test | -------- nebula> USE test; nebula> SHOW TAGS; nebula> SHOW EDGES;","title":"Example"},{"location":"manual-doc/statement-syntax/data-manipulation-statements/fetch-syntax/","text":"Fetch Syntax \u00b6 The FETCH syntax is used to get vertex/edge's properties. Fetch Vertex property \u00b6 Use FETCH PROP ON to return a (list of) vertex's properties. Currently, you can get multiple vertices' properties with the same in one sentence. FETCH PROP ON <tag_name> <vertex_id_list> [YIELD [DISTINCT] <return_list>] <tag_name> is the tag name. It should be the same tag within return_list <vertex_id_list>::=[vertex_id [, vertex_id]] is a list of vertex id separated by comma(,) [YIELD [DISTINCT] <return_list>] is the property list returned. Please refer here [(Yield_Syntax.md)] for `YIELD` syntax Examples \u00b6 nebula> FETCH PROP ON player 1 -- return all the properties of vertex id 1 if no yield field is given. nebula> FETCH PROP ON player 1 YIELD player.name, player.age -- return property name and age of vertex id 1 nebula> FETCH PROP ON player hash(\\\"nebula\\\") YIELD player.name, player.age -- hash string to int64 as vertex id, fetch name and player nebula> GO FROM 1 over e1 | FETCH PROP ON player $- YIELD player.name, player.age -- find the all neighbors of vertex 1 through edge e1. Then Get the neighbors' name and age. nebula> $var = GO FROM 1 over e1; FETCH PROP ON player $var.id YIELD player.name, player.age -- the same as above sentence. nebula> FETCH PROP ON player 1,2,3 YIELD DISTINCT player.name, player.age -- get three vertices 1,2,3, return by unique(distinct) name and age Fetch Edge Property \u00b6 The FETCH usage of edge is almost the same as for vertex. You can get properties from multiple edges with the same type. FETCH PROP ON <edge_type> <vid> -> <vid> [, <vid> -> <vid> ...] [YIELD [DISTINCT] <return_list>] <edge_type> specifies the edge's type. It must be the same as those in <return_list> <vid> -> <vid> denotes a starting vertex to (->) an ending vertex. Multiple edges are separated by comma(,). [YIELD [DISTINCT] <return_list>] is the property list returned. Example \u00b6 nebula> FETCH PROP ON e1 100 -> 200 -- from vertex 100 to 200 with edge type e1, get all the properties since no YIELD is given. nebula> FETCH PROP ON e1 100 -> 200 YIELD e1.p1 -- only return property p1 nebula> GO FROM 1 OVER e1 YIELD e1.prop1 -- for all the out going edges of vertex 1, get edge property prop1. nebula> GO FROM 1 OVER e1 YIELD e1._src AS s, serve._dst AS d \\ | FETCH PROP ON e1 $-.s -> $-.d YIELD e1.prop1 -- the same as above sentence nebula> $var = GO FROM 1 OVER e1 YIELD e1._src AS s, e2._dst AS d;\\ FETCH PROP ON serve $var.s -> $var.d YIELD e1.prop1. -- the same as above.","title":"Fetch Syntax"},{"location":"manual-doc/statement-syntax/data-manipulation-statements/fetch-syntax/#fetch-syntax","text":"The FETCH syntax is used to get vertex/edge's properties.","title":"Fetch Syntax"},{"location":"manual-doc/statement-syntax/data-manipulation-statements/fetch-syntax/#fetch-vertex-property","text":"Use FETCH PROP ON to return a (list of) vertex's properties. Currently, you can get multiple vertices' properties with the same in one sentence. FETCH PROP ON <tag_name> <vertex_id_list> [YIELD [DISTINCT] <return_list>] <tag_name> is the tag name. It should be the same tag within return_list <vertex_id_list>::=[vertex_id [, vertex_id]] is a list of vertex id separated by comma(,) [YIELD [DISTINCT] <return_list>] is the property list returned. Please refer here [(Yield_Syntax.md)] for `YIELD` syntax","title":"Fetch Vertex property"},{"location":"manual-doc/statement-syntax/data-manipulation-statements/fetch-syntax/#examples","text":"nebula> FETCH PROP ON player 1 -- return all the properties of vertex id 1 if no yield field is given. nebula> FETCH PROP ON player 1 YIELD player.name, player.age -- return property name and age of vertex id 1 nebula> FETCH PROP ON player hash(\\\"nebula\\\") YIELD player.name, player.age -- hash string to int64 as vertex id, fetch name and player nebula> GO FROM 1 over e1 | FETCH PROP ON player $- YIELD player.name, player.age -- find the all neighbors of vertex 1 through edge e1. Then Get the neighbors' name and age. nebula> $var = GO FROM 1 over e1; FETCH PROP ON player $var.id YIELD player.name, player.age -- the same as above sentence. nebula> FETCH PROP ON player 1,2,3 YIELD DISTINCT player.name, player.age -- get three vertices 1,2,3, return by unique(distinct) name and age","title":"Examples"},{"location":"manual-doc/statement-syntax/data-manipulation-statements/fetch-syntax/#fetch-edge-property","text":"The FETCH usage of edge is almost the same as for vertex. You can get properties from multiple edges with the same type. FETCH PROP ON <edge_type> <vid> -> <vid> [, <vid> -> <vid> ...] [YIELD [DISTINCT] <return_list>] <edge_type> specifies the edge's type. It must be the same as those in <return_list> <vid> -> <vid> denotes a starting vertex to (->) an ending vertex. Multiple edges are separated by comma(,). [YIELD [DISTINCT] <return_list>] is the property list returned.","title":"Fetch Edge Property"},{"location":"manual-doc/statement-syntax/data-manipulation-statements/fetch-syntax/#example","text":"nebula> FETCH PROP ON e1 100 -> 200 -- from vertex 100 to 200 with edge type e1, get all the properties since no YIELD is given. nebula> FETCH PROP ON e1 100 -> 200 YIELD e1.p1 -- only return property p1 nebula> GO FROM 1 OVER e1 YIELD e1.prop1 -- for all the out going edges of vertex 1, get edge property prop1. nebula> GO FROM 1 OVER e1 YIELD e1._src AS s, serve._dst AS d \\ | FETCH PROP ON e1 $-.s -> $-.d YIELD e1.prop1 -- the same as above sentence nebula> $var = GO FROM 1 OVER e1 YIELD e1._src AS s, e2._dst AS d;\\ FETCH PROP ON serve $var.s -> $var.d YIELD e1.prop1. -- the same as above.","title":"Example"},{"location":"manual-doc/statement-syntax/data-manipulation-statements/go-syntax/","text":"GO statement is the MOST commonly used clause in Nebula. It indicates to travel in a graph with specific filter conditions (the WHERE clause), to fetch nodes and edges properties, and return results (the YIELD clause) with given order (the ORDER BY ASC | DESC clause) and numbers (the LIMIT clause). The syntax of GO statement (and FIND statement) is very similar to SELECT in SQL. Notice that the major difference is that GO must start traversing from a (set of) node(s) You can refer to FIND statement (in progress), which is the counterpart of SELECT in SQL. GO FROM <node_list> OVER <edge_type_list> WHERE (expression [ AND | OR expression ...]) YIELD | YIELDS [DISTINCT] <return_list> <node_list> | vid [, vid ...] | $-.id <edge_type_list> edge_type [, edge_type ...] <return_list> <col_name> [AS <col_alias>] [, <col_name> [AS <col_alias>] ...] is either a list of node's vid separated by comma(,), or a special place holder $-.id (see PIPE syntax). is a list of edge types which graph traversal can go through. WHERE specify the logical conditions that must satisfy to be selected. WHERE-syntax can be conditions for src-vertex, the edges, and dst-vertex. The logical AND, OR, NOT are also supported. see WHERE-syntax for more information. YIELD [DISTINCT] statement returns the result in column format and rename as an alias name. see YIELD -syntax for more information. The DISTINCT -syntax works the same as SQL. Examples \u00b6 nebula> GO FROM 101 OVER serve \\ /* start from vertex 101 along with edge type serve, and get vertex 204, 215 */ ======= | id | ======= | 204 | ------- | 215 | ------- nebula> GO FROM 101 OVER serve \\ WHERE serve.start_year > 1990 /* check edge (serve) property ( start_year) */ \\ YIELD $$.team.name AS team_name, /* target vertex (team) property serve.start_year */ ================================ | team_name | serve.start_year | ================================ | Spurs | 1999 | -------------------------------- | Hornets | 2018 | -------------------------------- nebula> GO FROM 100,102 OVER serve \\ WHERE serve.start_year > 1995 /* check edge property */ \\ YIELD DISTINCT $$.team.name AS team_name, /* DISTINCT as SQL */ \\ serve.start_year, /* edge property */ \\ $^.player.name AS player_name /* source vertex (player) property */ ======================================================== | team_name | serve.start_year | player_name | ======================================================== | Trail Blazers | 2006 | LaMarcus Aldridge | -------------------------------------------------------- | Spurs | 2015 | LaMarcus Aldridge | -------------------------------------------------------- | Spurs | 1997 | Tim Duncan | -------------------------------------------------------- Reference \u00b6","title":"Go syntax"},{"location":"manual-doc/statement-syntax/data-manipulation-statements/go-syntax/#examples","text":"nebula> GO FROM 101 OVER serve \\ /* start from vertex 101 along with edge type serve, and get vertex 204, 215 */ ======= | id | ======= | 204 | ------- | 215 | ------- nebula> GO FROM 101 OVER serve \\ WHERE serve.start_year > 1990 /* check edge (serve) property ( start_year) */ \\ YIELD $$.team.name AS team_name, /* target vertex (team) property serve.start_year */ ================================ | team_name | serve.start_year | ================================ | Spurs | 1999 | -------------------------------- | Hornets | 2018 | -------------------------------- nebula> GO FROM 100,102 OVER serve \\ WHERE serve.start_year > 1995 /* check edge property */ \\ YIELD DISTINCT $$.team.name AS team_name, /* DISTINCT as SQL */ \\ serve.start_year, /* edge property */ \\ $^.player.name AS player_name /* source vertex (player) property */ ======================================================== | team_name | serve.start_year | player_name | ======================================================== | Trail Blazers | 2006 | LaMarcus Aldridge | -------------------------------------------------------- | Spurs | 2015 | LaMarcus Aldridge | -------------------------------------------------------- | Spurs | 1997 | Tim Duncan | --------------------------------------------------------","title":"Examples"},{"location":"manual-doc/statement-syntax/data-manipulation-statements/go-syntax/#reference","text":"","title":"Reference"},{"location":"manual-doc/statement-syntax/data-manipulation-statements/insert-edge-syntax/","text":"INSERT EDGE edge_name ( <prop_name_list> ) {VALUES | VALUE} <src_vid> -> <dst_vid> : ( <prop_value_list> ) [, <src_vid> -> <dst_vid> : ( <prop_value_list> )] <prop_name_list>: [ <prop_name> [, <prop_name> ] ...] <prop_value_list>: [ <prop_value> [, <prop_value> ] ...] INSERT EDGE statement inserts a (directed) edge from a starting vertex (given by src_vid) to an ending vertex (given by dst_vid). <edge_name> denotes the edge type, which must be created before INSERT EDGE . <prop_name_list> is the property name list as the given <edge_name> . <prop_value_list> must provide the value list according to <prop_name_list> . If no value matches the type, an error will be returned. No default value is given in this release. Examples \u00b6 # CREATE EDGE e1() -- create edge t1 with empty property INSERT EDGE e1 () VALUES 10->11:() -- insert an edge from vertex 10 to vertex 11 with empty property # CREATE EDGE e2 (name string, age int) -- create edge e2 with two properties INSERT EDGE e2 (name, age) VALUES 11->13:(\"n1\", 1) -- insert edge from 11 to 13 with two properties INSERT EDGE e2 (name, age) VALUES \\ 12->13:(\"n1\", 1), 13->14(\"n2\", 2) -- insert two edges INSERT EDGE e2 (name, age) VALUES 11->13:(\"n1\", \"a13\") -- WRONG. \"a13\" is not int An edge can be inserted/wrote multiple times. Only the last write values can be read. -- insert edge with new version of values. INSERT EDGE e2 (name, age) VALUES 11->13:(\"n1\", 12) INSERT EDGE e2 (name, age) VALUES 11->13:(\"n1\", 13) INSERT EDGE e2 (name, age) VALUES 11->13:(\"n1\", 14) -- the last version can be read","title":"Insert edge syntax"},{"location":"manual-doc/statement-syntax/data-manipulation-statements/insert-edge-syntax/#examples","text":"# CREATE EDGE e1() -- create edge t1 with empty property INSERT EDGE e1 () VALUES 10->11:() -- insert an edge from vertex 10 to vertex 11 with empty property # CREATE EDGE e2 (name string, age int) -- create edge e2 with two properties INSERT EDGE e2 (name, age) VALUES 11->13:(\"n1\", 1) -- insert edge from 11 to 13 with two properties INSERT EDGE e2 (name, age) VALUES \\ 12->13:(\"n1\", 1), 13->14(\"n2\", 2) -- insert two edges INSERT EDGE e2 (name, age) VALUES 11->13:(\"n1\", \"a13\") -- WRONG. \"a13\" is not int An edge can be inserted/wrote multiple times. Only the last write values can be read. -- insert edge with new version of values. INSERT EDGE e2 (name, age) VALUES 11->13:(\"n1\", 12) INSERT EDGE e2 (name, age) VALUES 11->13:(\"n1\", 13) INSERT EDGE e2 (name, age) VALUES 11->13:(\"n1\", 14) -- the last version can be read","title":"Examples"},{"location":"manual-doc/statement-syntax/data-manipulation-statements/insert-vertex-syntax/","text":"INSERT VERTEX tag_name[, tag_name] (prop_name_list[, prop_name_list]) {VALUES | VALUE} vid: (prop_value_list[, prop_value_list]) prop_name_list: [prop_name [, prop_name] ...] prop_value_list: [prop_value [, prop_value] ...] INSERT VERTEX statements inserts one vertex into Nebula. * tag_name denotes the tag (vertex type), which must be created before INSERT VERTEX . * prop_name_list is the property name list as the given tag_name . * prop_value_list must provide the value list according to prop_name_list . If any value doesn't match its type, an error will be returned. No default value is given in this release. Examples \u00b6 # CREATE TAG t1() -- create tag t1 with empty property INSERT VERTEX t1 () VALUES 10:() -- insert a vertex with vid 100 and empty property # CREATE TAG t2 (name string, age int) -- create tag t2 with two properties INSERT VERTEX t2 (name, age) VALUES 11:(\"n1\", 12) -- insert vertex 11 with the properties INSERT VERTEX t2 (name, age) VALUES 12:(\"n1\", \"a13\") -- WRONG. \"a13\" is not int # CREATE TAG t1(i1 int) # CREATE TAG t2(s2 string) INSERT VERTEX t1 (i1), t2(s2) VALUES 21: (321, \"hello\") -- insert vertex 21 with two tags. A vertex can be inserted/wrote multiple times. Only the last write values can be read. -- insert vertex 11 with new version of values. INSERT VERTEX t2 (name, age) VALUES 11:(\"n2\", 13) INSERT VERTEX t2 (name, age) VALUES 11:(\"n3\", 14) INSERT VERTEX t2 (name, age) VALUES 11:(\"n4\", 15) -- the last version can be read","title":"Insert vertex syntax"},{"location":"manual-doc/statement-syntax/data-manipulation-statements/insert-vertex-syntax/#examples","text":"# CREATE TAG t1() -- create tag t1 with empty property INSERT VERTEX t1 () VALUES 10:() -- insert a vertex with vid 100 and empty property # CREATE TAG t2 (name string, age int) -- create tag t2 with two properties INSERT VERTEX t2 (name, age) VALUES 11:(\"n1\", 12) -- insert vertex 11 with the properties INSERT VERTEX t2 (name, age) VALUES 12:(\"n1\", \"a13\") -- WRONG. \"a13\" is not int # CREATE TAG t1(i1 int) # CREATE TAG t2(s2 string) INSERT VERTEX t1 (i1), t2(s2) VALUES 21: (321, \"hello\") -- insert vertex 21 with two tags. A vertex can be inserted/wrote multiple times. Only the last write values can be read. -- insert vertex 11 with new version of values. INSERT VERTEX t2 (name, age) VALUES 11:(\"n2\", 13) INSERT VERTEX t2 (name, age) VALUES 11:(\"n3\", 14) INSERT VERTEX t2 (name, age) VALUES 11:(\"n4\", 15) -- the last version can be read","title":"Examples"},{"location":"manual-doc/statement-syntax/data-manipulation-statements/pipe-syntax/","text":"PIPE-syntax \u00b6 One major difference between nGQL and SQL is how subqueries are composed. In SQL, sub-queries are nested (embedded) to form a statement. MeanWhile, nGQL uses shell style PIPE (|) . Examples \u00b6 GO FROM 201 OVER edge_serve | GO FROM $-.id OVER edge_fans | GO FROM $-.id ... GO FROM 100 OVER like YIELD like._dst AS dstid, $$.player.name AS Name | GO FROM $-.dstid OVER like YIELD like._dst, like.likeness, $-.Name The dest (vertex) id will be given as the default value if no YIELD is used. But if YIELD is declared explicitly, (the default value) id will not be given. The alias name mentioned right after placeholder $-. must be either exactly id or already defined in the previews YIELD statement (e.g., distid or Name as shown in the above example). (As a syntax sugar, you can use $- to $-.id for short)","title":"PIPE-syntax"},{"location":"manual-doc/statement-syntax/data-manipulation-statements/pipe-syntax/#pipe-syntax","text":"One major difference between nGQL and SQL is how subqueries are composed. In SQL, sub-queries are nested (embedded) to form a statement. MeanWhile, nGQL uses shell style PIPE (|) .","title":"PIPE-syntax"},{"location":"manual-doc/statement-syntax/data-manipulation-statements/pipe-syntax/#examples","text":"GO FROM 201 OVER edge_serve | GO FROM $-.id OVER edge_fans | GO FROM $-.id ... GO FROM 100 OVER like YIELD like._dst AS dstid, $$.player.name AS Name | GO FROM $-.dstid OVER like YIELD like._dst, like.likeness, $-.Name The dest (vertex) id will be given as the default value if no YIELD is used. But if YIELD is declared explicitly, (the default value) id will not be given. The alias name mentioned right after placeholder $-. must be either exactly id or already defined in the previews YIELD statement (e.g., distid or Name as shown in the above example). (As a syntax sugar, you can use $- to $-.id for short)","title":"Examples"},{"location":"manual-doc/statement-syntax/data-manipulation-statements/where-syntax/","text":"Currently, WHERE statement only applies with the GO statement. WHERE (expression [ AND | OR expression ...]) Usually, the expression is comparison between vertex or edge properties. As syntax sugar, you can freely choose to use both AND and && . They are both boolean logical and. So do OR and || . Examples \u00b6 /* GO FROM 201 OVER like */ -- Apply in a GO statement WHERE e1.prop1 >= 17 -- the edge e1's property prop1 is larger than 17 WHERE $^.v1.prop1 == $$.v2.prop2 -- the source vertex v1's property prop1 is equivalent with destination vertex v2's property prop2 WHERE ((e3.prop3 < 0.5) OR ($^.v4.prop4 != \"hello\")) AND $$.v5.prop5 == \"world\" -- logical combination is allowed WHERE 1 == 1 OR TRUE --always TRUE Reference \u00b6","title":"Where syntax"},{"location":"manual-doc/statement-syntax/data-manipulation-statements/where-syntax/#examples","text":"/* GO FROM 201 OVER like */ -- Apply in a GO statement WHERE e1.prop1 >= 17 -- the edge e1's property prop1 is larger than 17 WHERE $^.v1.prop1 == $$.v2.prop2 -- the source vertex v1's property prop1 is equivalent with destination vertex v2's property prop2 WHERE ((e3.prop3 < 0.5) OR ($^.v4.prop4 != \"hello\")) AND $$.v5.prop5 == \"world\" -- logical combination is allowed WHERE 1 == 1 OR TRUE --always TRUE","title":"Examples"},{"location":"manual-doc/statement-syntax/data-manipulation-statements/where-syntax/#reference","text":"","title":"Reference"},{"location":"manual-doc/statement-syntax/data-manipulation-statements/yield-syntax/","text":"YIELD [DISTINCT] <col_name> [AS <col_alias>] [, <col_name> [AS <col_alias>] ...] YIELD statement can be used independently to retrieve computation results without reference to any graph. You can use AS to rename an alias. nebula> YIELD 1 + 1 ========= | (1+1) | ========= | 2 | --------- nebula> YIELD \"Hel\" + \"\\tlo\" AS HELLO_1, \", World!\" as WORLD_2 ====================== | HELLO_1 | WORLD_2 | ====================== | Hel lo | , World! | ---------------------- But commonly, YIELD statement is used more often to return results generated by GO statement. (see GO statement for more details). nebula> GO FROM 201 OVER relations_edge YIELD $$.student.name AS Friend, $$.student.age AS Age, $$.student.gender AS Gender ========================= | Friend | Age | Gender | ========================= | Jane | 17 | female | ------------------------- e.g., $$.student.name is to get the target ($$) vertex (student)'s property (name). DISTINCT YIELD DISTINCT must be used with the GO statement. nebula> YIELD DISTINCT 1 --- syntax error!","title":"Yield syntax"},{"location":"manual-doc/statement-syntax/utility-statements/describe-syntax/","text":"{DESCRIBE | DESC } SPACE space_name {DESCRIBE | DESC } TAG tag_name {DESCRIBE | DESC } EDGE edge_name The DESCRIBE/DESC, and EXPLAIN statements are DIFFERENT in Nebula. The DESCRIBE/DESC keyword is used to obtain information about space, tag, edge structure. Meanwhile, EXPLAIN is used to obtain a query execution plan. Please refer to XXX for more details about EXPLAIN. Also notice that DESCRIBE is different from SHOW. check XXX for SHOW. Examples \u00b6 Providing information about space. As regards information about CREATE SPACE. nebula> DESCRIBE SPACE laura_space; ======================================================== | ID | Name | Partition number | Replica Factor | ======================================================== | 1 | laura_space | 1024 | 1 | -------------------------------------------------------- Providing information about tag. As regards information about CREATE TAG. nebula> DESCRIBE TAG player ================== | Field | Type | ================== | name | string | ------------------ | age | int | ------------------ Providing information about edge. As regards information about CREATE EDGE. nebula> DESCRIBE EDGE serve ===================== | Field | Type | ===================== | start_year | int | --------------------- | end_year | int | ---------------------","title":"Describe syntax"},{"location":"manual-doc/statement-syntax/utility-statements/describe-syntax/#examples","text":"Providing information about space. As regards information about CREATE SPACE. nebula> DESCRIBE SPACE laura_space; ======================================================== | ID | Name | Partition number | Replica Factor | ======================================================== | 1 | laura_space | 1024 | 1 | -------------------------------------------------------- Providing information about tag. As regards information about CREATE TAG. nebula> DESCRIBE TAG player ================== | Field | Type | ================== | name | string | ------------------ | age | int | ------------------ Providing information about edge. As regards information about CREATE EDGE. nebula> DESCRIBE EDGE serve ===================== | Field | Type | ===================== | start_year | int | --------------------- | end_year | int | ---------------------","title":"Examples"},{"location":"manual-doc/statement-syntax/utility-statements/use-syntax/","text":"USE graph_space_name The USE statement tells Nebula to use the named (graph) space as the current working space. This statement requires some privileges. The named space remains the default until the end of the session or another USE statement is issued: USE space1 GO FROM 1 OVER edge1 -- Traverse in graph space1 USE space2 GO FROM 1 OVER edge1 -- Traverse in graph space2. These nodes and edges have no relevance with space1. USE space1; -- Now you are back to space1. Hereafter, you can not read any data from space2. Different from SQL, making a space as the working space prevents you to access the other space. The only way to traverse in a new graph space is to switch by the USE statement. SPACES are FULLY ISOLATED from each other. Unlike SQL, which allows you to select two tables from different databases in one statement, in Nebula, you can only touch one space at a time.","title":"Use syntax"}]}